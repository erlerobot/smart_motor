
ATmega328_OpenServo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00002606  0000269a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002606  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000213  0080010a  0080010a  000026a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000026d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049a1  00000000  00000000  00002970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001924  00000000  00000000  00007311  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016a7  00000000  00000000  00008c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000930  00000000  00000000  0000a2dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e39  00000000  00000000  0000ac0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002104  00000000  00000000  0000ba45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000db49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__ctors_end>
       4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      38:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__vector_14>
      3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      54:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_21>
      58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      60:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__vector_24>
      64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      68:	2a 10       	cpse	r2, r10
      6a:	76 10       	cpse	r7, r6
      6c:	2d 10       	cpse	r2, r13
      6e:	31 10       	cpse	r3, r1
      70:	39 10       	cpse	r3, r9
      72:	3d 10       	cpse	r3, r13
      74:	41 10       	cpse	r4, r1
      76:	44 10       	cpse	r4, r4
      78:	47 10       	cpse	r4, r7
      7a:	4a 10       	cpse	r4, r10
      7c:	6d 10       	cpse	r6, r13
      7e:	71 10       	cpse	r7, r1
      80:	76 10       	cpse	r7, r6
      82:	76 10       	cpse	r7, r6
      84:	76 10       	cpse	r7, r6
      86:	76 10       	cpse	r7, r6
      88:	76 10       	cpse	r7, r6
      8a:	4d 10       	cpse	r4, r13
      8c:	51 10       	cpse	r5, r1
      8e:	55 10       	cpse	r5, r5
      90:	5e 10       	cpse	r5, r14
      92:	61 10       	cpse	r6, r1
      94:	64 10       	cpse	r6, r4
      96:	6a 10       	cpse	r6, r10
      98:	67 10       	cpse	r6, r7

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d8 e0       	ldi	r29, 0x08	; 8
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e6 e0       	ldi	r30, 0x06	; 6
      ae:	f6 e2       	ldi	r31, 0x26	; 38
      b0:	02 c0       	rjmp	.+4      	; 0xb6 <__do_copy_data+0x10>
      b2:	05 90       	lpm	r0, Z+
      b4:	0d 92       	st	X+, r0
      b6:	aa 30       	cpi	r26, 0x0A	; 10
      b8:	b1 07       	cpc	r27, r17
      ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0xc>

000000bc <__do_clear_bss>:
      bc:	23 e0       	ldi	r18, 0x03	; 3
      be:	aa e0       	ldi	r26, 0x0A	; 10
      c0:	b1 e0       	ldi	r27, 0x01	; 1
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
      c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
      c6:	ad 31       	cpi	r26, 0x1D	; 29
      c8:	b2 07       	cpc	r27, r18
      ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
      cc:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <main>
      d0:	0c 94 01 13 	jmp	0x2602	; 0x2602 <_exit>

000000d4 <__bad_interrupt>:
      d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <adc_init>:

void adc_init(void)
// Initialize ADC conversion for reading current monitoring and position.
{
    // Initialize flags and values.
    adc_power_ready = 0;
      d8:	10 92 f3 01 	sts	0x01F3, r1
    adc_power_value = 0;
      dc:	10 92 fb 01 	sts	0x01FB, r1
      e0:	10 92 fa 01 	sts	0x01FA, r1
    adc_position_ready = 0;
      e4:	10 92 f0 01 	sts	0x01F0, r1
    adc_position_value = 0; 
      e8:	10 92 f9 01 	sts	0x01F9, r1
      ec:	10 92 f8 01 	sts	0x01F8, r1
#if BACKEMF_ENABLED
    adc_backemf_ready = 0;
      f0:	10 92 f5 01 	sts	0x01F5, r1
    adc_backemf_value = 0;
      f4:	10 92 f7 01 	sts	0x01F7, r1
      f8:	10 92 f6 01 	sts	0x01F6, r1
#endif
#if TEMPERATURE_ENABLED
    adc_temperature_ready = 0;
      fc:	10 92 f4 01 	sts	0x01F4, r1
    adc_temperature_value = 0;
     100:	10 92 f2 01 	sts	0x01F2, r1
     104:	10 92 f1 01 	sts	0x01F1, r1
#endif

    // Make sure ports PC0 (ADC0), PC1 (ADC1) and PC2 (ADC2) are set low.
    PORTC &= ~((1<<PC0) | (1<<PC1) | (1<<PC2));
     108:	88 b1       	in	r24, 0x08	; 8
     10a:	88 7f       	andi	r24, 0xF8	; 248
     10c:	88 b9       	out	0x08, r24	; 8

    // Disable digital input for ADC0, ADC1 and ADC2.
    DIDR0 |= (1<<ADC0D) | (1<<ADC1D) |(1<<ADC2D);
     10e:	ee e7       	ldi	r30, 0x7E	; 126
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	80 81       	ld	r24, Z
     114:	87 60       	ori	r24, 0x07	; 7
     116:	80 83       	st	Z, r24

    // Set the ADC multiplexer selection register.
    ADMUX = (0<<REFS1) | (1<<REFS0) |                       // Select AVCC as voltage reference.
     118:	82 e4       	ldi	r24, 0x42	; 66
     11a:	80 93 7c 00 	sts	0x007C, r24
            (0<<ADLAR) |                                    // Keep high bits right adjusted.
            ADC_CHANNEL_POSITION;                           // Position as the first channel to sample.

    // Set the ADC control and status register B.
    ADCSRB = (0<<ADTS2) | (1<<ADTS1) | (1<<ADTS0);          // Timer/Counter0 Compare Match A.
     11e:	83 e0       	ldi	r24, 0x03	; 3
     120:	80 93 7b 00 	sts	0x007B, r24

    // Set the ADC control and status register A.
    ADCSRA = (1<<ADEN) |                                    // Enable ADC.
     124:	8f e8       	ldi	r24, 0x8F	; 143
     126:	80 93 7a 00 	sts	0x007A, r24
     12a:	08 95       	ret

0000012c <adc_start>:

void adc_start(uint8_t channel)
// Initialise the adc sample on the first channel
{
    // Set the ADC multiplexer selection register.
    ADMUX = (0<<REFS1) | (1<<REFS0) |                       // Select AVCC as voltage reference.
     12c:	80 64       	ori	r24, 0x40	; 64
     12e:	80 93 7c 00 	sts	0x007C, r24
            (0<<ADLAR) |                                    // Keep high bits right adjusted.
            channel;                           // Position as the first channel to sample.

    // Start the ADC reading of the position channel.
    ADCSRA |= (1<<ADSC);
     132:	ea e7       	ldi	r30, 0x7A	; 122
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	80 64       	ori	r24, 0x40	; 64
     13a:	80 83       	st	Z, r24
     13c:	08 95       	ret

0000013e <__vector_21>:
SIGNAL(ADC_vect)
// Handles ADC interrupt. This runs as an interrupting self triggering mechanism sampling selected channels
// When interrupted with position, it moved initiates the power sampling, which when interrupted initiates
// the other channels in a chain. The Back EMF is not sampled as part of the
// cascade, as this is handled by the backemf module.
{
     13e:	1f 92       	push	r1
     140:	0f 92       	push	r0
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	0f 92       	push	r0
     146:	11 24       	eor	r1, r1
     148:	2f 93       	push	r18
     14a:	3f 93       	push	r19
     14c:	4f 93       	push	r20
     14e:	5f 93       	push	r21
     150:	6f 93       	push	r22
     152:	7f 93       	push	r23
     154:	8f 93       	push	r24
     156:	9f 93       	push	r25
     158:	af 93       	push	r26
     15a:	bf 93       	push	r27
     15c:	ef 93       	push	r30
     15e:	ff 93       	push	r31
    // Read the 10-bit ADC value.
    uint16_t new_value = ADCW;
     160:	40 91 78 00 	lds	r20, 0x0078
     164:	50 91 79 00 	lds	r21, 0x0079

    // Which channel is being read?
    switch (ADMUX & 0x0f)
     168:	80 91 7c 00 	lds	r24, 0x007C
     16c:	8f 70       	andi	r24, 0x0F	; 15
     16e:	82 30       	cpi	r24, 0x02	; 2
     170:	b1 f0       	breq	.+44     	; 0x19e <__vector_21+0x60>
     172:	48 f4       	brcc	.+18     	; 0x186 <__vector_21+0x48>
     174:	88 23       	and	r24, r24
     176:	e1 f0       	breq	.+56     	; 0x1b0 <__vector_21+0x72>
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	91 f5       	brne	.+100    	; 0x1e0 <__vector_21+0xa2>
#endif
#if BATTERY_ENABLED
        case ADC_CHANNEL_BATTERY:

            // Save voltage value to registers
            registers_write_word(REG_VOLTAGE_HI, REG_VOLTAGE_LO, new_value);
     17c:	61 e1       	ldi	r22, 0x11	; 17
     17e:	80 e1       	ldi	r24, 0x10	; 16
     180:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>

            break;
     184:	2d c0       	rjmp	.+90     	; 0x1e0 <__vector_21+0xa2>
{
    // Read the 10-bit ADC value.
    uint16_t new_value = ADCW;

    // Which channel is being read?
    switch (ADMUX & 0x0f)
     186:	83 30       	cpi	r24, 0x03	; 3
     188:	e1 f0       	breq	.+56     	; 0x1c2 <__vector_21+0x84>
     18a:	87 30       	cpi	r24, 0x07	; 7
     18c:	49 f5       	brne	.+82     	; 0x1e0 <__vector_21+0xa2>
            break;
#endif
#if BACKEMF_ENABLED
        case ADC_CHANNEL_BACKEMF:

            adc_backemf_ready = 1;
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	80 93 f5 01 	sts	0x01F5, r24

            adc_backemf_value = new_value;
     194:	50 93 f7 01 	sts	0x01F7, r21
     198:	40 93 f6 01 	sts	0x01F6, r20

            break;
     19c:	21 c0       	rjmp	.+66     	; 0x1e0 <__vector_21+0xa2>
    {

        case ADC_CHANNEL_POSITION:

            // Save the new position value.
            adc_position_value = new_value;
     19e:	50 93 f9 01 	sts	0x01F9, r21
     1a2:	40 93 f8 01 	sts	0x01F8, r20

            // Flag the position value as ready.
            adc_position_ready = 1;
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	80 93 f0 01 	sts	0x01F0, r24

            // Set the ADC multiplexer selection register.
            ADMUX = (0<<REFS1) | (1<<REFS0) |                       // Select AVCC as voltage reference.
     1ac:	80 e4       	ldi	r24, 0x40	; 64
     1ae:	11 c0       	rjmp	.+34     	; 0x1d2 <__vector_21+0x94>


        case ADC_CHANNEL_CURRENT:

            // Save the new power value.
            adc_power_value = new_value;
     1b0:	50 93 fb 01 	sts	0x01FB, r21
     1b4:	40 93 fa 01 	sts	0x01FA, r20

            // Flag the power value as ready.
            adc_power_ready = 1;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	80 93 f3 01 	sts	0x01F3, r24
#elif BATTERY_ENABLED
            channel = ADC_CHANNEL_BATTERY;                            // Sample the battery channel next
#else
            break;
#endif
            ADMUX = (0<<REFS1) | (1<<REFS0) |                       // Select AVCC as voltage reference.
     1be:	83 e4       	ldi	r24, 0x43	; 67
     1c0:	08 c0       	rjmp	.+16     	; 0x1d2 <__vector_21+0x94>

#if TEMPERATURE_ENABLED
        case ADC_CHANNEL_TEMPERATURE:

            // Save the temperature value
            adc_temperature_value = new_value;
     1c2:	50 93 f2 01 	sts	0x01F2, r21
     1c6:	40 93 f1 01 	sts	0x01F1, r20

            // Fag the temperature value as ready
            adc_temperature_ready = 1;
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	80 93 f4 01 	sts	0x01F4, r24
#if BATTERY_ENABLED
            // Now sample the battery voltage
            // Set the ADC multiplexer selection register.
            ADMUX = (0<<REFS1) | (1<<REFS0) |                       // Select AVCC as voltage reference.
     1d0:	81 e4       	ldi	r24, 0x41	; 65
     1d2:	80 93 7c 00 	sts	0x007C, r24
                    (0<<ADLAR) |                                    // Keep high bits right adjusted.
                    ADC_CHANNEL_BATTERY;                            // Battery voltage as the next channel to sample.

            // Start the ADC of the voltage channel now
            ADCSRA |= (1<<ADSC);
     1d6:	80 91 7a 00 	lds	r24, 0x007A
     1da:	80 64       	ori	r24, 0x40	; 64
     1dc:	80 93 7a 00 	sts	0x007A, r24
            adc_backemf_value = new_value;

            break;
#endif
    }
}
     1e0:	ff 91       	pop	r31
     1e2:	ef 91       	pop	r30
     1e4:	bf 91       	pop	r27
     1e6:	af 91       	pop	r26
     1e8:	9f 91       	pop	r25
     1ea:	8f 91       	pop	r24
     1ec:	7f 91       	pop	r23
     1ee:	6f 91       	pop	r22
     1f0:	5f 91       	pop	r21
     1f2:	4f 91       	pop	r20
     1f4:	3f 91       	pop	r19
     1f6:	2f 91       	pop	r18
     1f8:	0f 90       	pop	r0
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	0f 90       	pop	r0
     1fe:	1f 90       	pop	r1
     200:	18 95       	reti

00000202 <registers_init>:

void registers_init(void)
// Function to initialize all registers.
{
    // Initialize all registers to zero.
    memset(&registers[0], 0, REGISTER_COUNT);
     202:	ec ef       	ldi	r30, 0xFC	; 252
     204:	f1 e0       	ldi	r31, 0x01	; 1
     206:	8f e3       	ldi	r24, 0x3F	; 63
     208:	df 01       	movw	r26, r30
     20a:	1d 92       	st	X+, r1
     20c:	8a 95       	dec	r24
     20e:	e9 f7       	brne	.-6      	; 0x20a <registers_init+0x8>


// Write a single byte to the registers.
inline static void registers_write_byte(uint8_t address, uint8_t value)
{
    registers[address] = value;
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	80 83       	st	Z, r24
     214:	81 83       	std	Z+1, r24	; 0x01
     216:	93 e0       	ldi	r25, 0x03	; 3
     218:	92 83       	std	Z+2, r25	; 0x02
     21a:	83 83       	std	Z+3, r24	; 0x03
    registers_write_byte(REG_DEVICE_SUBTYPE, OPENSERVO_DEVICE_SUBTYPE);
    registers_write_byte(REG_VERSION_MAJOR, SOFTWARE_VERSION_MAJOR);
    registers_write_byte(REG_VERSION_MINOR, SOFTWARE_VERSION_MINOR);

#if ROLLING_SUBTYPE
    subtype_index = 0;
     21c:	10 92 3b 02 	sts	0x023B, r1
#endif

    banks_init();
     220:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <banks_init>

00000224 <registers_defaults>:
    step_registers_defaults();
#endif


    // Call the PID module to initialize the PID related default values.
    pid_registers_defaults();
     224:	0e 94 0e 05 	call	0xa1c	; 0xa1c <pid_registers_defaults>

    banks_defaults();
     228:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <banks_defaults>

0000022c <registers_read_word>:
    uint8_t sreg;
    uint16_t value;


    // Clear interrupts.
    asm volatile ("in %0,__SREG__\n\tcli\n\t" : "=&r" (sreg));
     22c:	9f b7       	in	r25, 0x3f	; 63
     22e:	f8 94       	cli

    // Read the registers.
    value = (registers[address_hi] << 8) | registers[address_lo];

    // Restore status.
    asm volatile ("out __SREG__,%0\n\t" : : "r" (sreg));
     230:	9f bf       	out	0x3f, r25	; 63

    // Clear interrupts.
    asm volatile ("in %0,__SREG__\n\tcli\n\t" : "=&r" (sreg));

    // Read the registers.
    value = (registers[address_hi] << 8) | registers[address_lo];
     232:	e8 2f       	mov	r30, r24
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	e4 50       	subi	r30, 0x04	; 4
     238:	fe 4f       	sbci	r31, 0xFE	; 254
     23a:	80 81       	ld	r24, Z
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	98 2f       	mov	r25, r24
     240:	88 27       	eor	r24, r24
     242:	e6 2f       	mov	r30, r22
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	e4 50       	subi	r30, 0x04	; 4
     248:	fe 4f       	sbci	r31, 0xFE	; 254
     24a:	20 81       	ld	r18, Z

    // Restore status.
    asm volatile ("out __SREG__,%0\n\t" : : "r" (sreg));

    return value;
}
     24c:	82 2b       	or	r24, r18
     24e:	08 95       	ret

00000250 <registers_write_word>:
// Interrupts are disabled during the write.
{
    uint8_t sreg;

    // Clear interrupts.
    asm volatile ("in %0,__SREG__\n\tcli\n\t" : "=&r" (sreg));
     250:	9f b7       	in	r25, 0x3f	; 63
     252:	f8 94       	cli

    // Write the registers.
    registers[address_hi] = value >> 8;
     254:	e8 2f       	mov	r30, r24
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	e4 50       	subi	r30, 0x04	; 4
     25a:	fe 4f       	sbci	r31, 0xFE	; 254
     25c:	50 83       	st	Z, r21
    registers[address_lo] = value;
     25e:	e6 2f       	mov	r30, r22
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	e4 50       	subi	r30, 0x04	; 4
     264:	fe 4f       	sbci	r31, 0xFE	; 254
     266:	40 83       	st	Z, r20

    // Restore status.
    asm volatile ("out __SREG__,%0\n\t" : : "r" (sreg));
     268:	9f bf       	out	0x3f, r25	; 63
     26a:	08 95       	ret

0000026c <registers_subtype_cycle>:

#if ROLLING_SUBTYPE
uint8_t registers_subtype_cycle(void)
// Cycle the output of the device subtype register with the values in the subtype_id array
{
    if (subtype_index > sizeof(subtype_id)-1) { subtype_index=0; }
     26c:	80 91 3b 02 	lds	r24, 0x023B
     270:	89 30       	cpi	r24, 0x09	; 9
     272:	10 f0       	brcs	.+4      	; 0x278 <registers_subtype_cycle+0xc>
     274:	10 92 3b 02 	sts	0x023B, r1
    return subtype_id[subtype_index++];
     278:	e0 91 3b 02 	lds	r30, 0x023B
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	8e 0f       	add	r24, r30
     280:	80 93 3b 02 	sts	0x023B, r24
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	e0 50       	subi	r30, 0x00	; 0
     288:	ff 4f       	sbci	r31, 0xFF	; 255
}
     28a:	80 81       	ld	r24, Z
     28c:	08 95       	ret

0000028e <eeprom_erase>:
}


uint8_t eeprom_erase(void)
// Erase the entire EEPROM.
{
     28e:	0f 93       	push	r16
     290:	1f 93       	push	r17
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	60 97       	sbiw	r28, 0x10	; 16
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	f8 94       	cli
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	0f be       	out	0x3f, r0	; 63
     2a4:	cd bf       	out	0x3d, r28	; 61
    uint8_t buffer[16];

    // XXX Disable PWM to servo motor while reading registers.

    // Clear the buffer contents to 0xFF.
    memset(buffer, 0xFF, sizeof(buffer));
     2a6:	40 e1       	ldi	r20, 0x10	; 16
     2a8:	50 e0       	ldi	r21, 0x00	; 0
     2aa:	6f ef       	ldi	r22, 0xFF	; 255
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	ce 01       	movw	r24, r28
     2b0:	01 96       	adiw	r24, 0x01	; 1
     2b2:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <memset>

    // Loop over the EEPROM in buffer increments.
    for (i = 0; i < E2END; i += sizeof(buffer))
     2b6:	00 e0       	ldi	r16, 0x00	; 0
     2b8:	10 e0       	ldi	r17, 0x00	; 0
    {
        // Write the buffer to the block of EEPROM.
        eeprom_write_block(buffer, (void *) i, sizeof(buffer));
     2ba:	40 e1       	ldi	r20, 0x10	; 16
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	b8 01       	movw	r22, r16
     2c0:	ce 01       	movw	r24, r28
     2c2:	01 96       	adiw	r24, 0x01	; 1
     2c4:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <eeprom_write_block>

    // Clear the buffer contents to 0xFF.
    memset(buffer, 0xFF, sizeof(buffer));

    // Loop over the EEPROM in buffer increments.
    for (i = 0; i < E2END; i += sizeof(buffer))
     2c8:	00 5f       	subi	r16, 0xF0	; 240
     2ca:	1f 4f       	sbci	r17, 0xFF	; 255
     2cc:	01 15       	cp	r16, r1
     2ce:	84 e0       	ldi	r24, 0x04	; 4
     2d0:	18 07       	cpc	r17, r24
     2d2:	99 f7       	brne	.-26     	; 0x2ba <eeprom_erase+0x2c>

    // XXX Restore PWM to servo motor.

    // Return success.
    return 1;
}
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	60 96       	adiw	r28, 0x10	; 16
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	08 95       	ret

000002ec <eeprom_restore_registers>:


uint8_t eeprom_restore_registers(void)
// Restore registers from EEPROM.  Returns 1 if success or 0 if the registers failed
// checksum.  Upon failure the caller should initialize the registers to defaults.
{
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <eeprom_restore_registers+0x6>
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
    uint8_t header[2];

    // XXX Disable PWM to servo motor while reading registers.

    // Read EEPROM header which is the first two bytes of EEPROM.
    eeprom_read_block(&header[0], (void *) 0, 2);
     2f6:	42 e0       	ldi	r20, 0x02	; 2
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	ce 01       	movw	r24, r28
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <eeprom_read_block>

    // Does the version match?
    if (header[0] != EEPROM_VERSION) return 0;
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	84 30       	cpi	r24, 0x04	; 4
     30a:	09 f0       	breq	.+2      	; 0x30e <eeprom_restore_registers+0x22>
     30c:	4c c0       	rjmp	.+152    	; 0x3a6 <eeprom_restore_registers+0xba>

    // Read the write protected and redirect registers from EEPROM.
    eeprom_read_block(&registers[MIN_WRITE_PROTECT_REGISTER], (void *) 2, WRITE_PROTECT_REGISTER_COUNT);
     30e:	48 e0       	ldi	r20, 0x08	; 8
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	62 e0       	ldi	r22, 0x02	; 2
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	84 e3       	ldi	r24, 0x34	; 52
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <eeprom_read_block>

    // Load any configuration registers saves in banks

    // Does the checksum match?
    if (header[1] != eeprom_checksum(&registers[MIN_WRITE_PROTECT_REGISTER], WRITE_PROTECT_REGISTER_COUNT, EEPROM_VERSION)) return 0;
     31e:	9a 81       	ldd	r25, Y+2	; 0x02
     320:	84 e0       	ldi	r24, 0x04	; 4
     322:	e4 e3       	ldi	r30, 0x34	; 52
     324:	f2 e0       	ldi	r31, 0x02	; 2
{
    // Keep going while bytes in the buffer.
    while (size)
    {
        // Add the buffer to the sum.
        sum += *buffer;
     326:	21 91       	ld	r18, Z+
     328:	82 0f       	add	r24, r18

static uint8_t eeprom_checksum(const uint8_t *buffer, size_t size, uint8_t sum)
// Adds the buffer to the checksum passed in returning the updated sum.
{
    // Keep going while bytes in the buffer.
    while (size)
     32a:	22 e0       	ldi	r18, 0x02	; 2
     32c:	ec 33       	cpi	r30, 0x3C	; 60
     32e:	f2 07       	cpc	r31, r18
     330:	d1 f7       	brne	.-12     	; 0x326 <eeprom_restore_registers+0x3a>
    eeprom_read_block(&registers[MIN_WRITE_PROTECT_REGISTER], (void *) 2, WRITE_PROTECT_REGISTER_COUNT);

    // Load any configuration registers saves in banks

    // Does the checksum match?
    if (header[1] != eeprom_checksum(&registers[MIN_WRITE_PROTECT_REGISTER], WRITE_PROTECT_REGISTER_COUNT, EEPROM_VERSION)) return 0;
     332:	98 13       	cpse	r25, r24
     334:	38 c0       	rjmp	.+112    	; 0x3a6 <eeprom_restore_registers+0xba>

    // Read EEPROM header which is the first two bytes of EEPROM.
    eeprom_read_block(&header[0], (void *) WRITE_PROTECT_REGISTER_COUNT + 2, 1);
     336:	41 e0       	ldi	r20, 0x01	; 1
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	6a e0       	ldi	r22, 0x0A	; 10
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	ce 01       	movw	r24, r28
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <eeprom_read_block>

    // Load the redirected registers out of the eeprom
    eeprom_read_block(&banks[CONFIG_BANK][CONFIG_SAVE_MIN], 
     346:	4d e2       	ldi	r20, 0x2D	; 45
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	6b e0       	ldi	r22, 0x0B	; 11
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	8c e9       	ldi	r24, 0x9C	; 156
     350:	92 e0       	ldi	r25, 0x02	; 2
     352:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <eeprom_read_block>
                       (void *)(WRITE_PROTECT_REGISTER_COUNT + 3), 
                        CONFIG_SAVE_COUNT);

    // Does the checksum match?
    if (header[0] != eeprom_checksum(&banks[CONFIG_BANK][CONFIG_SAVE_MIN], CONFIG_SAVE_COUNT, EEPROM_VERSION)) return 0;
     356:	99 81       	ldd	r25, Y+1	; 0x01
     358:	84 e0       	ldi	r24, 0x04	; 4
     35a:	ec e9       	ldi	r30, 0x9C	; 156
     35c:	f2 e0       	ldi	r31, 0x02	; 2
{
    // Keep going while bytes in the buffer.
    while (size)
    {
        // Add the buffer to the sum.
        sum += *buffer;
     35e:	21 91       	ld	r18, Z+
     360:	82 0f       	add	r24, r18

static uint8_t eeprom_checksum(const uint8_t *buffer, size_t size, uint8_t sum)
// Adds the buffer to the checksum passed in returning the updated sum.
{
    // Keep going while bytes in the buffer.
    while (size)
     362:	22 e0       	ldi	r18, 0x02	; 2
     364:	e9 3c       	cpi	r30, 0xC9	; 201
     366:	f2 07       	cpc	r31, r18
     368:	d1 f7       	brne	.-12     	; 0x35e <eeprom_restore_registers+0x72>
    eeprom_read_block(&banks[CONFIG_BANK][CONFIG_SAVE_MIN], 
                       (void *)(WRITE_PROTECT_REGISTER_COUNT + 3), 
                        CONFIG_SAVE_COUNT);

    // Does the checksum match?
    if (header[0] != eeprom_checksum(&banks[CONFIG_BANK][CONFIG_SAVE_MIN], CONFIG_SAVE_COUNT, EEPROM_VERSION)) return 0;
     36a:	98 13       	cpse	r25, r24
     36c:	1c c0       	rjmp	.+56     	; 0x3a6 <eeprom_restore_registers+0xba>

    // Read redirect page 2
    // Read EEPROM header
    eeprom_read_block(&header[0], (void *) CONFIG_SAVE_COUNT + WRITE_PROTECT_REGISTER_COUNT + 4, 1);
     36e:	41 e0       	ldi	r20, 0x01	; 1
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	69 e3       	ldi	r22, 0x39	; 57
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	ce 01       	movw	r24, r28
     378:	01 96       	adiw	r24, 0x01	; 1
     37a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <eeprom_read_block>

    // Load the configuration bank
    eeprom_read_block(&banks[REDIRECTED_BANK][MIN_REDIRECT_REGISTER], 
     37e:	40 e1       	ldi	r20, 0x10	; 16
     380:	50 e0       	ldi	r21, 0x00	; 0
     382:	6a e3       	ldi	r22, 0x3A	; 58
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	8c ed       	ldi	r24, 0xDC	; 220
     388:	92 e0       	ldi	r25, 0x02	; 2
     38a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <eeprom_read_block>
                       (void *)(WRITE_PROTECT_REGISTER_COUNT + CONFIG_SAVE_COUNT + 5), 
                        REDIRECT_REGISTER_COUNT);

    // Does the checksum match?
    if (header[0] != eeprom_checksum(&banks[REDIRECTED_BANK][MIN_REDIRECT_REGISTER], REDIRECT_REGISTER_COUNT, EEPROM_VERSION)) return 0;
     38e:	29 81       	ldd	r18, Y+1	; 0x01
     390:	94 e0       	ldi	r25, 0x04	; 4
     392:	ec ed       	ldi	r30, 0xDC	; 220
     394:	f2 e0       	ldi	r31, 0x02	; 2
{
    // Keep going while bytes in the buffer.
    while (size)
    {
        // Add the buffer to the sum.
        sum += *buffer;
     396:	81 91       	ld	r24, Z+
     398:	98 0f       	add	r25, r24

static uint8_t eeprom_checksum(const uint8_t *buffer, size_t size, uint8_t sum)
// Adds the buffer to the checksum passed in returning the updated sum.
{
    // Keep going while bytes in the buffer.
    while (size)
     39a:	82 e0       	ldi	r24, 0x02	; 2
     39c:	ec 3e       	cpi	r30, 0xEC	; 236
     39e:	f8 07       	cpc	r31, r24
     3a0:	d1 f7       	brne	.-12     	; 0x396 <eeprom_restore_registers+0xaa>
    eeprom_read_block(&banks[REDIRECTED_BANK][MIN_REDIRECT_REGISTER], 
                       (void *)(WRITE_PROTECT_REGISTER_COUNT + CONFIG_SAVE_COUNT + 5), 
                        REDIRECT_REGISTER_COUNT);

    // Does the checksum match?
    if (header[0] != eeprom_checksum(&banks[REDIRECTED_BANK][MIN_REDIRECT_REGISTER], REDIRECT_REGISTER_COUNT, EEPROM_VERSION)) return 0;
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	29 13       	cpse	r18, r25
     3a6:	80 e0       	ldi	r24, 0x00	; 0

    // XXX Restore PWM to servo motor.

    // Return success.
    return 1;
}
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <eeprom_save_registers>:


uint8_t eeprom_save_registers(void)
// Save registers to EEPROM.
{
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <eeprom_save_registers+0x6>
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
    uint8_t header[2];

    // XXX Disable PWM to servo motor while reading registers.

    // Fill in the EEPROM header.
    header[0] = EEPROM_VERSION;
     3bc:	84 e0       	ldi	r24, 0x04	; 4
     3be:	89 83       	std	Y+1, r24	; 0x01
     3c0:	e4 e3       	ldi	r30, 0x34	; 52
     3c2:	f2 e0       	ldi	r31, 0x02	; 2
{
    // Keep going while bytes in the buffer.
    while (size)
    {
        // Add the buffer to the sum.
        sum += *buffer;
     3c4:	91 91       	ld	r25, Z+
     3c6:	89 0f       	add	r24, r25

static uint8_t eeprom_checksum(const uint8_t *buffer, size_t size, uint8_t sum)
// Adds the buffer to the checksum passed in returning the updated sum.
{
    // Keep going while bytes in the buffer.
    while (size)
     3c8:	92 e0       	ldi	r25, 0x02	; 2
     3ca:	ec 33       	cpi	r30, 0x3C	; 60
     3cc:	f9 07       	cpc	r31, r25
     3ce:	d1 f7       	brne	.-12     	; 0x3c4 <eeprom_save_registers+0x12>

    // XXX Disable PWM to servo motor while reading registers.

    // Fill in the EEPROM header.
    header[0] = EEPROM_VERSION;
    header[1] = eeprom_checksum(&registers[MIN_WRITE_PROTECT_REGISTER], WRITE_PROTECT_REGISTER_COUNT, EEPROM_VERSION);
     3d0:	8a 83       	std	Y+2, r24	; 0x02

    // Write the EEPROM header which is the first two bytes of EEPROM.
    eeprom_write_block(&header[0], (void *) 0, 2);
     3d2:	42 e0       	ldi	r20, 0x02	; 2
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	ce 01       	movw	r24, r28
     3dc:	01 96       	adiw	r24, 0x01	; 1
     3de:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <eeprom_write_block>

    // Write the write protected and redirect registers from EEPROM.
    eeprom_write_block(&registers[MIN_WRITE_PROTECT_REGISTER], (void *) 2, WRITE_PROTECT_REGISTER_COUNT);
     3e2:	48 e0       	ldi	r20, 0x08	; 8
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	62 e0       	ldi	r22, 0x02	; 2
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	84 e3       	ldi	r24, 0x34	; 52
     3ec:	92 e0       	ldi	r25, 0x02	; 2
     3ee:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <eeprom_write_block>
     3f2:	84 e0       	ldi	r24, 0x04	; 4
     3f4:	ec e9       	ldi	r30, 0x9C	; 156
     3f6:	f2 e0       	ldi	r31, 0x02	; 2
{
    // Keep going while bytes in the buffer.
    while (size)
    {
        // Add the buffer to the sum.
        sum += *buffer;
     3f8:	91 91       	ld	r25, Z+
     3fa:	89 0f       	add	r24, r25

static uint8_t eeprom_checksum(const uint8_t *buffer, size_t size, uint8_t sum)
// Adds the buffer to the checksum passed in returning the updated sum.
{
    // Keep going while bytes in the buffer.
    while (size)
     3fc:	92 e0       	ldi	r25, 0x02	; 2
     3fe:	e9 3c       	cpi	r30, 0xC9	; 201
     400:	f9 07       	cpc	r31, r25
     402:	d1 f7       	brne	.-12     	; 0x3f8 <eeprom_save_registers+0x46>

    // Save any registers defined in banks.
    
    // Save the config bank (1)
    // Calculate a new checksum for bank 1
    header[0] = eeprom_checksum(&banks[CONFIG_BANK][CONFIG_SAVE_MIN], CONFIG_SAVE_COUNT, EEPROM_VERSION);
     404:	89 83       	std	Y+1, r24	; 0x01

    // Write the EEPROM header which is 1 byte long
    eeprom_write_block(&header[0], (void *) WRITE_PROTECT_REGISTER_COUNT + 2, 1);
     406:	41 e0       	ldi	r20, 0x01	; 1
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	6a e0       	ldi	r22, 0x0A	; 10
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <eeprom_write_block>

    // Save the redirected registers at REGISTERS_COUNT + 3
    eeprom_write_block(&banks[CONFIG_BANK][CONFIG_SAVE_MIN], 
     416:	4d e2       	ldi	r20, 0x2D	; 45
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	6b e0       	ldi	r22, 0x0B	; 11
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	8c e9       	ldi	r24, 0x9C	; 156
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <eeprom_write_block>
     426:	84 e0       	ldi	r24, 0x04	; 4
     428:	ec ed       	ldi	r30, 0xDC	; 220
     42a:	f2 e0       	ldi	r31, 0x02	; 2
{
    // Keep going while bytes in the buffer.
    while (size)
    {
        // Add the buffer to the sum.
        sum += *buffer;
     42c:	91 91       	ld	r25, Z+
     42e:	89 0f       	add	r24, r25

static uint8_t eeprom_checksum(const uint8_t *buffer, size_t size, uint8_t sum)
// Adds the buffer to the checksum passed in returning the updated sum.
{
    // Keep going while bytes in the buffer.
    while (size)
     430:	92 e0       	ldi	r25, 0x02	; 2
     432:	ec 3e       	cpi	r30, 0xEC	; 236
     434:	f9 07       	cpc	r31, r25
     436:	d1 f7       	brne	.-12     	; 0x42c <eeprom_save_registers+0x7a>
    eeprom_write_block(&banks[CONFIG_BANK][CONFIG_SAVE_MIN], 
                        (void *)(WRITE_PROTECT_REGISTER_COUNT + 3),
                         CONFIG_SAVE_COUNT);

    // Calculate the checksum for bank 2 redirects
    header[0] = eeprom_checksum(&banks[REDIRECTED_BANK][MIN_REDIRECT_REGISTER], REDIRECT_REGISTER_COUNT, EEPROM_VERSION);
     438:	89 83       	std	Y+1, r24	; 0x01

    // Write the EEPROM header which is 1 byte long, after bank 0
    eeprom_write_block(&header[0], (void *) CONFIG_SAVE_COUNT + WRITE_PROTECT_REGISTER_COUNT + 4, 1);
     43a:	41 e0       	ldi	r20, 0x01	; 1
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	69 e3       	ldi	r22, 0x39	; 57
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	ce 01       	movw	r24, r28
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <eeprom_write_block>

    // Save the alert registers
    eeprom_write_block(&banks[REDIRECTED_BANK][MIN_REDIRECT_REGISTER], 
     44a:	40 e1       	ldi	r20, 0x10	; 16
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	6a e3       	ldi	r22, 0x3A	; 58
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	8c ed       	ldi	r24, 0xDC	; 220
     454:	92 e0       	ldi	r25, 0x02	; 2
     456:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <eeprom_write_block>

    // XXX Restore PWM to servo motor.

    // Return success.
    return 1;
}
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <watchdog_init>:
#include "step.h"

void watchdog_init(void)
// Initialize the watchdog module.
{
    cli();
     466:	f8 94       	cli

    // Clear WDRF in MCUSR.
    MCUSR &= ~(1<<WDRF);
     468:	84 b7       	in	r24, 0x34	; 52
     46a:	87 7f       	andi	r24, 0xF7	; 247
     46c:	84 bf       	out	0x34, r24	; 52

    // Write logical one to WDCE and WDE.
    WDTCSR |= (1<<WDCE) | (1<<WDE);
     46e:	e0 e6       	ldi	r30, 0x60	; 96
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	80 81       	ld	r24, Z
     474:	88 61       	ori	r24, 0x18	; 24
     476:	80 83       	st	Z, r24

    // Turn off WDT.
    WDTCSR = 0x00;
     478:	10 82       	st	Z, r1
    
    sei();
     47a:	78 94       	sei
     47c:	08 95       	ret

0000047e <watchdog_hard_reset>:
    pwm_disable();
#endif
#if STEP_ENABLED
    step_disable();
#endif
    cli();
     47e:	f8 94       	cli
    // Enable the watchdog.
    WDTCSR = (1<<WDIF) |                                     // Reset any interrupt.
     480:	88 e8       	ldi	r24, 0x88	; 136
     482:	80 93 60 00 	sts	0x0060, r24
             (0<<WDIE) |                                     // Disable interrupt.
             (1<<WDE) |                                      // Watchdog enable.
             (0<<WDP3) | (0<<WDP2) | (0<<WDP1) | (0<<WDP0);  // Minimum prescaling - 16mS.

    sei();
     486:	78 94       	sei
    // Wait for reset to occur.
    for (;;);
     488:	ff cf       	rjmp	.-2      	; 0x488 <watchdog_hard_reset+0xa>

0000048a <motion_buffer_left>:
// returns how many keypoints remain free in the buffer for use.
{
    uint8_t space_left;

    // Determine the points left to store curve data.
    if (motion_head < motion_tail)
     48a:	90 91 45 02 	lds	r25, 0x0245
     48e:	80 91 3c 02 	lds	r24, 0x023C
     492:	98 17       	cp	r25, r24
     494:	10 f4       	brcc	.+4      	; 0x49a <motion_buffer_left+0x10>
     496:	81 50       	subi	r24, 0x01	; 1
     498:	01 c0       	rjmp	.+2      	; 0x49c <motion_buffer_left+0x12>
     49a:	89 5f       	subi	r24, 0xF9	; 249
    {
        space_left = (MOTION_BUFFER_SIZE - 1) - (MOTION_BUFFER_SIZE + motion_head - motion_tail);
    }
    else
    {
        space_left = (MOTION_BUFFER_SIZE - 1) - (motion_head - motion_tail);
     49c:	89 1b       	sub	r24, r25
    }

    return space_left;
}
     49e:	08 95       	ret

000004a0 <motion_registers_reset>:
}


void motion_registers_reset(void)
// Reset the motion registers to zero values.
{
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
    // Set the default position, velocity and delta data.
    registers_write_word(REG_CURVE_POSITION_HI, REG_CURVE_POSITION_LO, 0);
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	67 e2       	ldi	r22, 0x27	; 39
     4aa:	86 e2       	ldi	r24, 0x26	; 38
     4ac:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>
    registers_write_word(REG_CURVE_IN_VELOCITY_HI, REG_CURVE_IN_VELOCITY_LO, 0);
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	69 e2       	ldi	r22, 0x29	; 41
     4b6:	88 e2       	ldi	r24, 0x28	; 40
     4b8:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>
    registers_write_word(REG_CURVE_OUT_VELOCITY_HI, REG_CURVE_OUT_VELOCITY_LO, 0);
     4bc:	40 e0       	ldi	r20, 0x00	; 0
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	6b e2       	ldi	r22, 0x2B	; 43
     4c2:	8a e2       	ldi	r24, 0x2A	; 42
     4c4:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>
    registers_write_word(REG_CURVE_DELTA_HI, REG_CURVE_DELTA_LO, 0);
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	65 e2       	ldi	r22, 0x25	; 37
     4ce:	84 e2       	ldi	r24, 0x24	; 36
     4d0:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>
     4d4:	cc ef       	ldi	r28, 0xFC	; 252
     4d6:	d1 e0       	ldi	r29, 0x01	; 1
     4d8:	1c a6       	std	Y+44, r1	; 0x2c

    // Update the buffer status.
    registers_write_byte(REG_CURVE_RESERVED, 0);
    registers_write_byte(REG_CURVE_BUFFER, motion_buffer_left());
     4da:	0e 94 45 02 	call	0x48a	; 0x48a <motion_buffer_left>
     4de:	8a 8b       	std	Y+18, r24	; 0x12
}
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <motion_init>:
#endif


void motion_init(void)
// Initialize the curve buffer.
{
     4e6:	af 92       	push	r10
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
    // Initialize the counter.
    motion_counter = 0;
     4f6:	10 92 3d 02 	sts	0x023D, r1
     4fa:	10 92 3e 02 	sts	0x023E, r1
     4fe:	10 92 3f 02 	sts	0x023F, r1
     502:	10 92 40 02 	sts	0x0240, r1

    // Initialize the duration.
    motion_duration = 0;
     506:	10 92 41 02 	sts	0x0241, r1
     50a:	10 92 42 02 	sts	0x0242, r1
     50e:	10 92 43 02 	sts	0x0243, r1
     512:	10 92 44 02 	sts	0x0244, r1

    // Initialize the queue.
    motion_head = 0;
     516:	10 92 45 02 	sts	0x0245, r1
    motion_tail = 0;
     51a:	10 92 3c 02 	sts	0x023C, r1

    // Initialize the keypoint.
    keys[0].delta = 0;
     51e:	e1 e1       	ldi	r30, 0x11	; 17
     520:	f1 e0       	ldi	r31, 0x01	; 1
     522:	11 82       	std	Z+1, r1	; 0x01
     524:	10 82       	st	Z, r1
    keys[0].position = 512.0;
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	a0 e0       	ldi	r26, 0x00	; 0
     52c:	b4 e4       	ldi	r27, 0x44	; 68
     52e:	82 83       	std	Z+2, r24	; 0x02
     530:	93 83       	std	Z+3, r25	; 0x03
     532:	a4 83       	std	Z+4, r26	; 0x04
     534:	b5 83       	std	Z+5, r27	; 0x05
    keys[0].in_velocity = 0.0;
     536:	16 82       	std	Z+6, r1	; 0x06
     538:	17 82       	std	Z+7, r1	; 0x07
     53a:	10 86       	std	Z+8, r1	; 0x08
     53c:	11 86       	std	Z+9, r1	; 0x09
    keys[0].out_velocity = 0.0;
     53e:	12 86       	std	Z+10, r1	; 0x0a
     540:	13 86       	std	Z+11, r1	; 0x0b
     542:	14 86       	std	Z+12, r1	; 0x0c
     544:	15 86       	std	Z+13, r1	; 0x0d

    // Initialize an empty hermite curve at the center servo position.
    curve_init(0, 0, 512.0, 512.0, 0.0, 0.0);
     546:	1f 92       	push	r1
     548:	1f 92       	push	r1
     54a:	1f 92       	push	r1
     54c:	1f 92       	push	r1
     54e:	a1 2c       	mov	r10, r1
     550:	b1 2c       	mov	r11, r1
     552:	65 01       	movw	r12, r10
     554:	7c 01       	movw	r14, r24
     556:	8d 01       	movw	r16, r26
     558:	9c 01       	movw	r18, r24
     55a:	ad 01       	movw	r20, r26
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <curve_init>

    // Reset the registers.
    motion_registers_reset();
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
}
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	ff 90       	pop	r15
     576:	ef 90       	pop	r14
     578:	df 90       	pop	r13
     57a:	cf 90       	pop	r12
     57c:	bf 90       	pop	r11
     57e:	af 90       	pop	r10

    // Initialize an empty hermite curve at the center servo position.
    curve_init(0, 0, 512.0, 512.0, 0.0, 0.0);

    // Reset the registers.
    motion_registers_reset();
     580:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <motion_registers_reset>

00000584 <motion_reset>:
}


void motion_reset(int16_t position)
// Reset the motion buffer to the specified position.  The enabled state is preserved.
{
     584:	af 92       	push	r10
     586:	bf 92       	push	r11
     588:	cf 92       	push	r12
     58a:	df 92       	push	r13
     58c:	ef 92       	push	r14
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
    // Reset the counter.
    motion_counter = 0;
     598:	10 92 3d 02 	sts	0x023D, r1
     59c:	10 92 3e 02 	sts	0x023E, r1
     5a0:	10 92 3f 02 	sts	0x023F, r1
     5a4:	10 92 40 02 	sts	0x0240, r1

    // Reset the duration.
    motion_duration = 0;
     5a8:	10 92 41 02 	sts	0x0241, r1
     5ac:	10 92 42 02 	sts	0x0242, r1
     5b0:	10 92 43 02 	sts	0x0243, r1
     5b4:	10 92 44 02 	sts	0x0244, r1

    // Reset the queue.
    motion_head = 0;
     5b8:	10 92 45 02 	sts	0x0245, r1
    motion_tail = 0;
     5bc:	10 92 3c 02 	sts	0x023C, r1

    // Reset the keypoint.
    keys[0].delta = 0;
     5c0:	c1 e1       	ldi	r28, 0x11	; 17
     5c2:	d1 e0       	ldi	r29, 0x01	; 1
     5c4:	19 82       	std	Y+1, r1	; 0x01
     5c6:	18 82       	st	Y, r1
static motion_key keys[MOTION_BUFFER_SIZE];

static float int_to_float(int16_t a)
// 16bit unsigned integer to float.
{
    return (float) a;
     5c8:	bc 01       	movw	r22, r24
     5ca:	99 0f       	add	r25, r25
     5cc:	88 0b       	sbc	r24, r24
     5ce:	99 0b       	sbc	r25, r25
     5d0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__floatsisf>
     5d4:	9b 01       	movw	r18, r22
     5d6:	ac 01       	movw	r20, r24
    motion_head = 0;
    motion_tail = 0;

    // Reset the keypoint.
    keys[0].delta = 0;
    keys[0].position = int_to_float(position);
     5d8:	6a 83       	std	Y+2, r22	; 0x02
     5da:	7b 83       	std	Y+3, r23	; 0x03
     5dc:	8c 83       	std	Y+4, r24	; 0x04
     5de:	9d 83       	std	Y+5, r25	; 0x05
    keys[0].in_velocity = 0.0;
     5e0:	1e 82       	std	Y+6, r1	; 0x06
     5e2:	1f 82       	std	Y+7, r1	; 0x07
     5e4:	18 86       	std	Y+8, r1	; 0x08
     5e6:	19 86       	std	Y+9, r1	; 0x09
    keys[0].out_velocity = 0.0;
     5e8:	1a 86       	std	Y+10, r1	; 0x0a
     5ea:	1b 86       	std	Y+11, r1	; 0x0b
     5ec:	1c 86       	std	Y+12, r1	; 0x0c
     5ee:	1d 86       	std	Y+13, r1	; 0x0d

    // Initialize an empty hermite curve.  This is a degenerate case for the hermite
    // curve that will always return the position of the curve without velocity.
    curve_init(0, 0, keys[0].position, keys[0].position, 0.0, 0.0);
     5f0:	1f 92       	push	r1
     5f2:	1f 92       	push	r1
     5f4:	1f 92       	push	r1
     5f6:	1f 92       	push	r1
     5f8:	a1 2c       	mov	r10, r1
     5fa:	b1 2c       	mov	r11, r1
     5fc:	65 01       	movw	r12, r10
     5fe:	7b 01       	movw	r14, r22
     600:	8c 01       	movw	r16, r24
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <curve_init>

    // Reset the registers.
    motion_registers_reset();
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
}
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	ff 90       	pop	r15
     620:	ef 90       	pop	r14
     622:	df 90       	pop	r13
     624:	cf 90       	pop	r12
     626:	bf 90       	pop	r11
     628:	af 90       	pop	r10
    // Initialize an empty hermite curve.  This is a degenerate case for the hermite
    // curve that will always return the position of the curve without velocity.
    curve_init(0, 0, keys[0].position, keys[0].position, 0.0, 0.0);

    // Reset the registers.
    motion_registers_reset();
     62a:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <motion_registers_reset>

0000062e <motion_append>:
uint8_t motion_append(void)
// Append a new curve keypoint from data stored in the curve registers.  The keypoint
// is offset from the previous curve by the specified delta.  An error is returned if
// there is no more room to store the new keypoint in the buffer or if the delta is
// less than one (a zero delta is not allowed).
{
     62e:	3f 92       	push	r3
     630:	4f 92       	push	r4
     632:	5f 92       	push	r5
     634:	6f 92       	push	r6
     636:	7f 92       	push	r7
     638:	8f 92       	push	r8
     63a:	9f 92       	push	r9
     63c:	af 92       	push	r10
     63e:	bf 92       	push	r11
     640:	cf 92       	push	r12
     642:	df 92       	push	r13
     644:	ef 92       	push	r14
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
    int16_t out_velocity;
    uint8_t next;
    uint16_t delta;

    // Get the next index in the buffer.
    next = (motion_head + 1) & MOTION_BUFFER_MASK;
     650:	30 90 45 02 	lds	r3, 0x0245
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	83 0d       	add	r24, r3
     658:	87 70       	andi	r24, 0x07	; 7
     65a:	38 2e       	mov	r3, r24

    // Return error if we have looped the head to the tail and the buffer is filled.
    if (next == motion_tail) return 0;
     65c:	80 91 3c 02 	lds	r24, 0x023C
     660:	38 12       	cpse	r3, r24
     662:	02 c0       	rjmp	.+4      	; 0x668 <motion_append+0x3a>
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	83 c0       	rjmp	.+262    	; 0x76e <motion_append+0x140>

    // Get the position, velocity and time delta values from the registers.
    position = (int16_t) registers_read_word(REG_CURVE_POSITION_HI, REG_CURVE_POSITION_LO);
     668:	67 e2       	ldi	r22, 0x27	; 39
     66a:	86 e2       	ldi	r24, 0x26	; 38
     66c:	0e 94 16 01 	call	0x22c	; 0x22c <registers_read_word>
     670:	3c 01       	movw	r6, r24
    in_velocity = (int16_t) registers_read_word(REG_CURVE_IN_VELOCITY_HI, REG_CURVE_IN_VELOCITY_LO);
     672:	69 e2       	ldi	r22, 0x29	; 41
     674:	88 e2       	ldi	r24, 0x28	; 40
     676:	0e 94 16 01 	call	0x22c	; 0x22c <registers_read_word>
     67a:	8c 01       	movw	r16, r24
    out_velocity = (int16_t) registers_read_word(REG_CURVE_OUT_VELOCITY_HI, REG_CURVE_OUT_VELOCITY_LO);
     67c:	6b e2       	ldi	r22, 0x2B	; 43
     67e:	8a e2       	ldi	r24, 0x2A	; 42
     680:	0e 94 16 01 	call	0x22c	; 0x22c <registers_read_word>
     684:	7c 01       	movw	r14, r24
    delta = (uint16_t) registers_read_word(REG_CURVE_DELTA_HI, REG_CURVE_DELTA_LO);
     686:	65 e2       	ldi	r22, 0x25	; 37
     688:	84 e2       	ldi	r24, 0x24	; 36
     68a:	0e 94 16 01 	call	0x22c	; 0x22c <registers_read_word>
     68e:	4c 01       	movw	r8, r24

    // Keypoint delta must be greater than zero.
    if (delta < 1) return 0;
     690:	89 2b       	or	r24, r25
     692:	41 f3       	breq	.-48     	; 0x664 <motion_append+0x36>

    // Fill in the next keypoint.
    keys[next].delta = delta;
     694:	8e e0       	ldi	r24, 0x0E	; 14
     696:	38 9e       	mul	r3, r24
     698:	e0 01       	movw	r28, r0
     69a:	11 24       	eor	r1, r1
     69c:	cf 5e       	subi	r28, 0xEF	; 239
     69e:	de 4f       	sbci	r29, 0xFE	; 254
     6a0:	99 82       	std	Y+1, r9	; 0x01
     6a2:	88 82       	st	Y, r8
static motion_key keys[MOTION_BUFFER_SIZE];

static float int_to_float(int16_t a)
// 16bit unsigned integer to float.
{
    return (float) a;
     6a4:	b3 01       	movw	r22, r6
     6a6:	77 0c       	add	r7, r7
     6a8:	88 0b       	sbc	r24, r24
     6aa:	99 0b       	sbc	r25, r25
     6ac:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__floatsisf>
     6b0:	2b 01       	movw	r4, r22
     6b2:	3c 01       	movw	r6, r24
    // Keypoint delta must be greater than zero.
    if (delta < 1) return 0;

    // Fill in the next keypoint.
    keys[next].delta = delta;
    keys[next].position = int_to_float(position);
     6b4:	6a 83       	std	Y+2, r22	; 0x02
     6b6:	7b 83       	std	Y+3, r23	; 0x03
     6b8:	8c 83       	std	Y+4, r24	; 0x04
     6ba:	9d 83       	std	Y+5, r25	; 0x05


static float fixed_to_float(int16_t a)
// 6:10 signed fixed point to float.
{
    return ((float) a) / 1024.0;
     6bc:	b8 01       	movw	r22, r16
     6be:	11 0f       	add	r17, r17
     6c0:	88 0b       	sbc	r24, r24
     6c2:	99 0b       	sbc	r25, r25
     6c4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__floatsisf>
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e8       	ldi	r20, 0x80	; 128
     6ce:	5a e3       	ldi	r21, 0x3A	; 58
     6d0:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>
    if (delta < 1) return 0;

    // Fill in the next keypoint.
    keys[next].delta = delta;
    keys[next].position = int_to_float(position);
    keys[next].in_velocity = fixed_to_float(in_velocity);
     6d4:	6e 83       	std	Y+6, r22	; 0x06
     6d6:	7f 83       	std	Y+7, r23	; 0x07
     6d8:	88 87       	std	Y+8, r24	; 0x08
     6da:	99 87       	std	Y+9, r25	; 0x09


static float fixed_to_float(int16_t a)
// 6:10 signed fixed point to float.
{
    return ((float) a) / 1024.0;
     6dc:	b7 01       	movw	r22, r14
     6de:	ff 0c       	add	r15, r15
     6e0:	88 0b       	sbc	r24, r24
     6e2:	99 0b       	sbc	r25, r25
     6e4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__floatsisf>
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e8       	ldi	r20, 0x80	; 128
     6ee:	5a e3       	ldi	r21, 0x3A	; 58
     6f0:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>

    // Fill in the next keypoint.
    keys[next].delta = delta;
    keys[next].position = int_to_float(position);
    keys[next].in_velocity = fixed_to_float(in_velocity);
    keys[next].out_velocity = fixed_to_float(out_velocity);
     6f4:	6a 87       	std	Y+10, r22	; 0x0a
     6f6:	7b 87       	std	Y+11, r23	; 0x0b
     6f8:	8c 87       	std	Y+12, r24	; 0x0c
     6fa:	9d 87       	std	Y+13, r25	; 0x0d

    // Is this keypoint being added to an empty buffer?
    if (motion_tail == motion_head)
     6fc:	90 91 3c 02 	lds	r25, 0x023C
     700:	80 91 45 02 	lds	r24, 0x0245
     704:	98 13       	cpse	r25, r24
     706:	1a c0       	rjmp	.+52     	; 0x73c <motion_append+0x10e>
    {
        // Initialize a new hermite curve that gets us from the current position to the new position.
        // We use a velocity of zero at each end to smoothly transition from one to the other.
        curve_init(0, delta, curve_get_p1(), keys[next].position, 0.0, 0.0);
     708:	20 91 50 02 	lds	r18, 0x0250
     70c:	30 91 51 02 	lds	r19, 0x0251
     710:	40 91 52 02 	lds	r20, 0x0252
     714:	50 91 53 02 	lds	r21, 0x0253
     718:	1f 92       	push	r1
     71a:	1f 92       	push	r1
     71c:	1f 92       	push	r1
     71e:	1f 92       	push	r1
     720:	a1 2c       	mov	r10, r1
     722:	b1 2c       	mov	r11, r1
     724:	65 01       	movw	r12, r10
     726:	83 01       	movw	r16, r6
     728:	72 01       	movw	r14, r4
     72a:	b4 01       	movw	r22, r8
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <curve_init>
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
    }

    // Increase the duration of the buffer.
    motion_duration += delta;
     73c:	80 91 41 02 	lds	r24, 0x0241
     740:	90 91 42 02 	lds	r25, 0x0242
     744:	a0 91 43 02 	lds	r26, 0x0243
     748:	b0 91 44 02 	lds	r27, 0x0244
     74c:	88 0d       	add	r24, r8
     74e:	99 1d       	adc	r25, r9
     750:	a1 1d       	adc	r26, r1
     752:	b1 1d       	adc	r27, r1
     754:	80 93 41 02 	sts	0x0241, r24
     758:	90 93 42 02 	sts	0x0242, r25
     75c:	a0 93 43 02 	sts	0x0243, r26
     760:	b0 93 44 02 	sts	0x0244, r27

    // Set the new head index.
    motion_head = next;
     764:	30 92 45 02 	sts	0x0245, r3

    // Reset the motion registers and update the buffer status.
    motion_registers_reset();
     768:	0e 94 50 02 	call	0x4a0	; 0x4a0 <motion_registers_reset>

    return 1;
     76c:	81 e0       	ldi	r24, 0x01	; 1
}
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	bf 90       	pop	r11
     780:	af 90       	pop	r10
     782:	9f 90       	pop	r9
     784:	8f 90       	pop	r8
     786:	7f 90       	pop	r7
     788:	6f 90       	pop	r6
     78a:	5f 90       	pop	r5
     78c:	4f 90       	pop	r4
     78e:	3f 90       	pop	r3
     790:	08 95       	ret

00000792 <motion_next>:

void motion_next(uint16_t delta)
// Increment the buffer counter by the indicated delta and return the position
// and velocity from the buffered curves.  If the delta is zero the current
// position and velocity is returned.
{
     792:	9f 92       	push	r9
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	28 97       	sbiw	r28, 0x08	; 8
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
    float fposition;
    float fvelocity;

    // Determine if curve motion is disabled in the registers.
    if (!(registers_read_byte(REG_FLAGS_LO) & (1<<FLAGS_LO_MOTION_ENABLED))) return;
     7b8:	20 91 01 02 	lds	r18, 0x0201
     7bc:	22 ff       	sbrs	r18, 2
     7be:	13 c1       	rjmp	.+550    	; 0x9e6 <__stack+0xe7>
     7c0:	9c 01       	movw	r18, r24

    // Are we processing an empty curve?
    if (motion_tail == motion_head)
     7c2:	90 91 3c 02 	lds	r25, 0x023C
     7c6:	80 91 45 02 	lds	r24, 0x0245
     7ca:	98 13       	cpse	r25, r24
     7cc:	11 c0       	rjmp	.+34     	; 0x7f0 <motion_next+0x5e>
    {
        // Yes. Keep the counter and duration at zero.
        motion_counter = 0;
     7ce:	10 92 3d 02 	sts	0x023D, r1
     7d2:	10 92 3e 02 	sts	0x023E, r1
     7d6:	10 92 3f 02 	sts	0x023F, r1
     7da:	10 92 40 02 	sts	0x0240, r1
        motion_duration = 0;
     7de:	10 92 41 02 	sts	0x0241, r1
     7e2:	10 92 42 02 	sts	0x0242, r1
     7e6:	10 92 43 02 	sts	0x0243, r1
     7ea:	10 92 44 02 	sts	0x0244, r1
     7ee:	bf c0       	rjmp	.+382    	; 0x96e <__stack+0x6f>
    }
    else
    {
        // Increment the counter.
        motion_counter += delta;
     7f0:	80 91 3d 02 	lds	r24, 0x023D
     7f4:	90 91 3e 02 	lds	r25, 0x023E
     7f8:	a0 91 3f 02 	lds	r26, 0x023F
     7fc:	b0 91 40 02 	lds	r27, 0x0240
     800:	82 0f       	add	r24, r18
     802:	93 1f       	adc	r25, r19
     804:	a1 1d       	adc	r26, r1
     806:	b1 1d       	adc	r27, r1
     808:	80 93 3d 02 	sts	0x023D, r24
     80c:	90 93 3e 02 	sts	0x023E, r25
     810:	a0 93 3f 02 	sts	0x023F, r26
     814:	b0 93 40 02 	sts	0x0240, r27
                // Get the current point and next point for the curve.
                curr_point = motion_tail;
                next_point = (curr_point + 1) & MOTION_BUFFER_MASK;

                // Initialize the hermite curve from the current and next point.
                curve_init(0, keys[next_point].delta,
     818:	8e e0       	ldi	r24, 0x0E	; 14
     81a:	98 2e       	mov	r9, r24
    {
        // Increment the counter.
        motion_counter += delta;

        // Have we exceeded the duration of the currently buffered curve?
        while (motion_counter > curve_get_duration())
     81c:	40 91 3d 02 	lds	r20, 0x023D
     820:	50 91 3e 02 	lds	r21, 0x023E
     824:	60 91 3f 02 	lds	r22, 0x023F
     828:	70 91 40 02 	lds	r23, 0x0240
     82c:	80 91 5a 02 	lds	r24, 0x025A
     830:	90 91 5b 02 	lds	r25, 0x025B
     834:	a0 e0       	ldi	r26, 0x00	; 0
     836:	b0 e0       	ldi	r27, 0x00	; 0
     838:	84 17       	cp	r24, r20
     83a:	95 07       	cpc	r25, r21
     83c:	a6 07       	cpc	r26, r22
     83e:	b7 07       	cpc	r27, r23
     840:	08 f0       	brcs	.+2      	; 0x844 <motion_next+0xb2>
     842:	95 c0       	rjmp	.+298    	; 0x96e <__stack+0x6f>
        {
            // Reduce the buffer counter by the currently buffered curve duration.
            motion_counter -= curve_get_duration();
     844:	48 1b       	sub	r20, r24
     846:	59 0b       	sbc	r21, r25
     848:	6a 0b       	sbc	r22, r26
     84a:	7b 0b       	sbc	r23, r27
     84c:	40 93 3d 02 	sts	0x023D, r20
     850:	50 93 3e 02 	sts	0x023E, r21
     854:	60 93 3f 02 	sts	0x023F, r22
     858:	70 93 40 02 	sts	0x0240, r23

            // Reduce the buffer duration by the currently buffered curve duration.
            motion_duration -= curve_get_duration();
     85c:	40 91 41 02 	lds	r20, 0x0241
     860:	50 91 42 02 	lds	r21, 0x0242
     864:	60 91 43 02 	lds	r22, 0x0243
     868:	70 91 44 02 	lds	r23, 0x0244
     86c:	8a 01       	movw	r16, r20
     86e:	9b 01       	movw	r18, r22
     870:	08 1b       	sub	r16, r24
     872:	19 0b       	sbc	r17, r25
     874:	2a 0b       	sbc	r18, r26
     876:	3b 0b       	sbc	r19, r27
     878:	00 93 41 02 	sts	0x0241, r16
     87c:	10 93 42 02 	sts	0x0242, r17
     880:	20 93 43 02 	sts	0x0243, r18
     884:	30 93 44 02 	sts	0x0244, r19

            // Increment the tail to process the next buffered curve.
            motion_tail = (motion_tail + 1) & MOTION_BUFFER_MASK;
     888:	e0 91 3c 02 	lds	r30, 0x023C
     88c:	ef 5f       	subi	r30, 0xFF	; 255
     88e:	e7 70       	andi	r30, 0x07	; 7
     890:	e0 93 3c 02 	sts	0x023C, r30

            // Has the tail caught up with the head?
            if (motion_tail == motion_head)
     894:	20 91 45 02 	lds	r18, 0x0245
     898:	8e 2f       	mov	r24, r30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	e2 13       	cpse	r30, r18
     89e:	2b c0       	rjmp	.+86     	; 0x8f6 <motion_next+0x164>
            {
                // Initialize an empty hermite curve with a zero duration.  This is a degenerate case for
                // the hermite cuve that will always return the position of the curve without velocity.
                curve_init(0, 0, keys[motion_head].position, keys[motion_head].position, 0.0, 0.0);
     8a0:	98 9e       	mul	r9, r24
     8a2:	f0 01       	movw	r30, r0
     8a4:	99 9e       	mul	r9, r25
     8a6:	f0 0d       	add	r31, r0
     8a8:	11 24       	eor	r1, r1
     8aa:	ef 5e       	subi	r30, 0xEF	; 239
     8ac:	fe 4f       	sbci	r31, 0xFE	; 254
     8ae:	22 81       	ldd	r18, Z+2	; 0x02
     8b0:	33 81       	ldd	r19, Z+3	; 0x03
     8b2:	44 81       	ldd	r20, Z+4	; 0x04
     8b4:	55 81       	ldd	r21, Z+5	; 0x05
     8b6:	1f 92       	push	r1
     8b8:	1f 92       	push	r1
     8ba:	1f 92       	push	r1
     8bc:	1f 92       	push	r1
     8be:	a1 2c       	mov	r10, r1
     8c0:	b1 2c       	mov	r11, r1
     8c2:	65 01       	movw	r12, r10
     8c4:	79 01       	movw	r14, r18
     8c6:	8a 01       	movw	r16, r20
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <curve_init>

                // Reset the buffer counter and duration to zero.
                motion_counter = 0;
     8d4:	10 92 3d 02 	sts	0x023D, r1
     8d8:	10 92 3e 02 	sts	0x023E, r1
     8dc:	10 92 3f 02 	sts	0x023F, r1
     8e0:	10 92 40 02 	sts	0x0240, r1
                motion_duration = 0;
     8e4:	10 92 41 02 	sts	0x0241, r1
     8e8:	10 92 42 02 	sts	0x0242, r1
     8ec:	10 92 43 02 	sts	0x0243, r1
     8f0:	10 92 44 02 	sts	0x0244, r1
     8f4:	33 c0       	rjmp	.+102    	; 0x95c <__stack+0x5d>
                uint8_t curr_point;
                uint8_t next_point;

                // Get the current point and next point for the curve.
                curr_point = motion_tail;
                next_point = (curr_point + 1) & MOTION_BUFFER_MASK;
     8f6:	ef 5f       	subi	r30, 0xFF	; 255
     8f8:	e7 70       	andi	r30, 0x07	; 7

                // Initialize the hermite curve from the current and next point.
                curve_init(0, keys[next_point].delta,
     8fa:	98 9e       	mul	r9, r24
     8fc:	d0 01       	movw	r26, r0
     8fe:	99 9e       	mul	r9, r25
     900:	b0 0d       	add	r27, r0
     902:	11 24       	eor	r1, r1
     904:	af 5e       	subi	r26, 0xEF	; 239
     906:	be 4f       	sbci	r27, 0xFE	; 254
     908:	1a 96       	adiw	r26, 0x0a	; 10
     90a:	ad 90       	ld	r10, X+
     90c:	bd 90       	ld	r11, X+
     90e:	cd 90       	ld	r12, X+
     910:	dc 90       	ld	r13, X
     912:	1d 97       	sbiw	r26, 0x0d	; 13
     914:	9e 9e       	mul	r9, r30
     916:	f0 01       	movw	r30, r0
     918:	11 24       	eor	r1, r1
     91a:	ef 5e       	subi	r30, 0xEF	; 239
     91c:	fe 4f       	sbci	r31, 0xFE	; 254
     91e:	e2 80       	ldd	r14, Z+2	; 0x02
     920:	f3 80       	ldd	r15, Z+3	; 0x03
     922:	04 81       	ldd	r16, Z+4	; 0x04
     924:	15 81       	ldd	r17, Z+5	; 0x05
     926:	12 96       	adiw	r26, 0x02	; 2
     928:	2d 91       	ld	r18, X+
     92a:	3d 91       	ld	r19, X+
     92c:	4d 91       	ld	r20, X+
     92e:	5c 91       	ld	r21, X
     930:	15 97       	sbiw	r26, 0x05	; 5
     932:	60 81       	ld	r22, Z
     934:	71 81       	ldd	r23, Z+1	; 0x01
     936:	df 01       	movw	r26, r30
     938:	16 96       	adiw	r26, 0x06	; 6
     93a:	13 96       	adiw	r26, 0x03	; 3
     93c:	8c 91       	ld	r24, X
     93e:	13 97       	sbiw	r26, 0x03	; 3
     940:	8f 93       	push	r24
     942:	12 96       	adiw	r26, 0x02	; 2
     944:	8c 91       	ld	r24, X
     946:	12 97       	sbiw	r26, 0x02	; 2
     948:	8f 93       	push	r24
     94a:	11 96       	adiw	r26, 0x01	; 1
     94c:	8c 91       	ld	r24, X
     94e:	8f 93       	push	r24
     950:	86 81       	ldd	r24, Z+6	; 0x06
     952:	8f 93       	push	r24
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <curve_init>
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
                           keys[curr_point].position, keys[next_point].position,
                           keys[curr_point].out_velocity, keys[next_point].in_velocity);
            }

            // Update the space available in the buffer.
            registers_write_byte(REG_CURVE_BUFFER, motion_buffer_left());
     964:	0e 94 45 02 	call	0x48a	; 0x48a <motion_buffer_left>
     968:	80 93 0e 02 	sts	0x020E, r24
     96c:	57 cf       	rjmp	.-338    	; 0x81c <motion_next+0x8a>
        }
    }

    // Get the position and velocity from the hermite curve.
    curve_solve(motion_counter, &fposition, &fvelocity);
     96e:	ae 01       	movw	r20, r28
     970:	4f 5f       	subi	r20, 0xFF	; 255
     972:	5f 4f       	sbci	r21, 0xFF	; 255
     974:	be 01       	movw	r22, r28
     976:	6b 5f       	subi	r22, 0xFB	; 251
     978:	7f 4f       	sbci	r23, 0xFF	; 255
     97a:	80 91 3d 02 	lds	r24, 0x023D
     97e:	90 91 3e 02 	lds	r25, 0x023E
     982:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <curve_solve>

    // The velocity is in position units a millisecond, but we really need the
    // velocity to be measured in position units every 10 milliseconds to match
    // the sample period of the ADC.
    fvelocity *= (float)HEARTBEAT_INTERVAL_VALUE;
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	40 e2       	ldi	r20, 0x20	; 32
     98c:	51 e4       	ldi	r21, 0x41	; 65
     98e:	69 81       	ldd	r22, Y+1	; 0x01
     990:	7a 81       	ldd	r23, Y+2	; 0x02
     992:	8b 81       	ldd	r24, Y+3	; 0x03
     994:	9c 81       	ldd	r25, Y+4	; 0x04
     996:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>
     99a:	69 83       	std	Y+1, r22	; 0x01
     99c:	7a 83       	std	Y+2, r23	; 0x02
     99e:	8b 83       	std	Y+3, r24	; 0x03
     9a0:	9c 83       	std	Y+4, r25	; 0x04


static int16_t float_to_int(float a)
// Float to 6:10 signed fixed.
{
    return (int16_t) (a + 0.5);
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	5f e3       	ldi	r21, 0x3F	; 63
     9aa:	6d 81       	ldd	r22, Y+5	; 0x05
     9ac:	7e 81       	ldd	r23, Y+6	; 0x06
     9ae:	8f 81       	ldd	r24, Y+7	; 0x07
     9b0:	98 85       	ldd	r25, Y+8	; 0x08
     9b2:	0e 94 c3 10 	call	0x2186	; 0x2186 <__addsf3>
     9b6:	0e 94 a1 11 	call	0x2342	; 0x2342 <__fixsfsi>
    // velocity to be measured in position units every 10 milliseconds to match
    // the sample period of the ADC.
    fvelocity *= (float)HEARTBEAT_INTERVAL_VALUE;

    // Update the seek position register.
    registers_write_word(REG_SEEK_POSITION_HI, REG_SEEK_POSITION_LO, float_to_int(fposition));
     9ba:	ab 01       	movw	r20, r22
     9bc:	61 e2       	ldi	r22, 0x21	; 33
     9be:	80 e2       	ldi	r24, 0x20	; 32
     9c0:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>


static int16_t float_to_int(float a)
// Float to 6:10 signed fixed.
{
    return (int16_t) (a + 0.5);
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	40 e0       	ldi	r20, 0x00	; 0
     9ca:	5f e3       	ldi	r21, 0x3F	; 63
     9cc:	69 81       	ldd	r22, Y+1	; 0x01
     9ce:	7a 81       	ldd	r23, Y+2	; 0x02
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	9c 81       	ldd	r25, Y+4	; 0x04
     9d4:	0e 94 c3 10 	call	0x2186	; 0x2186 <__addsf3>
     9d8:	0e 94 a1 11 	call	0x2342	; 0x2342 <__fixsfsi>

    // Update the seek position register.
    registers_write_word(REG_SEEK_POSITION_HI, REG_SEEK_POSITION_LO, float_to_int(fposition));

    // Update the seek velocity register.
    registers_write_word(REG_SEEK_VELOCITY_HI, REG_SEEK_VELOCITY_LO, float_to_int(fvelocity));
     9dc:	ab 01       	movw	r20, r22
     9de:	63 e2       	ldi	r22, 0x23	; 35
     9e0:	82 e2       	ldi	r24, 0x22	; 34
     9e2:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>
}
     9e6:	28 96       	adiw	r28, 0x08	; 8
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	df 90       	pop	r13
     a00:	cf 90       	pop	r12
     a02:	bf 90       	pop	r11
     a04:	af 90       	pop	r10
     a06:	9f 90       	pop	r9
     a08:	08 95       	ret

00000a0a <pid_init>:

void pid_init(void)
// Initialize the PID algorithm module.
{
    // Initialize preserved values.
    previous_seek = 0;
     a0a:	10 92 a6 01 	sts	0x01A6, r1
     a0e:	10 92 a5 01 	sts	0x01A5, r1
    previous_position = 0;
     a12:	10 92 a4 01 	sts	0x01A4, r1
     a16:	10 92 a3 01 	sts	0x01A3, r1
     a1a:	08 95       	ret

00000a1c <pid_registers_defaults>:
}

// Write a single byte to the banks.
inline static void banks_write_byte(uint8_t bank, uint8_t address, uint8_t value)
{
    banks[bank][address] = value;
     a1c:	84 e0       	ldi	r24, 0x04	; 4
     a1e:	80 93 9d 02 	sts	0x029D, r24
{
    // Default deadband.
    banks_write_byte(POS_PID_BANK, REG_PID_DEADBAND, DEFAULT_PID_DEADBAND);

    // Default gain values.
    banks_write_word(POS_PID_BANK, REG_PID_PGAIN_HI, REG_PID_PGAIN_LO, DEFAULT_PID_PGAIN);
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	36 e0       	ldi	r19, 0x06	; 6
     a26:	43 e0       	ldi	r20, 0x03	; 3
     a28:	62 e0       	ldi	r22, 0x02	; 2
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <banks_write_word>
    banks_write_word(POS_PID_BANK, REG_PID_DGAIN_HI, REG_PID_DGAIN_LO, DEFAULT_PID_DGAIN);
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	31 e0       	ldi	r19, 0x01	; 1
     a34:	45 e0       	ldi	r20, 0x05	; 5
     a36:	64 e0       	ldi	r22, 0x04	; 4
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <banks_write_word>
    banks_write_word(POS_PID_BANK, REG_PID_IGAIN_HI, REG_PID_IGAIN_LO, DEFAULT_PID_IGAIN);
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	47 e0       	ldi	r20, 0x07	; 7
     a44:	66 e0       	ldi	r22, 0x06	; 6
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <banks_write_word>

    // Default position limits.
    banks_write_word(POS_PID_BANK, REG_MIN_SEEK_HI, REG_MIN_SEEK_LO, DEFAULT_MIN_SEEK);
     a4c:	20 e6       	ldi	r18, 0x60	; 96
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	49 e0       	ldi	r20, 0x09	; 9
     a52:	68 e0       	ldi	r22, 0x08	; 8
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <banks_write_word>
    banks_write_word(POS_PID_BANK, REG_MAX_SEEK_HI, REG_MAX_SEEK_LO, DEFAULT_MAX_SEEK);
     a5a:	20 ea       	ldi	r18, 0xA0	; 160
     a5c:	33 e0       	ldi	r19, 0x03	; 3
     a5e:	4b e0       	ldi	r20, 0x0B	; 11
     a60:	6a e0       	ldi	r22, 0x0A	; 10
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <banks_write_word>
     a68:	10 92 a8 02 	sts	0x02A8, r1
     a6c:	08 95       	ret

00000a6e <pid_position_to_pwm>:

int16_t pid_position_to_pwm(int16_t current_position)
// This is a modified pid algorithm by which the seek position and seek
// velocity are assumed to be a moving target.  The algorithm attempts to
// output a pwm value that will achieve a predicted position and velocity.
{
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	8c 01       	movw	r16, r24
    static int32_t pwm_output;
    static uint16_t d_gain;
    static uint16_t p_gain;

    // Filter the current position thru a digital low-pass filter.
    filtered_position = filter_update(current_position, &filter_reg_pos);
     a78:	6f e9       	ldi	r22, 0x9F	; 159
     a7a:	71 e0       	ldi	r23, 0x01	; 1
     a7c:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <filter_update>
     a80:	90 93 9a 01 	sts	0x019A, r25
     a84:	80 93 99 01 	sts	0x0199, r24

#if BACKEMF_ENABLED
    int16_t sign;
    // Use the filtered position to determine velocity.
    sign = filtered_position - previous_position;
     a88:	20 91 a3 01 	lds	r18, 0x01A3
     a8c:	30 91 a4 01 	lds	r19, 0x01A4
     a90:	82 1b       	sub	r24, r18
     a92:	93 0b       	sbc	r25, r19
    if (sign < 0)
     a94:	97 fd       	sbrc	r25, 7
     a96:	03 c0       	rjmp	.+6      	; 0xa9e <pid_position_to_pwm+0x30>
        sign = -1;
    else
        sign = 1;
     a98:	c1 e0       	ldi	r28, 0x01	; 1
     a9a:	d0 e0       	ldi	r29, 0x00	; 0
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <pid_position_to_pwm+0x34>
#if BACKEMF_ENABLED
    int16_t sign;
    // Use the filtered position to determine velocity.
    sign = filtered_position - previous_position;
    if (sign < 0)
        sign = -1;
     a9e:	cf ef       	ldi	r28, 0xFF	; 255
     aa0:	df ef       	ldi	r29, 0xFF	; 255
    else
        sign = 1;

    current_velocity  = sign * filter_update(banks_read_word(INFORMATION_BANK, REG_BACKEMF_HI, REG_BACKEMF_LO), &filter_reg_emf);
     aa2:	42 e0       	ldi	r20, 0x02	; 2
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>
     aac:	6b e9       	ldi	r22, 0x9B	; 155
     aae:	71 e0       	ldi	r23, 0x01	; 1
     ab0:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <filter_update>
     ab4:	9c 01       	movw	r18, r24
     ab6:	c2 9f       	mul	r28, r18
     ab8:	c0 01       	movw	r24, r0
     aba:	c3 9f       	mul	r28, r19
     abc:	90 0d       	add	r25, r0
     abe:	d2 9f       	mul	r29, r18
     ac0:	90 0d       	add	r25, r0
     ac2:	11 24       	eor	r1, r1
     ac4:	90 93 98 01 	sts	0x0198, r25
     ac8:	80 93 97 01 	sts	0x0197, r24

    previous_position = filtered_position;
     acc:	80 91 99 01 	lds	r24, 0x0199
     ad0:	90 91 9a 01 	lds	r25, 0x019A
     ad4:	90 93 a4 01 	sts	0x01A4, r25
     ad8:	80 93 a3 01 	sts	0x01A3, r24
    current_velocity = filtered_position - previous_position;
    previous_position = filtered_position;
#endif

    // Get the seek position and velocity.
    seek_position = (int16_t) registers_read_word(REG_SEEK_POSITION_HI, REG_SEEK_POSITION_LO);
     adc:	61 e2       	ldi	r22, 0x21	; 33
     ade:	80 e2       	ldi	r24, 0x20	; 32
     ae0:	0e 94 16 01 	call	0x22c	; 0x22c <registers_read_word>
     ae4:	90 93 96 01 	sts	0x0196, r25
     ae8:	80 93 95 01 	sts	0x0195, r24
    seek_velocity = (int16_t) registers_read_word(REG_SEEK_VELOCITY_HI, REG_SEEK_VELOCITY_LO);
     aec:	63 e2       	ldi	r22, 0x23	; 35
     aee:	82 e2       	ldi	r24, 0x22	; 34
     af0:	0e 94 16 01 	call	0x22c	; 0x22c <registers_read_word>
     af4:	90 93 94 01 	sts	0x0194, r25
     af8:	80 93 93 01 	sts	0x0193, r24

    // Get the minimum and maximum position.
    minimum_position = (int16_t) banks_read_word(POS_PID_BANK, REG_MIN_SEEK_HI, REG_MIN_SEEK_LO);
     afc:	49 e0       	ldi	r20, 0x09	; 9
     afe:	68 e0       	ldi	r22, 0x08	; 8
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>
     b06:	90 93 92 01 	sts	0x0192, r25
     b0a:	80 93 91 01 	sts	0x0191, r24
    maximum_position = (int16_t) banks_read_word(POS_PID_BANK, REG_MAX_SEEK_HI, REG_MAX_SEEK_LO);
     b0e:	4b e0       	ldi	r20, 0x0B	; 11
     b10:	6a e0       	ldi	r22, 0x0A	; 10
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>
     b18:	90 93 90 01 	sts	0x0190, r25
     b1c:	80 93 8f 01 	sts	0x018F, r24

    // Are we reversing the seek sense?
    if (banks_read_byte(POS_PID_BANK, REG_REVERSE_SEEK) != 0)
     b20:	80 91 a8 02 	lds	r24, 0x02A8
     b24:	88 23       	and	r24, r24
     b26:	a9 f1       	breq	.+106    	; 0xb92 <pid_position_to_pwm+0x124>
    {
        // Yes. Update the position and velocity using reverse sense.
        registers_write_word(REG_POSITION_HI, REG_POSITION_LO, (uint16_t) (MAX_POSITION - current_position));
     b28:	cf ef       	ldi	r28, 0xFF	; 255
     b2a:	d3 e0       	ldi	r29, 0x03	; 3
     b2c:	ae 01       	movw	r20, r28
     b2e:	40 1b       	sub	r20, r16
     b30:	51 0b       	sbc	r21, r17
     b32:	69 e0       	ldi	r22, 0x09	; 9
     b34:	88 e0       	ldi	r24, 0x08	; 8
     b36:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>
        registers_write_word(REG_VELOCITY_HI, REG_VELOCITY_LO, (uint16_t) -current_velocity);
     b3a:	40 91 97 01 	lds	r20, 0x0197
     b3e:	50 91 98 01 	lds	r21, 0x0198
     b42:	51 95       	neg	r21
     b44:	41 95       	neg	r20
     b46:	51 09       	sbc	r21, r1
     b48:	6b e0       	ldi	r22, 0x0B	; 11
     b4a:	8a e0       	ldi	r24, 0x0A	; 10
     b4c:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>

        // Reverse sense the seek and other position values.
        seek_position = MAX_POSITION - seek_position;
     b50:	80 91 95 01 	lds	r24, 0x0195
     b54:	90 91 96 01 	lds	r25, 0x0196
     b58:	9e 01       	movw	r18, r28
     b5a:	28 1b       	sub	r18, r24
     b5c:	39 0b       	sbc	r19, r25
     b5e:	30 93 96 01 	sts	0x0196, r19
     b62:	20 93 95 01 	sts	0x0195, r18
        minimum_position = MAX_POSITION - minimum_position;
     b66:	80 91 91 01 	lds	r24, 0x0191
     b6a:	90 91 92 01 	lds	r25, 0x0192
     b6e:	9e 01       	movw	r18, r28
     b70:	28 1b       	sub	r18, r24
     b72:	39 0b       	sbc	r19, r25
     b74:	30 93 92 01 	sts	0x0192, r19
     b78:	20 93 91 01 	sts	0x0191, r18
        maximum_position = MAX_POSITION - maximum_position;
     b7c:	80 91 8f 01 	lds	r24, 0x018F
     b80:	90 91 90 01 	lds	r25, 0x0190
     b84:	c8 1b       	sub	r28, r24
     b86:	d9 0b       	sbc	r29, r25
     b88:	d0 93 90 01 	sts	0x0190, r29
     b8c:	c0 93 8f 01 	sts	0x018F, r28
     b90:	0d c0       	rjmp	.+26     	; 0xbac <pid_position_to_pwm+0x13e>
    }
    else
    {
        // No. Update the position and velocity registers without change.
        registers_write_word(REG_POSITION_HI, REG_POSITION_LO, (uint16_t) current_position);
     b92:	a8 01       	movw	r20, r16
     b94:	69 e0       	ldi	r22, 0x09	; 9
     b96:	88 e0       	ldi	r24, 0x08	; 8
     b98:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>
        registers_write_word(REG_VELOCITY_HI, REG_VELOCITY_LO, (uint16_t) current_velocity);
     b9c:	40 91 97 01 	lds	r20, 0x0197
     ba0:	50 91 98 01 	lds	r21, 0x0198
     ba4:	6b e0       	ldi	r22, 0x0B	; 11
     ba6:	8a e0       	ldi	r24, 0x0A	; 10
     ba8:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>
    }

    // Get the deadband.
    deadband = (int16_t) banks_read_byte(POS_PID_BANK, REG_PID_DEADBAND);
     bac:	80 91 9d 02 	lds	r24, 0x029D
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	90 93 8e 01 	sts	0x018E, r25
     bb6:	80 93 8d 01 	sts	0x018D, r24

    // Use the filtered position when the seek position is not changing.
    if (seek_position == previous_seek) current_position = filtered_position;
     bba:	80 91 95 01 	lds	r24, 0x0195
     bbe:	90 91 96 01 	lds	r25, 0x0196
     bc2:	20 91 a5 01 	lds	r18, 0x01A5
     bc6:	30 91 a6 01 	lds	r19, 0x01A6
     bca:	82 17       	cp	r24, r18
     bcc:	93 07       	cpc	r25, r19
     bce:	21 f4       	brne	.+8      	; 0xbd8 <pid_position_to_pwm+0x16a>
     bd0:	00 91 99 01 	lds	r16, 0x0199
     bd4:	10 91 9a 01 	lds	r17, 0x019A
    previous_seek = seek_position;
     bd8:	90 93 a6 01 	sts	0x01A6, r25
     bdc:	80 93 a5 01 	sts	0x01A5, r24

    // Keep the seek position bound within the minimum and maximum position.
    if (seek_position < minimum_position) seek_position = minimum_position;
     be0:	20 91 91 01 	lds	r18, 0x0191
     be4:	30 91 92 01 	lds	r19, 0x0192
     be8:	82 17       	cp	r24, r18
     bea:	93 07       	cpc	r25, r19
     bec:	24 f4       	brge	.+8      	; 0xbf6 <pid_position_to_pwm+0x188>
     bee:	30 93 96 01 	sts	0x0196, r19
     bf2:	20 93 95 01 	sts	0x0195, r18
    if (seek_position > maximum_position) seek_position = maximum_position;
     bf6:	80 91 8f 01 	lds	r24, 0x018F
     bfa:	90 91 90 01 	lds	r25, 0x0190
     bfe:	20 91 95 01 	lds	r18, 0x0195
     c02:	30 91 96 01 	lds	r19, 0x0196
     c06:	82 17       	cp	r24, r18
     c08:	93 07       	cpc	r25, r19
     c0a:	24 f4       	brge	.+8      	; 0xc14 <pid_position_to_pwm+0x1a6>
     c0c:	90 93 96 01 	sts	0x0196, r25
     c10:	80 93 95 01 	sts	0x0195, r24

    // The proportional component to the PID is the position error.
    p_component = seek_position - current_position;
     c14:	80 91 95 01 	lds	r24, 0x0195
     c18:	90 91 96 01 	lds	r25, 0x0196
     c1c:	80 1b       	sub	r24, r16
     c1e:	91 0b       	sbc	r25, r17
     c20:	90 93 8c 01 	sts	0x018C, r25
     c24:	80 93 8b 01 	sts	0x018B, r24

    // Get the proportional, derivative and integral gains.
    p_gain = banks_read_word(POS_PID_BANK, REG_PID_PGAIN_HI, REG_PID_PGAIN_LO);
     c28:	43 e0       	ldi	r20, 0x03	; 3
     c2a:	62 e0       	ldi	r22, 0x02	; 2
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>
     c32:	90 93 8a 01 	sts	0x018A, r25
     c36:	80 93 89 01 	sts	0x0189, r24
    d_gain = banks_read_word(POS_PID_BANK, REG_PID_DGAIN_HI, REG_PID_DGAIN_LO);
     c3a:	45 e0       	ldi	r20, 0x05	; 5
     c3c:	64 e0       	ldi	r22, 0x04	; 4
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>
     c44:	fc 01       	movw	r30, r24
     c46:	90 93 88 01 	sts	0x0188, r25
     c4a:	80 93 87 01 	sts	0x0187, r24

    // Start with zero PWM output.
    pwm_output = 0;
     c4e:	10 92 83 01 	sts	0x0183, r1
     c52:	10 92 84 01 	sts	0x0184, r1
     c56:	10 92 85 01 	sts	0x0185, r1
     c5a:	10 92 86 01 	sts	0x0186, r1

    // Apply proportional component to the PWM output if outside the deadband.
    if ((p_component > deadband) || (p_component < -deadband))
     c5e:	a0 91 8b 01 	lds	r26, 0x018B
     c62:	b0 91 8c 01 	lds	r27, 0x018C
     c66:	40 91 8d 01 	lds	r20, 0x018D
     c6a:	50 91 8e 01 	lds	r21, 0x018E
     c6e:	4a 17       	cp	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	34 f0       	brlt	.+12     	; 0xc80 <pid_position_to_pwm+0x212>
     c74:	51 95       	neg	r21
     c76:	41 95       	neg	r20
     c78:	51 09       	sbc	r21, r1
     c7a:	a4 17       	cp	r26, r20
     c7c:	b5 07       	cpc	r27, r21
     c7e:	94 f4       	brge	.+36     	; 0xca4 <pid_position_to_pwm+0x236>
    {
        // Apply the proportional component of the PWM output.
        pwm_output += (int32_t) p_component * (int32_t) p_gain;
     c80:	20 91 89 01 	lds	r18, 0x0189
     c84:	30 91 8a 01 	lds	r19, 0x018A
     c88:	0e 94 a1 10 	call	0x2142	; 0x2142 <__usmulhisi3>
     c8c:	60 93 83 01 	sts	0x0183, r22
     c90:	70 93 84 01 	sts	0x0184, r23
     c94:	80 93 85 01 	sts	0x0185, r24
     c98:	90 93 86 01 	sts	0x0186, r25

        // Reset the speed portion of the motion to zero when in deadband. Stops D error increasing.
        seek_velocity = 0;
     c9c:	10 92 94 01 	sts	0x0194, r1
     ca0:	10 92 93 01 	sts	0x0193, r1
    }

    // The derivative component to the PID is the velocity.
    d_component = seek_velocity - current_velocity;
     ca4:	a0 91 93 01 	lds	r26, 0x0193
     ca8:	b0 91 94 01 	lds	r27, 0x0194
     cac:	80 91 97 01 	lds	r24, 0x0197
     cb0:	90 91 98 01 	lds	r25, 0x0198
     cb4:	a8 1b       	sub	r26, r24
     cb6:	b9 0b       	sbc	r27, r25
     cb8:	b0 93 82 01 	sts	0x0182, r27
     cbc:	a0 93 81 01 	sts	0x0181, r26

    // Apply the derivative component of the PWM output.
    pwm_output += (int32_t) d_component * (int32_t) d_gain;
     cc0:	9f 01       	movw	r18, r30
     cc2:	0e 94 a1 10 	call	0x2142	; 0x2142 <__usmulhisi3>
     cc6:	00 91 83 01 	lds	r16, 0x0183
     cca:	10 91 84 01 	lds	r17, 0x0184
     cce:	20 91 85 01 	lds	r18, 0x0185
     cd2:	30 91 86 01 	lds	r19, 0x0186
     cd6:	dc 01       	movw	r26, r24
     cd8:	cb 01       	movw	r24, r22
     cda:	80 0f       	add	r24, r16
     cdc:	91 1f       	adc	r25, r17
     cde:	a2 1f       	adc	r26, r18
     ce0:	b3 1f       	adc	r27, r19

    // Shift by 8 to account for the multiply by the 8:8 fixed point gain values.
    pwm_output >>= 8;
     ce2:	89 2f       	mov	r24, r25
     ce4:	9a 2f       	mov	r25, r26
     ce6:	ab 2f       	mov	r26, r27
     ce8:	bb 27       	eor	r27, r27
     cea:	a7 fd       	sbrc	r26, 7
     cec:	ba 95       	dec	r27

    // Check for output saturation.
    if (pwm_output > MAX_OUTPUT)
     cee:	8f 3f       	cpi	r24, 0xFF	; 255
     cf0:	91 05       	cpc	r25, r1
     cf2:	a1 05       	cpc	r26, r1
     cf4:	b1 05       	cpc	r27, r1
     cf6:	31 f0       	breq	.+12     	; 0xd04 <pid_position_to_pwm+0x296>
     cf8:	2c f0       	brlt	.+10     	; 0xd04 <pid_position_to_pwm+0x296>
    {
        // Can't go higher than the maximum output value.
        pwm_output = MAX_OUTPUT;
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	0a c0       	rjmp	.+20     	; 0xd18 <pid_position_to_pwm+0x2aa>
    }
    else if (pwm_output < MIN_OUTPUT)
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	3f ef       	ldi	r19, 0xFF	; 255
     d08:	93 07       	cpc	r25, r19
     d0a:	a3 07       	cpc	r26, r19
     d0c:	b3 07       	cpc	r27, r19
     d0e:	24 f4       	brge	.+8      	; 0xd18 <pid_position_to_pwm+0x2aa>
    {
        // Can't go lower than the minimum output value.
        pwm_output = MIN_OUTPUT;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	9f ef       	ldi	r25, 0xFF	; 255
     d14:	af ef       	ldi	r26, 0xFF	; 255
     d16:	bf ef       	ldi	r27, 0xFF	; 255
     d18:	80 93 83 01 	sts	0x0183, r24
     d1c:	90 93 84 01 	sts	0x0184, r25
     d20:	a0 93 85 01 	sts	0x0185, r26
     d24:	b0 93 86 01 	sts	0x0186, r27
    }

    // Return the PID output.
    return (int16_t) pwm_output;
}
     d28:	80 91 83 01 	lds	r24, 0x0183
     d2c:	90 91 84 01 	lds	r25, 0x0184
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	08 95       	ret

00000d3a <power_init>:
// Initialize the power module.
{
    uint8_t i;

    // Initialize the power index.
    power_index = 0;
     d3a:	10 92 b7 01 	sts	0x01B7, r1
     d3e:	e7 ea       	ldi	r30, 0xA7	; 167
     d40:	f1 e0       	ldi	r31, 0x01	; 1

    // Initialize the power array.
    for (i = 0; i < 8; ++i) power_array[i] = 0;
     d42:	11 92       	st	Z+, r1
     d44:	11 92       	st	Z+, r1
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	e7 3b       	cpi	r30, 0xB7	; 183
     d4a:	f8 07       	cpc	r31, r24
     d4c:	d1 f7       	brne	.-12     	; 0xd42 <power_init+0x8>

    // Initialize the power values within the system registers.
    registers_write_word(REG_POWER_HI, REG_POWER_LO, 0);
     d4e:	40 e0       	ldi	r20, 0x00	; 0
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	6d e0       	ldi	r22, 0x0D	; 13
     d54:	8c e0       	ldi	r24, 0x0C	; 12
     d56:	0c 94 28 01 	jmp	0x250	; 0x250 <registers_write_word>

00000d5a <power_update>:
// is averaged with the seven previous power values.
{
    uint8_t i;

    // Insert the power value into the power array.
    power_array[power_index] = power;
     d5a:	20 91 b7 01 	lds	r18, 0x01B7
     d5e:	e2 2f       	mov	r30, r18
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	e9 55       	subi	r30, 0x59	; 89
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
     d6a:	91 83       	std	Z+1, r25	; 0x01
     d6c:	80 83       	st	Z, r24

    // Keep the index within the array bounds.
    power_index = (power_index + 1) & 7;
     d6e:	2f 5f       	subi	r18, 0xFF	; 255
     d70:	27 70       	andi	r18, 0x07	; 7
     d72:	20 93 b7 01 	sts	0x01B7, r18
     d76:	e7 ea       	ldi	r30, 0xA7	; 167
     d78:	f1 e0       	ldi	r31, 0x01	; 1

    // Reset the power value.
    power = 0;
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	50 e0       	ldi	r21, 0x00	; 0

    // Determine the power values across the power array.
    for (i = 0; i < 8; ++i) power += power_array[i];
     d7e:	81 91       	ld	r24, Z+
     d80:	91 91       	ld	r25, Z+
     d82:	48 0f       	add	r20, r24
     d84:	59 1f       	adc	r21, r25
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	e7 3b       	cpi	r30, 0xB7	; 183
     d8a:	f8 07       	cpc	r31, r24
     d8c:	c1 f7       	brne	.-16     	; 0xd7e <power_update+0x24>

    // Shift the sum of power values to find the average.
    power >>= 3;
     d8e:	83 e0       	ldi	r24, 0x03	; 3
     d90:	56 95       	lsr	r21
     d92:	47 95       	ror	r20
     d94:	8a 95       	dec	r24
     d96:	e1 f7       	brne	.-8      	; 0xd90 <power_update+0x36>

    // Update the power values within the system registers.
    registers_write_word(REG_POWER_HI, REG_POWER_LO, power);
     d98:	6d e0       	ldi	r22, 0x0D	; 13
     d9a:	8c e0       	ldi	r24, 0x0C	; 12
     d9c:	0c 94 28 01 	jmp	0x250	; 0x250 <registers_write_word>

00000da0 <twi_registers_write>:

static void twi_registers_write(uint8_t address, uint8_t data)
// Write non-write protected registers.  This function handles the
// writing of special registers such as unused registers, redirect and
// redirected registers.
{
     da0:	e8 2f       	mov	r30, r24
}


inline static uint8_t registers_is_write_disabled(void)
{
    return (registers_read_byte(REG_FLAGS_LO) & (1<<FLAGS_LO_WRITE_ENABLED)) ? 0 : 1;
     da2:	90 91 01 02 	lds	r25, 0x0201
     da6:	96 95       	lsr	r25
     da8:	91 70       	andi	r25, 0x01	; 1
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	98 27       	eor	r25, r24
// Register in-line functions.

// Read a single byte from the registers.
inline static uint8_t registers_read_byte(uint8_t address)
{
    return registers[address];
     dae:	80 91 2b 02 	lds	r24, 0x022B
    // Mask the most significant bit of the address.
    address &= 0x7F;
     db2:	ef 77       	andi	r30, 0x7F	; 127

    // Are we writing a read only register?
    if (address <= MAX_READ_ONLY_REGISTER)
     db4:	e0 32       	cpi	r30, 0x20	; 32
     db6:	c0 f1       	brcs	.+112    	; 0xe28 <twi_registers_write+0x88>
        // Yes. Block the write.
        return;
    }

    // Are we writing a read/write register?
    if (address <= MAX_READ_WRITE_REGISTER)
     db8:	e8 33       	cpi	r30, 0x38	; 56
     dba:	30 f4       	brcc	.+12     	; 0xdc8 <twi_registers_write+0x28>
    {
        // Check that the bank selection is in range
        if (address == REG_BANK_SELECT)
     dbc:	ef 32       	cpi	r30, 0x2F	; 47
     dbe:	59 f4       	brne	.+22     	; 0xdd6 <twi_registers_write+0x36>
     dc0:	63 30       	cpi	r22, 0x03	; 3
     dc2:	48 f0       	brcs	.+18     	; 0xdd6 <twi_registers_write+0x36>
     dc4:	62 e0       	ldi	r22, 0x02	; 2
     dc6:	07 c0       	rjmp	.+14     	; 0xdd6 <twi_registers_write+0x36>

        return;
    }

    // Is writing to the upper registers disabled?
    if (registers_is_write_disabled() && (address <= MAX_WRITE_PROTECT_REGISTER))
     dc8:	99 23       	and	r25, r25
     dca:	19 f0       	breq	.+6      	; 0xdd2 <twi_registers_write+0x32>
     dcc:	e0 34       	cpi	r30, 0x40	; 64
     dce:	38 f4       	brcc	.+14     	; 0xdde <twi_registers_write+0x3e>
     dd0:	08 95       	ret
        // Yes. Block the write.
        return;
    }

    // Are we writing a write protected register?
    if (address <= MAX_WRITE_PROTECT_REGISTER)
     dd2:	e0 34       	cpi	r30, 0x40	; 64
     dd4:	20 f4       	brcc	.+8      	; 0xdde <twi_registers_write+0x3e>


// Write a single byte to the registers.
inline static void registers_write_byte(uint8_t address, uint8_t value)
{
    registers[address] = value;
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	e4 50       	subi	r30, 0x04	; 4
     dda:	fe 4f       	sbci	r31, 0xFE	; 254
     ddc:	23 c0       	rjmp	.+70     	; 0xe24 <twi_registers_write+0x84>

    //TODO check to see if we have writes enabled/disabled
    // Are we writing a bank register? 
    if (address <= MAX_BANK_REGISTER)
    {
        switch(banks_selected_bank())
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	19 f0       	breq	.+6      	; 0xde8 <twi_registers_write+0x48>
     de2:	82 30       	cpi	r24, 0x02	; 2
     de4:	21 f0       	breq	.+8      	; 0xdee <twi_registers_write+0x4e>
     de6:	13 c0       	rjmp	.+38     	; 0xe0e <twi_registers_write+0x6e>
        {
            case BANK_0:
                break;
            case BANK_1:
                // Are we writing to the configuration bank while writes are disabled?
                if (registers_is_write_disabled())
     de8:	99 23       	and	r25, r25
     dea:	89 f0       	breq	.+34     	; 0xe0e <twi_registers_write+0x6e>
     dec:	08 95       	ret
                    return;
                break;
            case REDIRECTED_BANK:

                // Are we writing a redirect register.
                if (address <= MIN_BANK_REGISTER + MAX_REDIRECT_REGISTER)
     dee:	e0 35       	cpi	r30, 0x50	; 80
     df0:	28 f4       	brcc	.+10     	; 0xdfc <twi_registers_write+0x5c>
                {
                    // Yes. Complete the write.
                    banks_write_byte(REDIRECTED_BANK, address - MIN_BANK_REGISTER, data);
     df2:	e0 54       	subi	r30, 0x40	; 64
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	e4 52       	subi	r30, 0x24	; 36
     df8:	fd 4f       	sbci	r31, 0xFD	; 253
     dfa:	14 c0       	rjmp	.+40     	; 0xe24 <twi_registers_write+0x84>

                    return;
                }

                // Are we writing a redirected register?
                if (address <= MIN_BANK_REGISTER + MAX_REDIRECTED_REGISTER)
     dfc:	e0 36       	cpi	r30, 0x60	; 96
     dfe:	38 f4       	brcc	.+14     	; 0xe0e <twi_registers_write+0x6e>
                {
                    // Adjust address to reference appropriate redirect register.
                    address = address - (MIN_BANK_REGISTER + MIN_REDIRECTED_REGISTER);
     e00:	e0 55       	subi	r30, 0x50	; 80
}

// Read a single byte from the banks.
inline static uint8_t banks_read_byte(uint8_t bank, uint8_t address)
{
    return banks[bank][address];
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	e4 52       	subi	r30, 0x24	; 36
     e06:	fd 4f       	sbci	r31, 0xFD	; 253
     e08:	e0 81       	ld	r30, Z

                    // Get the address from the redirect register.
                    address = banks_read_byte(REDIRECTED_BANK, address);

                    // Prevent infinite recursion.
                    if (address <= MIN_BANK_REGISTER + MAX_REDIRECT_REGISTER)
     e0a:	e0 35       	cpi	r30, 0x50	; 80
     e0c:	90 f2       	brcs	.-92     	; 0xdb2 <twi_registers_write+0x12>
                }
                break;
            default:
                break;
        }
        return banks_write_byte(banks_selected_bank(), address-MIN_BANK_REGISTER, data);
     e0e:	e0 54       	subi	r30, 0x40	; 64
}

// Write a single byte to the banks.
inline static void banks_write_byte(uint8_t bank, uint8_t address, uint8_t value)
{
    banks[bank][address] = value;
     e10:	20 e4       	ldi	r18, 0x40	; 64
     e12:	82 9f       	mul	r24, r18
     e14:	c0 01       	movw	r24, r0
     e16:	11 24       	eor	r1, r1
     e18:	9c 01       	movw	r18, r24
     e1a:	2e 0f       	add	r18, r30
     e1c:	31 1d       	adc	r19, r1
     e1e:	f9 01       	movw	r30, r18
     e20:	e4 5a       	subi	r30, 0xA4	; 164
     e22:	fd 4f       	sbci	r31, 0xFD	; 253
     e24:	60 83       	st	Z, r22
     e26:	08 95       	ret
     e28:	08 95       	ret

00000e2a <general_call_enable>:
// request.

void general_call_enable(void)
// Enable general call broadcast support at address 0x00
{
    TWAR |=  (1<<TWGCE);       // Enable general call at address 0x00
     e2a:	ea eb       	ldi	r30, 0xBA	; 186
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	81 60       	ori	r24, 0x01	; 1
     e32:	80 83       	st	Z, r24
     e34:	ec ef       	ldi	r30, 0xFC	; 252
     e36:	f1 e0       	ldi	r31, 0x01	; 1

    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    // Enable PWM to the servo motor.
    registers_write_byte(REG_FLAGS_LO, flags_lo | (1<<FLAGS_LO_GENERALCALL_ENABLED));
     e38:	85 81       	ldd	r24, Z+5	; 0x05
     e3a:	88 60       	ori	r24, 0x08	; 8
     e3c:	85 83       	std	Z+5, r24	; 0x05
     e3e:	08 95       	ret

00000e40 <general_call_disable>:
}

void general_call_disable(void)
// Disable general call support.
{
    TWAR &= ~(1<<TWGCE);                      // disable general call
     e40:	ea eb       	ldi	r30, 0xBA	; 186
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8e 7f       	andi	r24, 0xFE	; 254
     e48:	80 83       	st	Z, r24
     e4a:	ec ef       	ldi	r30, 0xFC	; 252
     e4c:	f1 e0       	ldi	r31, 0x01	; 1

    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    registers_write_byte(REG_FLAGS_LO, flags_lo  & ~(1<<FLAGS_LO_GENERALCALL_ENABLED));
     e4e:	85 81       	ldd	r24, Z+5	; 0x05
     e50:	87 7f       	andi	r24, 0xF7	; 247
     e52:	85 83       	std	Z+5, r24	; 0x05
     e54:	08 95       	ret

00000e56 <general_call_start_reset>:
     e56:	ec ef       	ldi	r30, 0xFC	; 252
     e58:	f1 e0       	ldi	r31, 0x01	; 1
// Remove the flag that waits for the broadcast request
{
    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    // Disable the general call wait flag
    registers_write_byte(REG_FLAGS_LO, flags_lo  & ~(1<<FLAGS_LO_GENERALCALL_START));
     e5a:	85 81       	ldd	r24, Z+5	; 0x05
     e5c:	8f 7d       	andi	r24, 0xDF	; 223
     e5e:	85 83       	std	Z+5, r24	; 0x05
     e60:	15 a6       	std	Z+45, r1	; 0x2d
     e62:	08 95       	ret

00000e64 <general_call_start_move>:
     e64:	ec ef       	ldi	r30, 0xFC	; 252
     e66:	f1 e0       	ldi	r31, 0x01	; 1
void general_call_start_move(void)
// Start the move by broadcasting at address 0x00
{
    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    registers_write_byte(REG_FLAGS_LO, flags_lo | (1<<FLAGS_LO_GENERALCALL_START));
     e68:	85 81       	ldd	r24, Z+5	; 0x05
     e6a:	80 62       	ori	r24, 0x20	; 32
     e6c:	85 83       	std	Z+5, r24	; 0x05
     e6e:	08 95       	ret

00000e70 <general_call_start_wait>:
     e70:	ec ef       	ldi	r30, 0xFC	; 252
     e72:	f1 e0       	ldi	r31, 0x01	; 1
void general_call_start_wait(void)
// Set the servo into wait mode. We will wait for the broadcast before move
{
    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    registers_write_byte(REG_FLAGS_LO, flags_lo | (1<<FLAGS_LO_GENERALCALL_WAIT));
     e74:	85 81       	ldd	r24, Z+5	; 0x05
     e76:	80 61       	ori	r24, 0x10	; 16
     e78:	85 83       	std	Z+5, r24	; 0x05
     e7a:	08 95       	ret

00000e7c <general_call_start_wait_reset>:
     e7c:	ec ef       	ldi	r30, 0xFC	; 252
     e7e:	f1 e0       	ldi	r31, 0x01	; 1
void general_call_start_wait_reset(void)
// Disable the start wait state. Returns servo to normal operation.
{
    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    registers_write_byte(REG_FLAGS_LO, flags_lo  & ~(1<<FLAGS_LO_GENERALCALL_WAIT));
     e80:	85 81       	ldd	r24, Z+5	; 0x05
     e82:	8f 7e       	andi	r24, 0xEF	; 239
     e84:	85 83       	std	Z+5, r24	; 0x05
     e86:	08 95       	ret

00000e88 <twi_slave_init>:
void
twi_slave_init(uint8_t slave_address)
// Initialise USI for TWI slave mode.
{
    // Flush the buffers.
    twi_rxtail = 0;
     e88:	10 92 cf 01 	sts	0x01CF, r1
    twi_rxhead = 0;
     e8c:	10 92 d0 01 	sts	0x01D0, r1

    // Set own TWI slave address.
    TWAR = slave_address << 1;
     e90:	88 0f       	add	r24, r24
     e92:	80 93 ba 00 	sts	0x00BA, r24

    // Initialise General call
    general_call_disable();
     e96:	0e 94 20 07 	call	0xe40	; 0xe40 <general_call_disable>
    general_call_start_reset();
     e9a:	0e 94 2b 07 	call	0xe56	; 0xe56 <general_call_start_reset>
    general_call_start_wait_reset();
     e9e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <general_call_start_wait_reset>

    // Default content = SDA released.
    TWDR = 0xFF;
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	80 93 bb 00 	sts	0x00BB, r24

    // Initialize the TWI interrupt to wait for a new event.
    TWCR = (1<<TWEN) |                                  // Keep the TWI interface enabled.
     ea8:	85 ec       	ldi	r24, 0xC5	; 197
     eaa:	80 93 bc 00 	sts	0x00BC, r24
     eae:	08 95       	ret

00000eb0 <twi_receive_byte>:

uint8_t twi_receive_byte(void)
// Returns a byte from the receive buffer. Waits if buffer is empty.
{
    // Wait for data in the buffer.
    while (twi_rxhead == twi_rxtail);
     eb0:	90 91 d0 01 	lds	r25, 0x01D0
     eb4:	80 91 cf 01 	lds	r24, 0x01CF
     eb8:	98 17       	cp	r25, r24
     eba:	d1 f3       	breq	.-12     	; 0xeb0 <twi_receive_byte>

    // Calculate buffer index.
    twi_rxtail = (twi_rxtail + 1 ) & TWI_RX_BUFFER_MASK;
     ebc:	80 91 cf 01 	lds	r24, 0x01CF
     ec0:	8f 5f       	subi	r24, 0xFF	; 255
     ec2:	83 70       	andi	r24, 0x03	; 3
     ec4:	80 93 cf 01 	sts	0x01CF, r24

    // Return data from the buffer.
    return twi_rxbuf[twi_rxtail];
     ec8:	e0 91 cf 01 	lds	r30, 0x01CF
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	e5 53       	subi	r30, 0x35	; 53
     ed0:	fe 4f       	sbci	r31, 0xFE	; 254
}
     ed2:	80 81       	ld	r24, Z
     ed4:	08 95       	ret

00000ed6 <twi_data_in_receive_buffer>:

uint8_t twi_data_in_receive_buffer(void)
// Check if there is data in the receive buffer.
{
    // Return 0 (FALSE) if the receive buffer is empty.
    return (twi_rxhead != twi_rxtail);
     ed6:	20 91 d0 01 	lds	r18, 0x01D0
     eda:	90 91 cf 01 	lds	r25, 0x01CF
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	29 13       	cpse	r18, r25
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <twi_data_in_receive_buffer+0x10>
     ee4:	80 e0       	ldi	r24, 0x00	; 0
}
     ee6:	08 95       	ret

00000ee8 <__vector_24>:


SIGNAL(TWI_vect)
// Handle the TWI interrupt condition.
{
     ee8:	1f 92       	push	r1
     eea:	0f 92       	push	r0
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	0f 92       	push	r0
     ef0:	11 24       	eor	r1, r1
     ef2:	2f 93       	push	r18
     ef4:	3f 93       	push	r19
     ef6:	4f 93       	push	r20
     ef8:	5f 93       	push	r21
     efa:	6f 93       	push	r22
     efc:	7f 93       	push	r23
     efe:	8f 93       	push	r24
     f00:	9f 93       	push	r25
     f02:	af 93       	push	r26
     f04:	bf 93       	push	r27
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	ef 93       	push	r30
     f0c:	ff 93       	push	r31
    switch (TWSR)
     f0e:	80 91 b9 00 	lds	r24, 0x00B9
     f12:	88 39       	cpi	r24, 0x98	; 152
     f14:	09 f4       	brne	.+2      	; 0xf18 <__vector_24+0x30>
     f16:	ec c0       	rjmp	.+472    	; 0x10f0 <__vector_24+0x208>
     f18:	a8 f4       	brcc	.+42     	; 0xf44 <__vector_24+0x5c>
     f1a:	80 37       	cpi	r24, 0x70	; 112
     f1c:	09 f4       	brne	.+2      	; 0xf20 <__vector_24+0x38>
     f1e:	6d c0       	rjmp	.+218    	; 0xffa <__vector_24+0x112>
     f20:	38 f4       	brcc	.+14     	; 0xf30 <__vector_24+0x48>
     f22:	88 23       	and	r24, r24
     f24:	09 f4       	brne	.+2      	; 0xf28 <__vector_24+0x40>
     f26:	e2 c0       	rjmp	.+452    	; 0x10ec <__vector_24+0x204>
     f28:	80 36       	cpi	r24, 0x60	; 96
     f2a:	09 f4       	brne	.+2      	; 0xf2e <__vector_24+0x46>
     f2c:	66 c0       	rjmp	.+204    	; 0xffa <__vector_24+0x112>
     f2e:	e0 c0       	rjmp	.+448    	; 0x10f0 <__vector_24+0x208>
     f30:	88 38       	cpi	r24, 0x88	; 136
     f32:	09 f4       	brne	.+2      	; 0xf36 <__vector_24+0x4e>
     f34:	dd c0       	rjmp	.+442    	; 0x10f0 <__vector_24+0x208>
     f36:	80 39       	cpi	r24, 0x90	; 144
     f38:	09 f4       	brne	.+2      	; 0xf3c <__vector_24+0x54>
     f3a:	62 c0       	rjmp	.+196    	; 0x1000 <__vector_24+0x118>
     f3c:	80 38       	cpi	r24, 0x80	; 128
     f3e:	09 f0       	breq	.+2      	; 0xf42 <__vector_24+0x5a>
     f40:	d7 c0       	rjmp	.+430    	; 0x10f0 <__vector_24+0x208>
     f42:	5e c0       	rjmp	.+188    	; 0x1000 <__vector_24+0x118>
     f44:	88 3b       	cpi	r24, 0xB8	; 184
     f46:	71 f0       	breq	.+28     	; 0xf64 <__vector_24+0x7c>
     f48:	30 f4       	brcc	.+12     	; 0xf56 <__vector_24+0x6e>
     f4a:	80 3a       	cpi	r24, 0xA0	; 160
     f4c:	09 f4       	brne	.+2      	; 0xf50 <__vector_24+0x68>
     f4e:	d0 c0       	rjmp	.+416    	; 0x10f0 <__vector_24+0x208>
     f50:	88 3a       	cpi	r24, 0xA8	; 168
     f52:	41 f0       	breq	.+16     	; 0xf64 <__vector_24+0x7c>
     f54:	cd c0       	rjmp	.+410    	; 0x10f0 <__vector_24+0x208>
     f56:	88 3c       	cpi	r24, 0xC8	; 200
     f58:	09 f4       	brne	.+2      	; 0xf5c <__vector_24+0x74>
     f5a:	ca c0       	rjmp	.+404    	; 0x10f0 <__vector_24+0x208>
     f5c:	88 3f       	cpi	r24, 0xF8	; 248
     f5e:	09 f4       	brne	.+2      	; 0xf62 <__vector_24+0x7a>
     f60:	cc c0       	rjmp	.+408    	; 0x10fa <__vector_24+0x212>
     f62:	c6 c0       	rjmp	.+396    	; 0x10f0 <__vector_24+0x208>

static uint8_t twi_read_data()
// Handle checked/non-checked read of data.
{
    // By default read the data to be returned.
    uint8_t data = twi_registers_read(twi_address);
     f64:	e0 91 d3 01 	lds	r30, 0x01D3
// Register in-line functions.

// Read a single byte from the registers.
inline static uint8_t registers_read_byte(uint8_t address)
{
    return registers[address];
     f68:	80 91 2b 02 	lds	r24, 0x022B
// Read the byte from the specified register.  This function handles the
// reading of special registers such as unused registers, redirect and
// redirected registers.
{
    // Mask the most significant bit of the address.
    address &= 0x7F;
     f6c:	ef 77       	andi	r30, 0x7F	; 127

    // Are we reading a normal register?
    if (address <= MAX_WRITE_PROTECT_REGISTER)
     f6e:	e0 34       	cpi	r30, 0x40	; 64
     f70:	48 f4       	brcc	.+18     	; 0xf84 <__vector_24+0x9c>
    {
#if ROLLING_SUBTYPE
        if (address == REG_DEVICE_SUBTYPE)
     f72:	e1 30       	cpi	r30, 0x01	; 1
     f74:	19 f4       	brne	.+6      	; 0xf7c <__vector_24+0x94>
        {
            return registers_subtype_cycle();
     f76:	0e 94 36 01 	call	0x26c	; 0x26c <registers_subtype_cycle>
     f7a:	22 c0       	rjmp	.+68     	; 0xfc0 <__vector_24+0xd8>
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	e4 50       	subi	r30, 0x04	; 4
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	1d c0       	rjmp	.+58     	; 0xfbe <__vector_24+0xd6>

    // Are we reading a bank register? 
    if (address <= MAX_BANK_REGISTER)
    {
        // Conditional bank functions
        switch(banks_selected_bank())
     f84:	82 30       	cpi	r24, 0x02	; 2
     f86:	81 f4       	brne	.+32     	; 0xfa8 <__vector_24+0xc0>
        {
            case REDIRECTED_BANK:
                // Are we reading a redirect register.
                if (address <=  MIN_BANK_REGISTER + MAX_REDIRECT_REGISTER)
     f88:	e0 35       	cpi	r30, 0x50	; 80
     f8a:	28 f4       	brcc	.+10     	; 0xf96 <__vector_24+0xae>
                {
                    // Yes. Complete the read.
                    return banks_read_byte(REDIRECTED_BANK, address -  MIN_BANK_REGISTER);
     f8c:	e0 54       	subi	r30, 0x40	; 64
}

// Read a single byte from the banks.
inline static uint8_t banks_read_byte(uint8_t bank, uint8_t address)
{
    return banks[bank][address];
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	e4 52       	subi	r30, 0x24	; 36
     f92:	fd 4f       	sbci	r31, 0xFD	; 253
     f94:	14 c0       	rjmp	.+40     	; 0xfbe <__vector_24+0xd6>
                }

                // Are we reading a redirected register?
                if (address <= MIN_BANK_REGISTER + MAX_REDIRECTED_REGISTER)
     f96:	e0 36       	cpi	r30, 0x60	; 96
     f98:	38 f4       	brcc	.+14     	; 0xfa8 <__vector_24+0xc0>
                {
                    // Adjust address to reference appropriate redirect register.
                    address = address - (MIN_BANK_REGISTER + MIN_REDIRECTED_REGISTER);
     f9a:	e0 55       	subi	r30, 0x50	; 80
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	e4 52       	subi	r30, 0x24	; 36
     fa0:	fd 4f       	sbci	r31, 0xFD	; 253
     fa2:	e0 81       	ld	r30, Z
                    // Get the address from the redirect register.
                    address = banks_read_byte(REDIRECTED_BANK, address);
                    // Prevent infinite recursion.
                    if (address <= MIN_BANK_REGISTER + MAX_REDIRECT_REGISTER)
     fa4:	e0 35       	cpi	r30, 0x50	; 80
     fa6:	10 f3       	brcs	.-60     	; 0xf6c <__vector_24+0x84>
                break;
            default:
                break;
        }
        // Defaults to returning the register n the bank array
        return banks_read_byte(banks_selected_bank(), address-MIN_BANK_REGISTER);
     fa8:	e0 54       	subi	r30, 0x40	; 64
     faa:	20 e4       	ldi	r18, 0x40	; 64
     fac:	82 9f       	mul	r24, r18
     fae:	c0 01       	movw	r24, r0
     fb0:	11 24       	eor	r1, r1
     fb2:	9c 01       	movw	r18, r24
     fb4:	2e 0f       	add	r18, r30
     fb6:	31 1d       	adc	r19, r1
     fb8:	f9 01       	movw	r30, r18
     fba:	e4 5a       	subi	r30, 0xA4	; 164
     fbc:	fd 4f       	sbci	r31, 0xFD	; 253
     fbe:	80 81       	ld	r24, Z
    // By default read the data to be returned.
    uint8_t data = twi_registers_read(twi_address);

#if TWI_CHECKED_ENABLED
    // Are we handling checked data?
    if (twi_data_state == TWI_DATA_STATE_CHECKED_DATA)
     fc0:	90 91 d2 01 	lds	r25, 0x01D2
     fc4:	94 30       	cpi	r25, 0x04	; 4
     fc6:	89 f4       	brne	.+34     	; 0xfea <__vector_24+0x102>
    {
        // Have we reached the end of the read?
        if (twi_chk_count < twi_chk_count_target)
     fc8:	20 91 ca 01 	lds	r18, 0x01CA
     fcc:	30 91 c9 01 	lds	r19, 0x01C9
     fd0:	90 91 c8 01 	lds	r25, 0x01C8
     fd4:	23 17       	cp	r18, r19
     fd6:	38 f4       	brcc	.+14     	; 0xfe6 <__vector_24+0xfe>
        {
            // Add the data to the check sum.
            twi_chk_sum += data;
     fd8:	98 0f       	add	r25, r24
     fda:	90 93 c8 01 	sts	0x01C8, r25

            // Increment the check sum data count.
            ++twi_chk_count;
     fde:	2f 5f       	subi	r18, 0xFF	; 255
     fe0:	20 93 ca 01 	sts	0x01CA, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <__vector_24+0x102>
            ++twi_address;
        }
        else
        {
            // Replace the data with the checksum.
            data = twi_chk_sum;
     fe6:	89 2f       	mov	r24, r25
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <__vector_24+0x10c>
        }
    }
    else
    {
        // Increment the address.
        ++twi_address;
     fea:	90 91 d3 01 	lds	r25, 0x01D3
     fee:	9f 5f       	subi	r25, 0xFF	; 255
     ff0:	90 93 d3 01 	sts	0x01D3, r25
        case TWI_STX_ADR_ACK:
        // Data byte in TWDR has been transmitted; ACK has been received.
        case TWI_STX_DATA_ACK:

            // Read the checked/non-checked data.
            TWDR = twi_read_data();
     ff4:	80 93 bb 00 	sts	0x00BB, r24
     ff8:	7b c0       	rjmp	.+246    	; 0x10f0 <__vector_24+0x208>
        case TWI_SRX_ADR_ACK:
        // General call GEN+W received; ACK has been returned
        case TWI_SRX_GEN_ACK:

            // Reset the data state.
            twi_data_state = TWI_DATA_STATE_COMMAND;
     ffa:	10 92 d2 01 	sts	0x01D2, r1
     ffe:	78 c0       	rjmp	.+240    	; 0x10f0 <__vector_24+0x208>
        case TWI_SRX_ADR_DATA_ACK:
        // Previously addressed with general call SLA+W; data has been received; ACK has been returned.
        case TWI_SRX_GEN_DATA_ACK:

            // Write the data.
            if (twi_write_data(TWDR) == TWI_ACK)
    1000:	60 91 bb 00 	lds	r22, 0x00BB
{
    // By default, return ACK from write.
    uint8_t ack = TWI_ACK;

    // Handle the write depending on the write state.
    switch (twi_data_state)
    1004:	80 91 d2 01 	lds	r24, 0x01D2
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	61 f1       	breq	.+88     	; 0x1064 <__vector_24+0x17c>
    100c:	78 f4       	brcc	.+30     	; 0x102c <__vector_24+0x144>
    100e:	88 23       	and	r24, r24
    1010:	91 f0       	breq	.+36     	; 0x1036 <__vector_24+0x14e>
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	09 f0       	breq	.+2      	; 0x1018 <__vector_24+0x130>
    1016:	6c c0       	rjmp	.+216    	; 0x10f0 <__vector_24+0x208>
            break;

        case TWI_DATA_STATE_DATA:

            // Write the data to the addressed register.
            twi_registers_write(twi_address, data);
    1018:	80 91 d3 01 	lds	r24, 0x01D3
    101c:	0e 94 d0 06 	call	0xda0	; 0xda0 <twi_registers_write>

            // Increment to the next address.
            ++twi_address;
    1020:	80 91 d3 01 	lds	r24, 0x01D3
    1024:	8f 5f       	subi	r24, 0xFF	; 255
    1026:	80 93 d3 01 	sts	0x01D3, r24
    102a:	62 c0       	rjmp	.+196    	; 0x10f0 <__vector_24+0x208>
{
    // By default, return ACK from write.
    uint8_t ack = TWI_ACK;

    // Handle the write depending on the write state.
    switch (twi_data_state)
    102c:	83 30       	cpi	r24, 0x03	; 3
    102e:	19 f1       	breq	.+70     	; 0x1076 <__vector_24+0x18e>
    1030:	84 30       	cpi	r24, 0x04	; 4
    1032:	61 f1       	breq	.+88     	; 0x108c <__vector_24+0x1a4>
    1034:	5d c0       	rjmp	.+186    	; 0x10f0 <__vector_24+0x208>
    {
        case TWI_DATA_STATE_COMMAND:

            // This is a byte.
            if (data < TWI_CMD_RESET)
    1036:	67 fd       	sbrc	r22, 7
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <__vector_24+0x15a>
            {
                // Capture the address.
                twi_address = data;
    103a:	60 93 d3 01 	sts	0x01D3, r22

                // Update the write state.
                twi_data_state = TWI_DATA_STATE_DATA;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	22 c0       	rjmp	.+68     	; 0x1086 <__vector_24+0x19e>
            }
#if TWI_CHECKED_ENABLED
            else if (data == TWI_CMD_CHECKED_TXN)
    1042:	61 38       	cpi	r22, 0x81	; 129
    1044:	11 f4       	brne	.+4      	; 0x104a <__vector_24+0x162>
            {
                // Update the write state.
                twi_data_state = TWI_DATA_STATE_CHECKED_COUNTING;
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	1e c0       	rjmp	.+60     	; 0x1086 <__vector_24+0x19e>
            }
#endif
            else
            {
                // Handle the command asynchronously.
                twi_rxhead = (twi_rxhead + 1) & TWI_RX_BUFFER_MASK;
    104a:	80 91 d0 01 	lds	r24, 0x01D0
    104e:	8f 5f       	subi	r24, 0xFF	; 255
    1050:	83 70       	andi	r24, 0x03	; 3
    1052:	80 93 d0 01 	sts	0x01D0, r24
                twi_rxbuf[twi_rxhead] = data;
    1056:	e0 91 d0 01 	lds	r30, 0x01D0
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	e5 53       	subi	r30, 0x35	; 53
    105e:	fe 4f       	sbci	r31, 0xFE	; 254
    1060:	60 83       	st	Z, r22
    1062:	46 c0       	rjmp	.+140    	; 0x10f0 <__vector_24+0x208>
#if TWI_CHECKED_ENABLED
        case TWI_DATA_STATE_CHECKED_COUNTING:

            // Read in the count (Make sure it's less than the max count)
            // and start the checksum
            twi_chk_sum = twi_chk_count_target = data & TWI_CHK_WRITE_BUFFER_MASK;
    1064:	6f 70       	andi	r22, 0x0F	; 15
    1066:	60 93 c9 01 	sts	0x01C9, r22
    106a:	60 93 c8 01 	sts	0x01C8, r22

            // Clear the checksum and count.
            twi_chk_count = 0;
    106e:	10 92 ca 01 	sts	0x01CA, r1

            // Update the write state.
            twi_data_state = TWI_DATA_STATE_CHECKED_ADDRESS;
    1072:	83 e0       	ldi	r24, 0x03	; 3
    1074:	08 c0       	rjmp	.+16     	; 0x1086 <__vector_24+0x19e>
            break;

        case TWI_DATA_STATE_CHECKED_ADDRESS:

            // Capture the address and include it in the checksum
            twi_chk_sum += twi_address = data;
    1076:	60 93 d3 01 	sts	0x01D3, r22
    107a:	80 91 c8 01 	lds	r24, 0x01C8
    107e:	68 0f       	add	r22, r24
    1080:	60 93 c8 01 	sts	0x01C8, r22

            // Update the write state.
            twi_data_state = TWI_DATA_STATE_CHECKED_DATA;
    1084:	84 e0       	ldi	r24, 0x04	; 4
    1086:	80 93 d2 01 	sts	0x01D2, r24
    108a:	32 c0       	rjmp	.+100    	; 0x10f0 <__vector_24+0x208>
            break;

        case TWI_DATA_STATE_CHECKED_DATA:

            // Have we reached the end of the write?
            if (twi_chk_count < twi_chk_count_target)
    108c:	80 91 ca 01 	lds	r24, 0x01CA
    1090:	d0 91 c9 01 	lds	r29, 0x01C9
    1094:	90 91 c8 01 	lds	r25, 0x01C8
    1098:	8d 17       	cp	r24, r29
    109a:	68 f4       	brcc	.+26     	; 0x10b6 <__vector_24+0x1ce>
            {
                // No. Write the data to the checksum buffer
                twi_chk_write_buffer[twi_chk_count & TWI_CHK_WRITE_BUFFER_MASK] = data;
    109c:	e8 2f       	mov	r30, r24
    109e:	ef 70       	andi	r30, 0x0F	; 15
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	e8 54       	subi	r30, 0x48	; 72
    10a4:	fe 4f       	sbci	r31, 0xFE	; 254
    10a6:	60 83       	st	Z, r22

                // Add the data to the checksum.
                twi_chk_sum += data;
    10a8:	69 0f       	add	r22, r25
    10aa:	60 93 c8 01 	sts	0x01C8, r22

                // Increment the check sum data count.
                ++twi_chk_count;
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	80 93 ca 01 	sts	0x01CA, r24
    10b4:	1d c0       	rjmp	.+58     	; 0x10f0 <__vector_24+0x208>
            }
            else
            {
                // Verify the checksum
                if (data == twi_chk_sum)
    10b6:	69 13       	cpse	r22, r25
    10b8:	1d c0       	rjmp	.+58     	; 0x10f4 <__vector_24+0x20c>
#if TWI_CHECKED_ENABLED
static void twi_write_buffer(void)
// Write the recieve buffer to memory.
{
    // Loop over the data within the write buffer.
    for (twi_chk_count = 0; twi_chk_count < twi_chk_count_target; twi_chk_count++)
    10ba:	10 92 ca 01 	sts	0x01CA, r1
    10be:	c0 91 ca 01 	lds	r28, 0x01CA
    10c2:	cd 17       	cp	r28, r29
    10c4:	a8 f4       	brcc	.+42     	; 0x10f0 <__vector_24+0x208>
    {
        // Write the data to the addressed register.
        twi_registers_write(twi_address, twi_chk_write_buffer[twi_chk_count & TWI_CHK_WRITE_BUFFER_MASK]);
    10c6:	80 91 d3 01 	lds	r24, 0x01D3
    10ca:	ec 2f       	mov	r30, r28
    10cc:	ef 70       	andi	r30, 0x0F	; 15
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	e8 54       	subi	r30, 0x48	; 72
    10d2:	fe 4f       	sbci	r31, 0xFE	; 254
    10d4:	60 81       	ld	r22, Z
    10d6:	0e 94 d0 06 	call	0xda0	; 0xda0 <twi_registers_write>

        // Increment to the next address.
        ++twi_address;
    10da:	80 91 d3 01 	lds	r24, 0x01D3
    10de:	8f 5f       	subi	r24, 0xFF	; 255
    10e0:	80 93 d3 01 	sts	0x01D3, r24
#if TWI_CHECKED_ENABLED
static void twi_write_buffer(void)
// Write the recieve buffer to memory.
{
    // Loop over the data within the write buffer.
    for (twi_chk_count = 0; twi_chk_count < twi_chk_count_target; twi_chk_count++)
    10e4:	cf 5f       	subi	r28, 0xFF	; 255
    10e6:	c0 93 ca 01 	sts	0x01CA, r28
    10ea:	e9 cf       	rjmp	.-46     	; 0x10be <__vector_24+0x1d6>
        // Bus error due to an illegal START or STOP condition.
        case TWI_BUS_ERROR:

            // Only the internal hardware is affected, no STOP condition is sent on the bus.
            // In all cases, the bus is released and TWSTO is cleared.
            TWCR = (1<<TWEN) |                              // Keep the TWI interface enabled.
    10ec:	85 ed       	ldi	r24, 0xD5	; 213
    10ee:	03 c0       	rjmp	.+6      	; 0x10f6 <__vector_24+0x20e>

            // Write the data.
            if (twi_write_data(TWDR) == TWI_ACK)
            {
                // Next data byte will be received and ACK will be returned.
                TWCR = (1<<TWEN) |                          // Keep the TWI interface enabled.
    10f0:	85 ec       	ldi	r24, 0xC5	; 197
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <__vector_24+0x20e>
                       (0<<TWWC);                           //
            }
            else
            {
                // Next data byte will not be received and NACK will be returned.
                TWCR = (1<<TWEN) |                          // Keep the TWI interface enabled.
    10f4:	85 e8       	ldi	r24, 0x85	; 133
    10f6:	80 93 bc 00 	sts	0x00BC, r24
                   (1<<TWINT) |                                 // Clear the TWI interrupt.
                   (1<<TWEA) |                                  // Acknowledge the data.
                   (0<<TWWC);                                   //
            break;
    }
}
    10fa:	ff 91       	pop	r31
    10fc:	ef 91       	pop	r30
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	bf 91       	pop	r27
    1104:	af 91       	pop	r26
    1106:	9f 91       	pop	r25
    1108:	8f 91       	pop	r24
    110a:	7f 91       	pop	r23
    110c:	6f 91       	pop	r22
    110e:	5f 91       	pop	r21
    1110:	4f 91       	pop	r20
    1112:	3f 91       	pop	r19
    1114:	2f 91       	pop	r18
    1116:	0f 90       	pop	r0
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <delay_loop.constprop.0>:
                     //       This value of 20 gives a 5 microsecond delay and was chosen
                     //       by experiment with an "MG995".
inline static void delay_loop(int n)
{
    uint8_t i;
    for(i=0; i<n; i++)
    1120:	80 e0       	ldi	r24, 0x00	; 0
    {
        asm("nop");
    1122:	00 00       	nop
                     //       This value of 20 gives a 5 microsecond delay and was chosen
                     //       by experiment with an "MG995".
inline static void delay_loop(int n)
{
    uint8_t i;
    for(i=0; i<n; i++)
    1124:	8f 5f       	subi	r24, 0xFF	; 255
    1126:	84 31       	cpi	r24, 0x14	; 20
    1128:	e1 f7       	brne	.-8      	; 0x1122 <delay_loop.constprop.0+0x2>
    {
        asm("nop");
    }
}
    112a:	08 95       	ret

0000112c <pwm_registers_defaults>:
    // PWM frequency (500 kHz for 8MHz clock, 1250 kHz for 20MHz clock) by a
    // constant value to produce a PWM frequency suitable to drive a motor.  A
    // small motor with low inductance and impedance such as those found in an
    // RC servo will my typically use a divider value between 16 and 64.  A larger
    // motor with higher inductance and impedance may require a greater divider.
    banks_write_word(POS_PID_BANK, REG_PWM_FREQ_DIVIDER_HI, REG_PWM_FREQ_DIVIDER_LO, DEFAULT_PWM_FREQ_DIVIDER);
    112c:	29 ec       	ldi	r18, 0xC9	; 201
    112e:	3b ef       	ldi	r19, 0xFB	; 251
    1130:	4e e0       	ldi	r20, 0x0E	; 14
    1132:	6d e0       	ldi	r22, 0x0D	; 13
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <banks_write_word>
}

// Write a single byte to the banks.
inline static void banks_write_byte(uint8_t bank, uint8_t address, uint8_t value)
{
    banks[bank][address] = value;
    113a:	86 e4       	ldi	r24, 0x46	; 70
    113c:	80 93 ab 02 	sts	0x02AB, r24


// Write a single byte to the registers.
inline static void registers_write_byte(uint8_t address, uint8_t value)
{
    registers[address] = value;
    1140:	ec ef       	ldi	r30, 0xFC	; 252
    1142:	f1 e0       	ldi	r31, 0x01	; 1
inline static void pwm_brake_enable(void)
{
    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    // Enable Hardware brake
    registers_write_byte(REG_FLAGS_LO, flags_lo | (1<<FLAGS_LO_GENERALCALL_ENABLED));
    1144:	85 81       	ldd	r24, Z+5	; 0x05
    1146:	88 60       	ori	r24, 0x08	; 8
    1148:	85 83       	std	Z+5, r24	; 0x05
    114a:	08 95       	ret

0000114c <pwm_init>:
}


void pwm_init(void)
// Initialize the PWM module for controlling a DC motor.
{
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    // Initialize the pwm frequency divider value.
    pwm_div = banks_read_word(POS_PID_BANK, REG_PWM_FREQ_DIVIDER_HI, REG_PWM_FREQ_DIVIDER_LO);
    1158:	4e e0       	ldi	r20, 0x0E	; 14
    115a:	6d e0       	ldi	r22, 0x0D	; 13
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>
    1162:	90 93 d6 01 	sts	0x01D6, r25
    1166:	80 93 d5 01 	sts	0x01D5, r24
    pwm_max = banks_read_byte(CONFIG_BANK,  REG_PWM_MAX);
    116a:	80 91 ab 02 	lds	r24, 0x02AB
    116e:	80 93 d4 01 	sts	0x01D4, r24

    // Set EN_A (PWM_PIN_ENA) and EN_B (PWM_PIN_ENB) to low.
    PWM_CTL_PORT &= ~((1<<PWM_PIN_ENA) | (1<<PWM_PIN_ENB));
    1172:	8b b1       	in	r24, 0x0b	; 11
    1174:	83 7f       	andi	r24, 0xF3	; 243
    1176:	8b b9       	out	0x0b, r24	; 11

    // Set SMPLn_B (PWM_PIN_SMPLB) and SMPLn_A (PWM_PIN_SMPLA) to high.
    PWM_CTL_PORT |= ((1<<PWM_PIN_SMPLB) | (1<<PWM_PIN_SMPLA));
    1178:	8b b1       	in	r24, 0x0b	; 11
    117a:	80 69       	ori	r24, 0x90	; 144
    117c:	8b b9       	out	0x0b, r24	; 11

    // Enable PWM_PIN_ENA, PWM_PIN_ENB, PWM_PIN_SMPLB and PWM_PIN_SMPLA as outputs.
    PWM_CTL_DDR |= PWM_CRL_DDR_CONF;
    117e:	8a b1       	in	r24, 0x0a	; 10
    1180:	8c 69       	ori	r24, 0x9C	; 156
    1182:	8a b9       	out	0x0a, r24	; 10

    // Set PWM_A (PWM_DUTY_PWMA/OC1A) and PWM_B (PWM_DUTY_PWMB/OC1B) are low.
    PWM_DUTY_PORT &= ~((1<<PWM_DUTY_PWMA) | (1<<PWM_DUTY_PWMB));
    1184:	85 b1       	in	r24, 0x05	; 5
    1186:	89 7f       	andi	r24, 0xF9	; 249
    1188:	85 b9       	out	0x05, r24	; 5

    // Enable PWM_DUTY_PWMA/OC1A and PWM_DUTY_PWMB/OC1B as outputs.
    PWM_DUTY_DDR |= PWM_DUTY_DDR_CONF;
    118a:	84 b1       	in	r24, 0x04	; 4
    118c:	86 60       	ori	r24, 0x06	; 6
    118e:	84 b9       	out	0x04, r24	; 4

    // Reset the timer1 configuration.
    TCNT1 = 0;
    1190:	10 92 85 00 	sts	0x0085, r1
    1194:	10 92 84 00 	sts	0x0084, r1
    TCCR1A = 0;
    1198:	80 e8       	ldi	r24, 0x80	; 128
    119a:	e8 2e       	mov	r14, r24
    119c:	f1 2c       	mov	r15, r1
    119e:	f7 01       	movw	r30, r14
    11a0:	10 82       	st	Z, r1
    TCCR1B = 0;
    11a2:	01 e8       	ldi	r16, 0x81	; 129
    11a4:	10 e0       	ldi	r17, 0x00	; 0
    11a6:	f8 01       	movw	r30, r16
    11a8:	10 82       	st	Z, r1
    TCCR1C = 0;
    11aa:	10 92 82 00 	sts	0x0082, r1
    TIMSK1 = 0;
    11ae:	10 92 6f 00 	sts	0x006F, r1

    // Set timer top value.
    ICR1 = PWM_TOP_VALUE(pwm_div, pwm_max);
    11b2:	60 91 d5 01 	lds	r22, 0x01D5
    11b6:	70 91 d6 01 	lds	r23, 0x01D6
    11ba:	eb 01       	movw	r28, r22
    11bc:	94 e0       	ldi	r25, 0x04	; 4
    11be:	cc 0f       	add	r28, r28
    11c0:	dd 1f       	adc	r29, r29
    11c2:	9a 95       	dec	r25
    11c4:	e1 f7       	brne	.-8      	; 0x11be <pwm_init+0x72>
    11c6:	21 97       	sbiw	r28, 0x01	; 1
    11c8:	cb 01       	movw	r24, r22
    11ca:	a0 e0       	ldi	r26, 0x00	; 0
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	24 e0       	ldi	r18, 0x04	; 4
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	aa 1f       	adc	r26, r26
    11d6:	bb 1f       	adc	r27, r27
    11d8:	2a 95       	dec	r18
    11da:	d1 f7       	brne	.-12     	; 0x11d0 <pwm_init+0x84>
    11dc:	bc 01       	movw	r22, r24
    11de:	cd 01       	movw	r24, r26
    11e0:	61 50       	subi	r22, 0x01	; 1
    11e2:	71 09       	sbc	r23, r1
    11e4:	81 09       	sbc	r24, r1
    11e6:	91 09       	sbc	r25, r1
    11e8:	24 e6       	ldi	r18, 0x64	; 100
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__udivmodsi4>
    11f4:	80 91 d4 01 	lds	r24, 0x01D4
    11f8:	64 e6       	ldi	r22, 0x64	; 100
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	68 1b       	sub	r22, r24
    11fe:	71 09       	sbc	r23, r1
    1200:	62 9f       	mul	r22, r18
    1202:	c0 01       	movw	r24, r0
    1204:	63 9f       	mul	r22, r19
    1206:	90 0d       	add	r25, r0
    1208:	72 9f       	mul	r23, r18
    120a:	90 0d       	add	r25, r0
    120c:	11 24       	eor	r1, r1
    120e:	c8 0f       	add	r28, r24
    1210:	d9 1f       	adc	r29, r25
    1212:	d0 93 87 00 	sts	0x0087, r29
    1216:	c0 93 86 00 	sts	0x0086, r28

    // Set the PWM duty cycle to zero.
    OCR1A = 0;
    121a:	10 92 89 00 	sts	0x0089, r1
    121e:	10 92 88 00 	sts	0x0088, r1
    OCR1B = 0;
    1222:	10 92 8b 00 	sts	0x008B, r1
    1226:	10 92 8a 00 	sts	0x008A, r1

    // Configure timer 1 for PWM, Phase and Frequency Correct operation, but leave outputs disabled.
    TCCR1A = (0<<COM1A1) | (0<<COM1A0) |                    // Disable OC1A output.
    122a:	f7 01       	movw	r30, r14
    122c:	10 82       	st	Z, r1
             (0<<COM1B1) | (0<<COM1B0) |                    // Disable OC1B output.
             (0<<WGM11)  | (0<<WGM10);                      // PWM, Phase and Frequency Correct, TOP = ICR1
    TCCR1B = (0<<ICNC1)  | (0<<ICES1)  |                    // Input on ICP1 disabled.
    122e:	81 e1       	ldi	r24, 0x11	; 17
    1230:	f8 01       	movw	r30, r16
    1232:	80 83       	st	Z, r24
    1234:	ec ef       	ldi	r30, 0xFC	; 252
    1236:	f1 e0       	ldi	r31, 0x01	; 1
    1238:	16 86       	std	Z+14, r1	; 0x0e
    123a:	17 86       	std	Z+15, r1	; 0x0f
    123c:	85 81       	ldd	r24, Z+5	; 0x05
    123e:	88 60       	ori	r24, 0x08	; 8
    1240:	85 83       	std	Z+5, r24	; 0x05
    registers_write_byte(REG_PWM_DIRA, 0);
    registers_write_byte(REG_PWM_DIRB, 0);

    // Enable the H-Bridge brake by default.
    pwm_brake_enable();
}
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	08 95       	ret

00001250 <pwm_stop>:

void pwm_stop(void)
// Stop all PWM signals to the motor.
{
    // Disable interrupts.
    cli();
    1250:	f8 94       	cli

    // Are we moving in the A or B direction?
    if (pwm_a || pwm_b)
    1252:	80 91 d8 01 	lds	r24, 0x01D8
    1256:	81 11       	cpse	r24, r1
    1258:	04 c0       	rjmp	.+8      	; 0x1262 <pwm_stop+0x12>
    125a:	80 91 d7 01 	lds	r24, 0x01D7
    125e:	88 23       	and	r24, r24
    1260:	c1 f0       	breq	.+48     	; 0x1292 <pwm_stop+0x42>
    {
        // Make sure that SMPLn_B (PWM_PIN_SMPLB) and SMPLn_A (PWM_PIN_SMPLA) are held high.
        PWM_CTL_PORT |= ((1<<PWM_PIN_SMPLB) | (1<<PWM_PIN_SMPLA));
    1262:	8b b1       	in	r24, 0x0b	; 11
    1264:	80 69       	ori	r24, 0x90	; 144
    1266:	8b b9       	out	0x0b, r24	; 11

        // Disable PWM_A (PWM_DUTY_PWMA/OC1A) and PWM_B (PWM_DUTY_PWMB/OC1B) output.
        TCCR1A = 0;
    1268:	10 92 80 00 	sts	0x0080, r1

        // Make sure that PWM_A (PWM_DUTY_PWMA/OC1A) and PWM_B (PWM_DUTY_PWMB/OC1B) are held low.
        PWM_DUTY_PORT &= ~((1<<PWM_DUTY_PWMA) | (1<<PWM_DUTY_PWMB));
    126c:	85 b1       	in	r24, 0x05	; 5
    126e:	89 7f       	andi	r24, 0xF9	; 249
    1270:	85 b9       	out	0x05, r24	; 5

        // Before enabling braking (which turns on the "two lower MOSFETS"), introduce
        // sufficient delay to give the H-bridge time to respond to the change of state 
        // that has just been made.
        delay_loop(DELAYLOOP);
    1272:	0e 94 90 08 	call	0x1120	; 0x1120 <delay_loop.constprop.0>

        // Do we want to enable braking?
        if (registers_read_byte(REG_FLAGS_LO) & (1<<FLAGS_LO_PWM_BRAKE_ENABLED))
    1276:	80 91 01 02 	lds	r24, 0x0201
    127a:	86 ff       	sbrs	r24, 6
    127c:	03 c0       	rjmp	.+6      	; 0x1284 <pwm_stop+0x34>
        {
            // Hold EN_A (PWM_PIN_ENA) and EN_B (PWM_PIN_ENB) high.
            PWM_CTL_PORT |= ((1<<PWM_PIN_ENA) | (1<<PWM_PIN_ENB));
    127e:	8b b1       	in	r24, 0x0b	; 11
    1280:	8c 60       	ori	r24, 0x0C	; 12
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <pwm_stop+0x38>
        }
        else
        {
            // Hold EN_A (PWM_PIN_ENA) and EN_B (PWM_PIN_ENB) low.
            PWM_CTL_PORT &= ~((1<<PWM_PIN_ENA) | (1<<PWM_PIN_ENB));
    1284:	8b b1       	in	r24, 0x0b	; 11
    1286:	83 7f       	andi	r24, 0xF3	; 243
    1288:	8b b9       	out	0x0b, r24	; 11
        }

        // Reset the A and B direction flags.
        pwm_a = 0;
    128a:	10 92 d8 01 	sts	0x01D8, r1
        pwm_b = 0;
    128e:	10 92 d7 01 	sts	0x01D7, r1
    }

    // Set the PWM duty cycle to zero.
    OCR1A = 0;
    1292:	10 92 89 00 	sts	0x0089, r1
    1296:	10 92 88 00 	sts	0x0088, r1
    OCR1B = 0;
    129a:	10 92 8b 00 	sts	0x008B, r1
    129e:	10 92 8a 00 	sts	0x008A, r1

    // Restore interrupts.
    sei();
    12a2:	78 94       	sei
    12a4:	80 91 d8 01 	lds	r24, 0x01D8
    12a8:	80 93 0a 02 	sts	0x020A, r24
    12ac:	80 91 d7 01 	lds	r24, 0x01D7
    12b0:	80 93 0b 02 	sts	0x020B, r24
    12b4:	08 95       	ret

000012b6 <pwm_update>:
// a signed integer in the range of -255 to -1 for clockwise movement,
// 1 to 255 for counter-clockwise movement or zero to stop all movement.
// This function provides a sanity check against the servo position and
// will prevent the servo from being driven past a minimum and maximum
// position.
{
    12b6:	af 92       	push	r10
    12b8:	bf 92       	push	r11
    12ba:	df 92       	push	r13
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <pwm_update+0x14>
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <pwm_update+0x16>
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	8c 01       	movw	r16, r24
    12d2:	5b 01       	movw	r10, r22
    // Quick check to see if the frequency divider changed.  If so we need to
    // configure a new top value for timer/counter1.  This value should only
    // change infrequently so we aren't too elegant in how we handle updating
    // the value.  However, we need to be careful that we don't configure the
    // top to a value lower than the counter and compare values.
    if ((banks_read_word(POS_PID_BANK, REG_PWM_FREQ_DIVIDER_HI, REG_PWM_FREQ_DIVIDER_LO) != pwm_div) ||
    12d4:	4e e0       	ldi	r20, 0x0E	; 14
    12d6:	6d e0       	ldi	r22, 0x0D	; 13
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>
    12de:	20 91 d5 01 	lds	r18, 0x01D5
    12e2:	30 91 d6 01 	lds	r19, 0x01D6
    12e6:	82 17       	cp	r24, r18
    12e8:	93 07       	cpc	r25, r19
    12ea:	39 f4       	brne	.+14     	; 0x12fa <pwm_update+0x44>
    12ec:	90 91 ab 02 	lds	r25, 0x02AB
    12f0:	80 91 d4 01 	lds	r24, 0x01D4
    12f4:	98 17       	cp	r25, r24
    12f6:	09 f4       	brne	.+2      	; 0x12fa <pwm_update+0x44>
    12f8:	5f c0       	rjmp	.+190    	; 0x13b8 <pwm_update+0x102>
       (banks_read_byte(POS_PID_BANK, REG_PWM_MAX) != pwm_max))
    {

        // Hold EN_A (PWM_PIN_ENA) and EN_B (PWM_PIN_ENB) low.
        PWM_CTL_PORT &= ~((1<<PWM_PIN_ENA) | (1<<PWM_PIN_ENB));
    12fa:	8b b1       	in	r24, 0x0b	; 11
    12fc:	83 7f       	andi	r24, 0xF3	; 243
    12fe:	8b b9       	out	0x0b, r24	; 11
        // voltage, etc.
        //
        // Experiments (with an "MG995") have shown that 5microseconds should be sufficient
        // for most purposes.
        //
        delay_loop(DELAYLOOP);
    1300:	0e 94 90 08 	call	0x1120	; 0x1120 <delay_loop.constprop.0>

        // Make sure that PWM_A (PWM_DUTY_PWMA/OC1A) and PWM_B (PWM_DUTY_PWMB/OC1B) are held low.
        PWM_DUTY_PORT &= ~((1<<PWM_DUTY_PWMA) | (1<<PWM_DUTY_PWMB));
    1304:	85 b1       	in	r24, 0x05	; 5
    1306:	89 7f       	andi	r24, 0xF9	; 249
    1308:	85 b9       	out	0x05, r24	; 5

        // Disable OC1A and OC1B outputs.
        TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0));
    130a:	80 91 80 00 	lds	r24, 0x0080
    130e:	8f 73       	andi	r24, 0x3F	; 63
    1310:	80 93 80 00 	sts	0x0080, r24
        TCCR1A &= ~((1<<COM1B1) | (1<<COM1B0));
    1314:	80 91 80 00 	lds	r24, 0x0080
    1318:	8f 7c       	andi	r24, 0xCF	; 207
    131a:	80 93 80 00 	sts	0x0080, r24

        // Reset the A and B direction flags.
        pwm_a = 0;
    131e:	10 92 d8 01 	sts	0x01D8, r1
        pwm_b = 0;
    1322:	10 92 d7 01 	sts	0x01D7, r1

        // Update the pwm frequency divider value.
        pwm_div = banks_read_word(POS_PID_BANK, REG_PWM_FREQ_DIVIDER_HI, REG_PWM_FREQ_DIVIDER_LO);
    1326:	4e e0       	ldi	r20, 0x0E	; 14
    1328:	6d e0       	ldi	r22, 0x0D	; 13
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>
    1330:	90 93 d6 01 	sts	0x01D6, r25
    1334:	80 93 d5 01 	sts	0x01D5, r24
}

// Read a single byte from the banks.
inline static uint8_t banks_read_byte(uint8_t bank, uint8_t address)
{
    return banks[bank][address];
    1338:	d0 90 ab 02 	lds	r13, 0x02AB
        pwm_max = banks_read_byte(POS_PID_BANK, REG_PWM_MAX);
    133c:	d0 92 d4 01 	sts	0x01D4, r13

        // Update the timer top value.
        ICR1 = PWM_TOP_VALUE(pwm_div, pwm_max);
    1340:	7c 01       	movw	r14, r24
    1342:	44 e0       	ldi	r20, 0x04	; 4
    1344:	ee 0c       	add	r14, r14
    1346:	ff 1c       	adc	r15, r15
    1348:	4a 95       	dec	r20
    134a:	e1 f7       	brne	.-8      	; 0x1344 <pwm_update+0x8e>
    134c:	21 e0       	ldi	r18, 0x01	; 1
    134e:	e2 1a       	sub	r14, r18
    1350:	f1 08       	sbc	r15, r1
    1352:	a0 e0       	ldi	r26, 0x00	; 0
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	54 e0       	ldi	r21, 0x04	; 4
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	aa 1f       	adc	r26, r26
    135e:	bb 1f       	adc	r27, r27
    1360:	5a 95       	dec	r21
    1362:	d1 f7       	brne	.-12     	; 0x1358 <pwm_update+0xa2>
    1364:	bc 01       	movw	r22, r24
    1366:	cd 01       	movw	r24, r26
    1368:	61 50       	subi	r22, 0x01	; 1
    136a:	71 09       	sbc	r23, r1
    136c:	81 09       	sbc	r24, r1
    136e:	91 09       	sbc	r25, r1
    1370:	24 e6       	ldi	r18, 0x64	; 100
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__udivmodsi4>
    137c:	84 e6       	ldi	r24, 0x64	; 100
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	bc 01       	movw	r22, r24
    1382:	6d 19       	sub	r22, r13
    1384:	71 09       	sbc	r23, r1
    1386:	62 9f       	mul	r22, r18
    1388:	c0 01       	movw	r24, r0
    138a:	63 9f       	mul	r22, r19
    138c:	90 0d       	add	r25, r0
    138e:	72 9f       	mul	r23, r18
    1390:	90 0d       	add	r25, r0
    1392:	11 24       	eor	r1, r1
    1394:	e8 0e       	add	r14, r24
    1396:	f9 1e       	adc	r15, r25
    1398:	f0 92 87 00 	sts	0x0087, r15
    139c:	e0 92 86 00 	sts	0x0086, r14

        // Reset the counter and compare values to prevent problems with the new top value.
        TCNT1 = 0;
    13a0:	10 92 85 00 	sts	0x0085, r1
    13a4:	10 92 84 00 	sts	0x0084, r1
        OCR1A = 0;
    13a8:	10 92 89 00 	sts	0x0089, r1
    13ac:	10 92 88 00 	sts	0x0088, r1
        OCR1B = 0;
    13b0:	10 92 8b 00 	sts	0x008B, r1
    13b4:	10 92 8a 00 	sts	0x008A, r1
    }

    // Are we reversing the seek sense?
    if (banks_read_byte(POS_PID_BANK, REG_REVERSE_SEEK) != 0)
    13b8:	80 91 a8 02 	lds	r24, 0x02A8
    13bc:	88 23       	and	r24, r24
    13be:	11 f1       	breq	.+68     	; 0x1404 <pwm_update+0x14e>
    {
        // Yes. Swap the minimum and maximum position.

        // Get the minimum and maximum seek position.
        min_position = banks_read_word(POS_PID_BANK, REG_MAX_SEEK_HI, REG_MAX_SEEK_LO);
    13c0:	4b e0       	ldi	r20, 0x0B	; 11
    13c2:	6a e0       	ldi	r22, 0x0A	; 10
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>
    13ca:	7c 01       	movw	r14, r24
        max_position = banks_read_word(POS_PID_BANK, REG_MIN_SEEK_HI, REG_MIN_SEEK_LO);
    13cc:	49 e0       	ldi	r20, 0x09	; 9
    13ce:	68 e0       	ldi	r22, 0x08	; 8
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>
    13d6:	a7 01       	movw	r20, r14
    13d8:	e1 14       	cp	r14, r1
    13da:	24 e0       	ldi	r18, 0x04	; 4
    13dc:	f2 06       	cpc	r15, r18
    13de:	10 f0       	brcs	.+4      	; 0x13e4 <pwm_update+0x12e>
    13e0:	4f ef       	ldi	r20, 0xFF	; 255
    13e2:	53 e0       	ldi	r21, 0x03	; 3
    13e4:	bc 01       	movw	r22, r24
    13e6:	61 15       	cp	r22, r1
    13e8:	84 e0       	ldi	r24, 0x04	; 4
    13ea:	78 07       	cpc	r23, r24
    13ec:	10 f0       	brcs	.+4      	; 0x13f2 <pwm_update+0x13c>
    13ee:	6f ef       	ldi	r22, 0xFF	; 255
    13f0:	73 e0       	ldi	r23, 0x03	; 3
        // Make sure these values are sane 10-bit values.
        if (min_position > 0x3ff) min_position = 0x3ff;
        if (max_position > 0x3ff) max_position = 0x3ff;

        // Adjust the values because of the reverse sense.
        min_position = 0x3ff - min_position;
    13f2:	2f ef       	ldi	r18, 0xFF	; 255
    13f4:	33 e0       	ldi	r19, 0x03	; 3
    13f6:	c9 01       	movw	r24, r18
    13f8:	84 1b       	sub	r24, r20
    13fa:	95 0b       	sbc	r25, r21
    13fc:	ac 01       	movw	r20, r24
        max_position = 0x3ff - max_position;
    13fe:	26 1b       	sub	r18, r22
    1400:	37 0b       	sbc	r19, r23
    1402:	19 c0       	rjmp	.+50     	; 0x1436 <pwm_update+0x180>
    else
    {
        // No. Use the minimum and maximum position as is.

        // Get the minimum and maximum seek position.
        min_position = banks_read_word(POS_PID_BANK, REG_MIN_SEEK_HI, REG_MIN_SEEK_LO);
    1404:	49 e0       	ldi	r20, 0x09	; 9
    1406:	68 e0       	ldi	r22, 0x08	; 8
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>
    140e:	7c 01       	movw	r14, r24
        max_position = banks_read_word(POS_PID_BANK, REG_MAX_SEEK_HI, REG_MAX_SEEK_LO);
    1410:	4b e0       	ldi	r20, 0x0B	; 11
    1412:	6a e0       	ldi	r22, 0x0A	; 10
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>
    141a:	a7 01       	movw	r20, r14
    141c:	e1 14       	cp	r14, r1
    141e:	24 e0       	ldi	r18, 0x04	; 4
    1420:	f2 06       	cpc	r15, r18
    1422:	10 f0       	brcs	.+4      	; 0x1428 <pwm_update+0x172>
    1424:	4f ef       	ldi	r20, 0xFF	; 255
    1426:	53 e0       	ldi	r21, 0x03	; 3
    1428:	9c 01       	movw	r18, r24
    142a:	21 15       	cp	r18, r1
    142c:	84 e0       	ldi	r24, 0x04	; 4
    142e:	38 07       	cpc	r19, r24
    1430:	10 f0       	brcs	.+4      	; 0x1436 <pwm_update+0x180>
    1432:	2f ef       	ldi	r18, 0xFF	; 255
    1434:	33 e0       	ldi	r19, 0x03	; 3
        if (min_position > 0x3ff) min_position = 0x3ff;
        if (max_position > 0x3ff) max_position = 0x3ff;
    }

    // Disable clockwise movements when position is below the minimum position.
    if ((position < min_position) && (pwm < 0)) pwm = 0;
    1436:	04 17       	cp	r16, r20
    1438:	15 07       	cpc	r17, r21
    143a:	10 f4       	brcc	.+4      	; 0x1440 <pwm_update+0x18a>
    143c:	b7 fc       	sbrc	r11, 7
    143e:	06 c0       	rjmp	.+12     	; 0x144c <pwm_update+0x196>

    // Disable counter-clockwise movements when position is above the maximum position.
    if ((position > max_position) && (pwm > 0)) pwm = 0;
    1440:	20 17       	cp	r18, r16
    1442:	31 07       	cpc	r19, r17
    1444:	28 f4       	brcc	.+10     	; 0x1450 <pwm_update+0x19a>
    1446:	1a 14       	cp	r1, r10
    1448:	1b 04       	cpc	r1, r11
    144a:	14 f4       	brge	.+4      	; 0x1450 <pwm_update+0x19a>
    144c:	a1 2c       	mov	r10, r1
    144e:	b1 2c       	mov	r11, r1

    // Determine if PWM is disabled in the registers.
    if (!(registers_read_byte(REG_FLAGS_LO) & (1<<FLAGS_LO_PWM_ENABLED))) pwm = 0;
    1450:	80 91 01 02 	lds	r24, 0x0201
    1454:	80 ff       	sbrs	r24, 0
    1456:	ab c0       	rjmp	.+342    	; 0x15ae <pwm_update+0x2f8>

    // Determine direction of servo movement or stop.
    if (pwm < 0)
    1458:	b7 fe       	sbrs	r11, 7
    145a:	49 c0       	rjmp	.+146    	; 0x14ee <pwm_update+0x238>
    {
        // Less than zero. Turn clockwise.

        // Get the PWM width from the PWM value.
        pwm_width = (uint8_t) -pwm;
    145c:	1a 2d       	mov	r17, r10
    145e:	11 95       	neg	r17
static void pwm_dir_a(uint8_t pwm_duty)
// Send PWM signal for rotation with the indicated pwm ratio (0 - 255).
// This function is meant to be called only by pwm_update.
{
    // Determine the duty cycle value for the timer.
    uint16_t duty_cycle = PWM_OCRN_VALUE(pwm_div, pwm_duty);
    1460:	20 91 d5 01 	lds	r18, 0x01D5
    1464:	30 91 d6 01 	lds	r19, 0x01D6
    1468:	c9 01       	movw	r24, r18
    146a:	a0 e0       	ldi	r26, 0x00	; 0
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	34 e0       	ldi	r19, 0x04	; 4
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	aa 1f       	adc	r26, r26
    1476:	bb 1f       	adc	r27, r27
    1478:	3a 95       	dec	r19
    147a:	d1 f7       	brne	.-12     	; 0x1470 <pwm_update+0x1ba>
    147c:	9c 01       	movw	r18, r24
    147e:	ad 01       	movw	r20, r26
    1480:	21 50       	subi	r18, 0x01	; 1
    1482:	31 09       	sbc	r19, r1
    1484:	41 09       	sbc	r20, r1
    1486:	51 09       	sbc	r21, r1
    1488:	a1 2f       	mov	r26, r17
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	0e 94 a8 10 	call	0x2150	; 0x2150 <__muluhisi3>
    1490:	2f ef       	ldi	r18, 0xFF	; 255
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__udivmodsi4>

    // Disable interrupts.
    cli();
    149c:	f8 94       	cli

    // Do we need to reconfigure PWM output for direction A?
    if (!pwm_a)
    149e:	80 91 d8 01 	lds	r24, 0x01D8
    14a2:	81 11       	cpse	r24, r1
    14a4:	19 c0       	rjmp	.+50     	; 0x14d8 <pwm_update+0x222>
    { // Yes...

        // Set SMPLn_B (PWM_PIN_SMPLB) and SMPLn_A (PWM_PIN_SMPLA) to high.
        PWM_CTL_PORT |= ((1<<PWM_PIN_SMPLB) | (1<<PWM_PIN_SMPLA));
    14a6:	8b b1       	in	r24, 0x0b	; 11
    14a8:	80 69       	ori	r24, 0x90	; 144
    14aa:	8b b9       	out	0x0b, r24	; 11

        // Set EN_B (PWM_PIN_ENB) to low.
        PWM_CTL_PORT &= ~(1<<PWM_PIN_ENB);
    14ac:	5b 98       	cbi	0x0b, 3	; 11

        // Disable PWM_A (PWM_DUTY_PWMA/OC1A) and PWM_B (PWM_DUTY_PWMB/OC1B) output.
        // NOTE: Actually PWM_A should already be disabled...
        TCCR1A = 0;
    14ae:	10 92 80 00 	sts	0x0080, r1

        // Make sure PWM_A (PWM_DUTY_PWMA/OC1A) and PWM_B (PWM_DUTY_PWMB/OC1B) are low.
        PWM_DUTY_PORT &= ~((1<<PWM_DUTY_PWMA) | (1<<PWM_DUTY_PWMB));
    14b2:	85 b1       	in	r24, 0x05	; 5
    14b4:	89 7f       	andi	r24, 0xF9	; 249
    14b6:	85 b9       	out	0x05, r24	; 5
        // voltage, etc.
        //
        // Experiments (with an "MG995") have shown that 5microseconds should be sufficient
        // for most purposes.
        //
        delay_loop(DELAYLOOP);
    14b8:	29 83       	std	Y+1, r18	; 0x01
    14ba:	3a 83       	std	Y+2, r19	; 0x02
    14bc:	4b 83       	std	Y+3, r20	; 0x03
    14be:	5c 83       	std	Y+4, r21	; 0x04
    14c0:	0e 94 90 08 	call	0x1120	; 0x1120 <delay_loop.constprop.0>

        // Enable PWM_A (PWM_DUTY_PWMA/OC1A)  output.
        TCCR1A |= (1<<COM1A1);
    14c4:	80 91 80 00 	lds	r24, 0x0080
    14c8:	80 68       	ori	r24, 0x80	; 128
    14ca:	80 93 80 00 	sts	0x0080, r24

        // Set EN_A (PWM_PIN_ENA) to high.
        PWM_CTL_PORT |= (1<<PWM_PIN_ENA);
    14ce:	5a 9a       	sbi	0x0b, 2	; 11

        // NOTE: The PWM driven state of the H-bridge should not be switched to b-mode or braking
        //       without a suffient delay.

        // Reset the B direction flag.
        pwm_b = 0;
    14d0:	10 92 d7 01 	sts	0x01D7, r1
    14d4:	3a 81       	ldd	r19, Y+2	; 0x02
    14d6:	29 81       	ldd	r18, Y+1	; 0x01
    }

    // Update the A direction flag.  A non-zero value keeps us from
    // recofiguring the PWM output A when it is already configured.
    pwm_a = pwm_duty;
    14d8:	10 93 d8 01 	sts	0x01D8, r17

    // Update the PWM duty cycle.
    OCR1A = duty_cycle;
    14dc:	30 93 89 00 	sts	0x0089, r19
    14e0:	20 93 88 00 	sts	0x0088, r18
    OCR1B = 0;
    14e4:	10 92 8b 00 	sts	0x008B, r1
    14e8:	10 92 8a 00 	sts	0x008A, r1
    14ec:	49 c0       	rjmp	.+146    	; 0x1580 <pwm_update+0x2ca>
        pwm_dir_b(pwm_width);
#else
        pwm_dir_a(pwm_width);
#endif
    }
    else if (pwm > 0)
    14ee:	a1 14       	cp	r10, r1
    14f0:	b1 04       	cpc	r11, r1
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <pwm_update+0x240>
    14f4:	5c c0       	rjmp	.+184    	; 0x15ae <pwm_update+0x2f8>
    {
        // More than zero. Turn counter-clockwise.

        // Get the PWM width from the PWM value.
        pwm_width = (uint8_t) pwm;
    14f6:	1a 2d       	mov	r17, r10
static void pwm_dir_b(uint8_t pwm_duty)
// Send PWM signal for rotation with the indicated pwm ratio (0 - 255).
// This function is meant to be called only by pwm_update.
{
    // Determine the duty cycle value for the timer.
    uint16_t duty_cycle = PWM_OCRN_VALUE(pwm_div, pwm_duty);
    14f8:	20 91 d5 01 	lds	r18, 0x01D5
    14fc:	30 91 d6 01 	lds	r19, 0x01D6
    1500:	c9 01       	movw	r24, r18
    1502:	a0 e0       	ldi	r26, 0x00	; 0
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	24 e0       	ldi	r18, 0x04	; 4
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	aa 1f       	adc	r26, r26
    150e:	bb 1f       	adc	r27, r27
    1510:	2a 95       	dec	r18
    1512:	d1 f7       	brne	.-12     	; 0x1508 <pwm_update+0x252>
    1514:	9c 01       	movw	r18, r24
    1516:	ad 01       	movw	r20, r26
    1518:	21 50       	subi	r18, 0x01	; 1
    151a:	31 09       	sbc	r19, r1
    151c:	41 09       	sbc	r20, r1
    151e:	51 09       	sbc	r21, r1
    1520:	aa 2d       	mov	r26, r10
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	0e 94 a8 10 	call	0x2150	; 0x2150 <__muluhisi3>
    1528:	2f ef       	ldi	r18, 0xFF	; 255
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__udivmodsi4>

    // Disable interrupts.
    cli();
    1534:	f8 94       	cli

    // Do we need to reconfigure PWM output for direction B?
    if (!pwm_b)
    1536:	80 91 d7 01 	lds	r24, 0x01D7
    153a:	81 11       	cpse	r24, r1
    153c:	17 c0       	rjmp	.+46     	; 0x156c <pwm_update+0x2b6>
    { // Yes...

        // Set SMPLn_B (PWM_PIN_SMPLB) and SMPLn_A (PWM_PIN_SMPLA) to high.
        PWM_CTL_PORT |= ((1<<PWM_PIN_SMPLB) | (1<<PWM_PIN_SMPLA));
    153e:	8b b1       	in	r24, 0x0b	; 11
    1540:	80 69       	ori	r24, 0x90	; 144
    1542:	8b b9       	out	0x0b, r24	; 11

        // Set EN_A (PWM_PIN_ENA) to low.
        PWM_CTL_PORT &= ~(1<<PWM_PIN_ENA);
    1544:	5a 98       	cbi	0x0b, 2	; 11

        // Disable PWM_A (PWM_DUTY_PWMA/OC1A) and PWM_B (PWM_DUTY_PWMB/OC1B) output.
        // NOTE: Actually PWM_B should already be disabled...
        TCCR1A = 0;
    1546:	10 92 80 00 	sts	0x0080, r1

        // Make sure PWM_A (PWM_DUTY_PWMA/OC1A) and PWM_B (PWM_DUTY_PWMB/OC1B) are low.
        PWM_DUTY_PORT &= ~((1<<PWM_DUTY_PWMA) | (1<<PWM_DUTY_PWMB));
    154a:	85 b1       	in	r24, 0x05	; 5
    154c:	89 7f       	andi	r24, 0xF9	; 249
    154e:	85 b9       	out	0x05, r24	; 5
        // voltage, etc.
        //
        // Experiments (with an "MG995") have shown that 5microseconds should be sufficient
        // for most purposes.
        //
        delay_loop(DELAYLOOP);
    1550:	29 83       	std	Y+1, r18	; 0x01
    1552:	3a 83       	std	Y+2, r19	; 0x02
    1554:	4b 83       	std	Y+3, r20	; 0x03
    1556:	5c 83       	std	Y+4, r21	; 0x04
    1558:	0e 94 90 08 	call	0x1120	; 0x1120 <delay_loop.constprop.0>

        // Enable PWM_B (PWM_DUTY_PWMB/OC1B) output.
        TCCR1A = (1<<COM1B1);
    155c:	80 e2       	ldi	r24, 0x20	; 32
    155e:	80 93 80 00 	sts	0x0080, r24

        // Set EN_B (PWM_PIN_ENB) to high.
        PWM_CTL_PORT |= (1<<PWM_PIN_ENB);
    1562:	5b 9a       	sbi	0x0b, 3	; 11

        // NOTE: The PWM driven state of the H-bridge should not be switched to a-mode or braking
        //       without a suffient delay.

        // Reset the A direction flag.
        pwm_a = 0;
    1564:	10 92 d8 01 	sts	0x01D8, r1
    1568:	3a 81       	ldd	r19, Y+2	; 0x02
    156a:	29 81       	ldd	r18, Y+1	; 0x01
    }

    // Update the B direction flag.  A non-zero value keeps us from
    // recofiguring the PWM output B when it is already configured.
    pwm_b = pwm_duty;
    156c:	10 93 d7 01 	sts	0x01D7, r17

    // Update the PWM duty cycle.
    OCR1A = 0;
    1570:	10 92 89 00 	sts	0x0089, r1
    1574:	10 92 88 00 	sts	0x0088, r1
    OCR1B = duty_cycle;
    1578:	30 93 8b 00 	sts	0x008B, r19
    157c:	20 93 8a 00 	sts	0x008A, r18

    // Restore interrupts.
    sei();
    1580:	78 94       	sei
    1582:	80 91 d8 01 	lds	r24, 0x01D8
    1586:	80 93 0a 02 	sts	0x020A, r24
    158a:	80 91 d7 01 	lds	r24, 0x01D7
    158e:	80 93 0b 02 	sts	0x020B, r24
    else
    {
        // Stop all PWM activity to the motor.
        pwm_stop();
    }
}
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	1f 91       	pop	r17
    15a0:	0f 91       	pop	r16
    15a2:	ff 90       	pop	r15
    15a4:	ef 90       	pop	r14
    15a6:	df 90       	pop	r13
    15a8:	bf 90       	pop	r11
    15aa:	af 90       	pop	r10
    15ac:	08 95       	ret
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	df 90       	pop	r13
    15c4:	bf 90       	pop	r11
    15c6:	af 90       	pop	r10

    }
    else
    {
        // Stop all PWM activity to the motor.
        pwm_stop();
    15c8:	0c 94 28 09 	jmp	0x1250	; 0x1250 <pwm_stop>

000015cc <curve_init>:
static float curve_b;
static float curve_c;
static float curve_d;

void curve_init(uint16_t t0, uint16_t t1, float p0, float p1, float v0, float v1)
{
    15cc:	4f 92       	push	r4
    15ce:	5f 92       	push	r5
    15d0:	6f 92       	push	r6
    15d2:	7f 92       	push	r7
    15d4:	8f 92       	push	r8
    15d6:	9f 92       	push	r9
    15d8:	af 92       	push	r10
    15da:	bf 92       	push	r11
    15dc:	cf 92       	push	r12
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	28 97       	sbiw	r28, 0x08	; 8
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	29 01       	movw	r4, r18
    15fe:	3a 01       	movw	r6, r20
    1600:	ed 82       	std	Y+5, r14	; 0x05
    1602:	fe 82       	std	Y+6, r15	; 0x06
    1604:	0f 83       	std	Y+7, r16	; 0x07
    1606:	18 87       	std	Y+8, r17	; 0x08
    // Set the time parameters.
    curve_t0 = t0;
    1608:	90 93 59 02 	sts	0x0259, r25
    160c:	80 93 58 02 	sts	0x0258, r24
    curve_t1 = t1;
    1610:	70 93 4b 02 	sts	0x024B, r23
    1614:	60 93 4a 02 	sts	0x024A, r22
    curve_duration = t1 - t0;
    1618:	68 1b       	sub	r22, r24
    161a:	79 0b       	sbc	r23, r25
    161c:	70 93 5b 02 	sts	0x025B, r23
    1620:	60 93 5a 02 	sts	0x025A, r22
    curve_duration_float = (float) curve_duration;
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__floatunsisf>
    162c:	69 83       	std	Y+1, r22	; 0x01
    162e:	7a 83       	std	Y+2, r23	; 0x02
    1630:	8b 83       	std	Y+3, r24	; 0x03
    1632:	9c 83       	std	Y+4, r25	; 0x04
    1634:	60 93 e9 01 	sts	0x01E9, r22
    1638:	70 93 ea 01 	sts	0x01EA, r23
    163c:	80 93 eb 01 	sts	0x01EB, r24
    1640:	90 93 ec 01 	sts	0x01EC, r25

    // The tangents are expressed as slope of value/time.  The time span will
    // be normalized to 0.0 to 1.0 range so correct the tangents by scaling
    // them by the duration of the curve.
    v0 *= curve_duration_float;
    1644:	9b 01       	movw	r18, r22
    1646:	ac 01       	movw	r20, r24
    1648:	c6 01       	movw	r24, r12
    164a:	b5 01       	movw	r22, r10
    164c:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>
    1650:	6b 01       	movw	r12, r22
    1652:	7c 01       	movw	r14, r24
    v1 *= curve_duration_float;
    1654:	29 81       	ldd	r18, Y+1	; 0x01
    1656:	3a 81       	ldd	r19, Y+2	; 0x02
    1658:	4b 81       	ldd	r20, Y+3	; 0x03
    165a:	5c 81       	ldd	r21, Y+4	; 0x04
    165c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    165e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1660:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1662:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1664:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>
    1668:	69 83       	std	Y+1, r22	; 0x01
    166a:	7a 83       	std	Y+2, r23	; 0x02
    166c:	8b 83       	std	Y+3, r24	; 0x03
    166e:	9c 83       	std	Y+4, r25	; 0x04

    // Set the curve parameters.
    curve_p0 = p0;
    1670:	40 92 46 02 	sts	0x0246, r4
    1674:	50 92 47 02 	sts	0x0247, r5
    1678:	60 92 48 02 	sts	0x0248, r6
    167c:	70 92 49 02 	sts	0x0249, r7
    curve_p1 = p1;
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	af 81       	ldd	r26, Y+7	; 0x07
    1686:	b8 85       	ldd	r27, Y+8	; 0x08
    1688:	80 93 50 02 	sts	0x0250, r24
    168c:	90 93 51 02 	sts	0x0251, r25
    1690:	a0 93 52 02 	sts	0x0252, r26
    1694:	b0 93 53 02 	sts	0x0253, r27
    curve_v0 = v0;
    1698:	c0 92 54 02 	sts	0x0254, r12
    169c:	d0 92 55 02 	sts	0x0255, r13
    16a0:	e0 92 56 02 	sts	0x0256, r14
    16a4:	f0 92 57 02 	sts	0x0257, r15
    curve_v1 = v1;
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	9a 81       	ldd	r25, Y+2	; 0x02
    16ac:	ab 81       	ldd	r26, Y+3	; 0x03
    16ae:	bc 81       	ldd	r27, Y+4	; 0x04
    16b0:	80 93 4c 02 	sts	0x024C, r24
    16b4:	90 93 4d 02 	sts	0x024D, r25
    16b8:	a0 93 4e 02 	sts	0x024E, r26
    16bc:	b0 93 4f 02 	sts	0x024F, r27
    // a = 2p0 - 2p1 + v0 + v1
    // b = -3p0 + 3p1 -2v0 - v1
    // c = v0
    // d = p0
    //
    curve_a = (2.0 * p0) - (2.0 * p1) + v0 + v1;
    16c0:	a3 01       	movw	r20, r6
    16c2:	92 01       	movw	r18, r4
    16c4:	c3 01       	movw	r24, r6
    16c6:	b2 01       	movw	r22, r4
    16c8:	0e 94 c3 10 	call	0x2186	; 0x2186 <__addsf3>
    16cc:	4b 01       	movw	r8, r22
    16ce:	5c 01       	movw	r10, r24
    16d0:	2d 81       	ldd	r18, Y+5	; 0x05
    16d2:	3e 81       	ldd	r19, Y+6	; 0x06
    16d4:	4f 81       	ldd	r20, Y+7	; 0x07
    16d6:	58 85       	ldd	r21, Y+8	; 0x08
    16d8:	ca 01       	movw	r24, r20
    16da:	b9 01       	movw	r22, r18
    16dc:	0e 94 c3 10 	call	0x2186	; 0x2186 <__addsf3>
    16e0:	9b 01       	movw	r18, r22
    16e2:	ac 01       	movw	r20, r24
    16e4:	c5 01       	movw	r24, r10
    16e6:	b4 01       	movw	r22, r8
    16e8:	0e 94 c2 10 	call	0x2184	; 0x2184 <__subsf3>
    16ec:	a7 01       	movw	r20, r14
    16ee:	96 01       	movw	r18, r12
    16f0:	0e 94 c3 10 	call	0x2186	; 0x2186 <__addsf3>
    16f4:	29 81       	ldd	r18, Y+1	; 0x01
    16f6:	3a 81       	ldd	r19, Y+2	; 0x02
    16f8:	4b 81       	ldd	r20, Y+3	; 0x03
    16fa:	5c 81       	ldd	r21, Y+4	; 0x04
    16fc:	0e 94 c3 10 	call	0x2186	; 0x2186 <__addsf3>
    1700:	60 93 e5 01 	sts	0x01E5, r22
    1704:	70 93 e6 01 	sts	0x01E6, r23
    1708:	80 93 e7 01 	sts	0x01E7, r24
    170c:	90 93 e8 01 	sts	0x01E8, r25
    curve_b = -(3.0 * p0) + (3.0 * p1) - (2.0 * v0) - v1;
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e4       	ldi	r20, 0x40	; 64
    1716:	50 e4       	ldi	r21, 0x40	; 64
    1718:	6d 81       	ldd	r22, Y+5	; 0x05
    171a:	7e 81       	ldd	r23, Y+6	; 0x06
    171c:	8f 81       	ldd	r24, Y+7	; 0x07
    171e:	98 85       	ldd	r25, Y+8	; 0x08
    1720:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>
    1724:	4b 01       	movw	r8, r22
    1726:	5c 01       	movw	r10, r24
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e4       	ldi	r20, 0x40	; 64
    172e:	50 e4       	ldi	r21, 0x40	; 64
    1730:	c3 01       	movw	r24, r6
    1732:	b2 01       	movw	r22, r4
    1734:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>
    1738:	9b 01       	movw	r18, r22
    173a:	ac 01       	movw	r20, r24
    173c:	c5 01       	movw	r24, r10
    173e:	b4 01       	movw	r22, r8
    1740:	0e 94 c2 10 	call	0x2184	; 0x2184 <__subsf3>
    1744:	4b 01       	movw	r8, r22
    1746:	5c 01       	movw	r10, r24
    1748:	a7 01       	movw	r20, r14
    174a:	96 01       	movw	r18, r12
    174c:	c7 01       	movw	r24, r14
    174e:	b6 01       	movw	r22, r12
    1750:	0e 94 c3 10 	call	0x2186	; 0x2186 <__addsf3>
    1754:	9b 01       	movw	r18, r22
    1756:	ac 01       	movw	r20, r24
    1758:	c5 01       	movw	r24, r10
    175a:	b4 01       	movw	r22, r8
    175c:	0e 94 c2 10 	call	0x2184	; 0x2184 <__subsf3>
    1760:	29 81       	ldd	r18, Y+1	; 0x01
    1762:	3a 81       	ldd	r19, Y+2	; 0x02
    1764:	4b 81       	ldd	r20, Y+3	; 0x03
    1766:	5c 81       	ldd	r21, Y+4	; 0x04
    1768:	0e 94 c2 10 	call	0x2184	; 0x2184 <__subsf3>
    176c:	60 93 e1 01 	sts	0x01E1, r22
    1770:	70 93 e2 01 	sts	0x01E2, r23
    1774:	80 93 e3 01 	sts	0x01E3, r24
    1778:	90 93 e4 01 	sts	0x01E4, r25
    curve_c = v0;
    177c:	c0 92 dd 01 	sts	0x01DD, r12
    1780:	d0 92 de 01 	sts	0x01DE, r13
    1784:	e0 92 df 01 	sts	0x01DF, r14
    1788:	f0 92 e0 01 	sts	0x01E0, r15
    curve_d = p0;
    178c:	40 92 d9 01 	sts	0x01D9, r4
    1790:	50 92 da 01 	sts	0x01DA, r5
    1794:	60 92 db 01 	sts	0x01DB, r6
    1798:	70 92 dc 01 	sts	0x01DC, r7
}
    179c:	28 96       	adiw	r28, 0x08	; 8
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
    17b4:	df 90       	pop	r13
    17b6:	cf 90       	pop	r12
    17b8:	bf 90       	pop	r11
    17ba:	af 90       	pop	r10
    17bc:	9f 90       	pop	r9
    17be:	8f 90       	pop	r8
    17c0:	7f 90       	pop	r7
    17c2:	6f 90       	pop	r6
    17c4:	5f 90       	pop	r5
    17c6:	4f 90       	pop	r4
    17c8:	08 95       	ret

000017ca <curve_solve>:


void curve_solve(uint16_t t, float *x, float *dx)
{
    17ca:	2f 92       	push	r2
    17cc:	3f 92       	push	r3
    17ce:	4f 92       	push	r4
    17d0:	5f 92       	push	r5
    17d2:	6f 92       	push	r6
    17d4:	7f 92       	push	r7
    17d6:	8f 92       	push	r8
    17d8:	9f 92       	push	r9
    17da:	af 92       	push	r10
    17dc:	bf 92       	push	r11
    17de:	cf 92       	push	r12
    17e0:	df 92       	push	r13
    17e2:	ef 92       	push	r14
    17e4:	ff 92       	push	r15
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	60 97       	sbiw	r28, 0x10	; 16
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	de bf       	out	0x3e, r29	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	fb 01       	movw	r30, r22
    // Handle cases where t is outside and indise the curve.
    if (t <= curve_t0)
    1800:	20 91 58 02 	lds	r18, 0x0258
    1804:	30 91 59 02 	lds	r19, 0x0259
    1808:	28 17       	cp	r18, r24
    180a:	39 07       	cpc	r19, r25
    180c:	c0 f0       	brcs	.+48     	; 0x183e <curve_solve+0x74>
    {
        // Set x and in and out dx.
        *x = curve_p0;
    180e:	c0 90 46 02 	lds	r12, 0x0246
    1812:	d0 90 47 02 	lds	r13, 0x0247
    1816:	e0 90 48 02 	lds	r14, 0x0248
    181a:	f0 90 49 02 	lds	r15, 0x0249
    181e:	c0 82       	st	Z, r12
    1820:	d1 82       	std	Z+1, r13	; 0x01
    1822:	e2 82       	std	Z+2, r14	; 0x02
    1824:	f3 82       	std	Z+3, r15	; 0x03
        *dx = t < curve_t0 ? 0.0 : curve_v0;
    1826:	82 17       	cp	r24, r18
    1828:	93 07       	cpc	r25, r19
    182a:	40 f1       	brcs	.+80     	; 0x187c <curve_solve+0xb2>
    182c:	80 91 54 02 	lds	r24, 0x0254
    1830:	90 91 55 02 	lds	r25, 0x0255
    1834:	a0 91 56 02 	lds	r26, 0x0256
    1838:	b0 91 57 02 	lds	r27, 0x0257
    183c:	22 c0       	rjmp	.+68     	; 0x1882 <curve_solve+0xb8>
    }
    else if (t >= curve_t1)
    183e:	60 91 4a 02 	lds	r22, 0x024A
    1842:	70 91 4b 02 	lds	r23, 0x024B
    1846:	86 17       	cp	r24, r22
    1848:	97 07       	cpc	r25, r23
    184a:	08 f1       	brcs	.+66     	; 0x188e <curve_solve+0xc4>
    {
        // Set x and in and out dx.
        *x = curve_p1;
    184c:	00 91 50 02 	lds	r16, 0x0250
    1850:	10 91 51 02 	lds	r17, 0x0251
    1854:	20 91 52 02 	lds	r18, 0x0252
    1858:	30 91 53 02 	lds	r19, 0x0253
    185c:	00 83       	st	Z, r16
    185e:	11 83       	std	Z+1, r17	; 0x01
    1860:	22 83       	std	Z+2, r18	; 0x02
    1862:	33 83       	std	Z+3, r19	; 0x03
        *dx = t > curve_t1 ? 0.0 : curve_v1;
    1864:	68 17       	cp	r22, r24
    1866:	79 07       	cpc	r23, r25
    1868:	48 f0       	brcs	.+18     	; 0x187c <curve_solve+0xb2>
    186a:	80 91 4c 02 	lds	r24, 0x024C
    186e:	90 91 4d 02 	lds	r25, 0x024D
    1872:	a0 91 4e 02 	lds	r26, 0x024E
    1876:	b0 91 4f 02 	lds	r27, 0x024F
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <curve_solve+0xb8>
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	dc 01       	movw	r26, r24
    1882:	fa 01       	movw	r30, r20
    1884:	80 83       	st	Z, r24
    1886:	91 83       	std	Z+1, r25	; 0x01
    1888:	a2 83       	std	Z+2, r26	; 0x02
    188a:	b3 83       	std	Z+3, r27	; 0x03
    188c:	b8 c0       	rjmp	.+368    	; 0x19fe <curve_solve+0x234>
    188e:	8a 01       	movw	r16, r20
    1890:	1f 01       	movw	r2, r30
    1892:	bc 01       	movw	r22, r24
    }
    else
    {
        // Subtract out the t0 value from t.
        float t1 = ((float) (t - curve_t0)) / curve_duration_float;
    1894:	80 91 e9 01 	lds	r24, 0x01E9
    1898:	90 91 ea 01 	lds	r25, 0x01EA
    189c:	a0 91 eb 01 	lds	r26, 0x01EB
    18a0:	b0 91 ec 01 	lds	r27, 0x01EC
    18a4:	8d 83       	std	Y+5, r24	; 0x05
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	af 83       	std	Y+7, r26	; 0x07
    18aa:	b8 87       	std	Y+8, r27	; 0x08
    18ac:	62 1b       	sub	r22, r18
    18ae:	73 0b       	sbc	r23, r19
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__floatunsisf>
    18b8:	2d 81       	ldd	r18, Y+5	; 0x05
    18ba:	3e 81       	ldd	r19, Y+6	; 0x06
    18bc:	4f 81       	ldd	r20, Y+7	; 0x07
    18be:	58 85       	ldd	r21, Y+8	; 0x08
    18c0:	0e 94 2f 11 	call	0x225e	; 0x225e <__divsf3>
    18c4:	6b 01       	movw	r12, r22
    18c6:	7c 01       	movw	r14, r24
        float t2 = t1 * t1;
    18c8:	9b 01       	movw	r18, r22
    18ca:	ac 01       	movw	r20, r24
    18cc:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>
    18d0:	4b 01       	movw	r8, r22
    18d2:	5c 01       	movw	r10, r24
        float t3 = t2 * t1;

        // Determine the cubic polynomial.
        // x = at^3 + bt^2 + ct + d
        *x = (curve_a * t3) + (curve_b * t2) + (curve_c * t1) + curve_d;
    18d4:	80 91 e5 01 	lds	r24, 0x01E5
    18d8:	90 91 e6 01 	lds	r25, 0x01E6
    18dc:	a0 91 e7 01 	lds	r26, 0x01E7
    18e0:	b0 91 e8 01 	lds	r27, 0x01E8
    18e4:	89 87       	std	Y+9, r24	; 0x09
    18e6:	9a 87       	std	Y+10, r25	; 0x0a
    18e8:	ab 87       	std	Y+11, r26	; 0x0b
    18ea:	bc 87       	std	Y+12, r27	; 0x0c
    18ec:	80 91 e1 01 	lds	r24, 0x01E1
    18f0:	90 91 e2 01 	lds	r25, 0x01E2
    18f4:	a0 91 e3 01 	lds	r26, 0x01E3
    18f8:	b0 91 e4 01 	lds	r27, 0x01E4
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	ab 83       	std	Y+3, r26	; 0x03
    1902:	bc 83       	std	Y+4, r27	; 0x04
    1904:	80 91 dd 01 	lds	r24, 0x01DD
    1908:	90 91 de 01 	lds	r25, 0x01DE
    190c:	a0 91 df 01 	lds	r26, 0x01DF
    1910:	b0 91 e0 01 	lds	r27, 0x01E0
    1914:	8d 87       	std	Y+13, r24	; 0x0d
    1916:	9e 87       	std	Y+14, r25	; 0x0e
    1918:	af 87       	std	Y+15, r26	; 0x0f
    191a:	b8 8b       	std	Y+16, r27	; 0x10
    else
    {
        // Subtract out the t0 value from t.
        float t1 = ((float) (t - curve_t0)) / curve_duration_float;
        float t2 = t1 * t1;
        float t3 = t2 * t1;
    191c:	a7 01       	movw	r20, r14
    191e:	96 01       	movw	r18, r12
    1920:	c5 01       	movw	r24, r10
    1922:	b4 01       	movw	r22, r8
    1924:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>
    1928:	9b 01       	movw	r18, r22
    192a:	ac 01       	movw	r20, r24

        // Determine the cubic polynomial.
        // x = at^3 + bt^2 + ct + d
        *x = (curve_a * t3) + (curve_b * t2) + (curve_c * t1) + curve_d;
    192c:	69 85       	ldd	r22, Y+9	; 0x09
    192e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1930:	8b 85       	ldd	r24, Y+11	; 0x0b
    1932:	9c 85       	ldd	r25, Y+12	; 0x0c
    1934:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>
    1938:	2b 01       	movw	r4, r22
    193a:	3c 01       	movw	r6, r24
    193c:	a5 01       	movw	r20, r10
    193e:	94 01       	movw	r18, r8
    1940:	69 81       	ldd	r22, Y+1	; 0x01
    1942:	7a 81       	ldd	r23, Y+2	; 0x02
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>
    194c:	9b 01       	movw	r18, r22
    194e:	ac 01       	movw	r20, r24
    1950:	c3 01       	movw	r24, r6
    1952:	b2 01       	movw	r22, r4
    1954:	0e 94 c3 10 	call	0x2186	; 0x2186 <__addsf3>
    1958:	2b 01       	movw	r4, r22
    195a:	3c 01       	movw	r6, r24
    195c:	a7 01       	movw	r20, r14
    195e:	96 01       	movw	r18, r12
    1960:	6d 85       	ldd	r22, Y+13	; 0x0d
    1962:	7e 85       	ldd	r23, Y+14	; 0x0e
    1964:	8f 85       	ldd	r24, Y+15	; 0x0f
    1966:	98 89       	ldd	r25, Y+16	; 0x10
    1968:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>
    196c:	9b 01       	movw	r18, r22
    196e:	ac 01       	movw	r20, r24
    1970:	c3 01       	movw	r24, r6
    1972:	b2 01       	movw	r22, r4
    1974:	0e 94 c3 10 	call	0x2186	; 0x2186 <__addsf3>
    1978:	20 91 d9 01 	lds	r18, 0x01D9
    197c:	30 91 da 01 	lds	r19, 0x01DA
    1980:	40 91 db 01 	lds	r20, 0x01DB
    1984:	50 91 dc 01 	lds	r21, 0x01DC
    1988:	0e 94 c3 10 	call	0x2186	; 0x2186 <__addsf3>
    198c:	d1 01       	movw	r26, r2
    198e:	6d 93       	st	X+, r22
    1990:	7d 93       	st	X+, r23
    1992:	8d 93       	st	X+, r24
    1994:	9c 93       	st	X, r25
    1996:	13 97       	sbiw	r26, 0x03	; 3

        // Determine the cubic polynomial derivative.
        // dx = 3at^2 + 2bt + c
        *dx = (3.0 * curve_a * t2) + (2.0 * curve_b * t1) + curve_c;
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e4       	ldi	r20, 0x40	; 64
    199e:	50 e4       	ldi	r21, 0x40	; 64
    19a0:	69 85       	ldd	r22, Y+9	; 0x09
    19a2:	7a 85       	ldd	r23, Y+10	; 0x0a
    19a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    19a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    19a8:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>
    19ac:	a5 01       	movw	r20, r10
    19ae:	94 01       	movw	r18, r8
    19b0:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>
    19b4:	4b 01       	movw	r8, r22
    19b6:	5c 01       	movw	r10, r24
    19b8:	29 81       	ldd	r18, Y+1	; 0x01
    19ba:	3a 81       	ldd	r19, Y+2	; 0x02
    19bc:	4b 81       	ldd	r20, Y+3	; 0x03
    19be:	5c 81       	ldd	r21, Y+4	; 0x04
    19c0:	ca 01       	movw	r24, r20
    19c2:	b9 01       	movw	r22, r18
    19c4:	0e 94 c3 10 	call	0x2186	; 0x2186 <__addsf3>
    19c8:	a7 01       	movw	r20, r14
    19ca:	96 01       	movw	r18, r12
    19cc:	0e 94 65 12 	call	0x24ca	; 0x24ca <__mulsf3>
    19d0:	9b 01       	movw	r18, r22
    19d2:	ac 01       	movw	r20, r24
    19d4:	c5 01       	movw	r24, r10
    19d6:	b4 01       	movw	r22, r8
    19d8:	0e 94 c3 10 	call	0x2186	; 0x2186 <__addsf3>
    19dc:	2d 85       	ldd	r18, Y+13	; 0x0d
    19de:	3e 85       	ldd	r19, Y+14	; 0x0e
    19e0:	4f 85       	ldd	r20, Y+15	; 0x0f
    19e2:	58 89       	ldd	r21, Y+16	; 0x10
    19e4:	0e 94 c3 10 	call	0x2186	; 0x2186 <__addsf3>

        // The time span has been normalized to 0.0 to 1.0 range so correct
        // the derivative to the duration of the curve.
        *dx /= curve_duration_float;
    19e8:	2d 81       	ldd	r18, Y+5	; 0x05
    19ea:	3e 81       	ldd	r19, Y+6	; 0x06
    19ec:	4f 81       	ldd	r20, Y+7	; 0x07
    19ee:	58 85       	ldd	r21, Y+8	; 0x08
    19f0:	0e 94 2f 11 	call	0x225e	; 0x225e <__divsf3>
    19f4:	f8 01       	movw	r30, r16
    19f6:	60 83       	st	Z, r22
    19f8:	71 83       	std	Z+1, r23	; 0x01
    19fa:	82 83       	std	Z+2, r24	; 0x02
    19fc:	93 83       	std	Z+3, r25	; 0x03
    }
}
    19fe:	60 96       	adiw	r28, 0x10	; 16
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	ff 90       	pop	r15
    1a14:	ef 90       	pop	r14
    1a16:	df 90       	pop	r13
    1a18:	cf 90       	pop	r12
    1a1a:	bf 90       	pop	r11
    1a1c:	af 90       	pop	r10
    1a1e:	9f 90       	pop	r9
    1a20:	8f 90       	pop	r8
    1a22:	7f 90       	pop	r7
    1a24:	6f 90       	pop	r6
    1a26:	5f 90       	pop	r5
    1a28:	4f 90       	pop	r4
    1a2a:	3f 90       	pop	r3
    1a2c:	2f 90       	pop	r2
    1a2e:	08 95       	ret

00001a30 <backemf_init>:
static uint8_t previous_tccr1a;


void backemf_init(void)
// Initialise the back EMF module
{
    1a30:	08 95       	ret

00001a32 <backemf_defaults>:
}

// Write a single byte to the banks.
inline static void banks_write_byte(uint8_t bank, uint8_t address, uint8_t value)
{
    banks[bank][address] = value;
    1a32:	82 e0       	ldi	r24, 0x02	; 2
    1a34:	80 93 c6 02 	sts	0x02C6, r24
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	80 93 c7 02 	sts	0x02C7, r24
    1a3e:	08 95       	ret

00001a40 <backemf_do_sample>:
{
    uint8_t emf_charge_time;
    uint8_t n;

    // Disable interrupts.
    cli();
    1a40:	f8 94       	cli

    // Detect the direction of the EMF
    if (pwm_a == 0 && pwm_b > 0)
    1a42:	81 11       	cpse	r24, r1
    1a44:	05 c0       	rjmp	.+10     	; 0x1a50 <backemf_do_sample+0x10>
    1a46:	66 23       	and	r22, r22
    1a48:	39 f0       	breq	.+14     	; 0x1a58 <backemf_do_sample+0x18>
    {
        // Enable BEMF sample ON
        // Make sure that SMPLn_B (PD4) is held low.
        PORTD &= ~(1<<PD4);
    1a4a:	5c 98       	cbi	0x0b, 4	; 11
        PORTD |= (1<<PD7);
    1a4c:	5f 9a       	sbi	0x0b, 7	; 11
    1a4e:	04 c0       	rjmp	.+8      	; 0x1a58 <backemf_do_sample+0x18>
    }
    else if (pwm_a >0 && pwm_b == 0)
    1a50:	61 11       	cpse	r22, r1
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <backemf_do_sample+0x18>
    {
        // Enable BEMF sample ON
        // Make sure that SMPLn_A (PD7) is held low.
        PORTD &= ~(1<<PD7);
    1a54:	5f 98       	cbi	0x0b, 7	; 11
        PORTD |= (1<<PD4);
    1a56:	5c 9a       	sbi	0x0b, 4	; 11
}

// Read a single byte from the banks.
inline static uint8_t banks_read_byte(uint8_t bank, uint8_t address)
{
    return banks[bank][address];
    1a58:	90 91 c7 02 	lds	r25, 0x02C7
    }

    emf_charge_time = banks_read_byte(CONFIG_BANK, REG_EMF_CHARGE_TIME);
    // Delay to allow the BEMF sample hold circuit to charge to a reasonable level
    for (n=0; n<emf_charge_time; n++)
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	89 17       	cp	r24, r25
    1a60:	31 f0       	breq	.+12     	; 0x1a6e <backemf_do_sample+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a62:	25 e6       	ldi	r18, 0x65	; 101
    1a64:	2a 95       	dec	r18
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <backemf_do_sample+0x24>
    1a68:	00 00       	nop
    1a6a:	8f 5f       	subi	r24, 0xFF	; 255
    1a6c:	f8 cf       	rjmp	.-16     	; 0x1a5e <backemf_do_sample+0x1e>
        _delay_us(38);

    // Enable BEMF sample OFF
    // Make sure that SMPLn_B (PD4) and SMPLn_A (PD7) are held high.
    PORTD |= ((1<<PD4) | (1<<PD7));
    1a6e:	8b b1       	in	r24, 0x0b	; 11
    1a70:	80 69       	ori	r24, 0x90	; 144
    1a72:	8b b9       	out	0x0b, r24	; 11

    // Enable interrupts here so we dont interrupt the cap charge delay
    sei();
    1a74:	78 94       	sei

    // Sample the BEMF ADC channel
    adc_start(ADC_CHANNEL_BACKEMF);
    1a76:	87 e0       	ldi	r24, 0x07	; 7
    1a78:	0e 94 96 00 	call	0x12c	; 0x12c <adc_start>

inline static uint8_t adc_backemf_value_is_ready(void)
// Return the ADC power value ready flag.
{
    // Return the value ready flag.
    return adc_backemf_ready;
    1a7c:	80 91 f5 01 	lds	r24, 0x01F5

    // Wait for the samples to complete
    while(!adc_backemf_value_is_ready())
    1a80:	88 23       	and	r24, r24
    1a82:	e1 f3       	breq	.-8      	; 0x1a7c <backemf_do_sample+0x3c>
#if BACKEMF_ENABLED
inline static uint16_t adc_get_backemf_value(void)
// Return the signed 16-bit ADC power value.
{
    // Clear the ready ADC value ready flag.
    adc_backemf_ready = 0;
    1a84:	10 92 f5 01 	sts	0x01F5, r1

    // Return the value.
    return adc_backemf_value;
    1a88:	80 91 f6 01 	lds	r24, 0x01F6
    1a8c:	90 91 f7 01 	lds	r25, 0x01F7
        ;;

    return (uint16_t) adc_get_backemf_value();
}
    1a90:	08 95       	ret

00001a92 <backemf_get_sample>:
// Register in-line functions.

// Read a single byte from the registers.
inline static uint8_t registers_read_byte(uint8_t address)
{
    return registers[address];
    1a92:	ec ef       	ldi	r30, 0xFC	; 252
    1a94:	f1 e0       	ldi	r31, 0x01	; 1

    // Delay for back EMF field collapse recovery. This is interruptable
//    _delay_ms(banks_read_byte(CONFIG_BANK, REG_EMF_COLLAPSE_DELAY));

    // Sample the back emf
    bemf = (uint16_t)backemf_do_sample(pwm_a, pwm_b);
    1a96:	67 85       	ldd	r22, Z+15	; 0x0f
    1a98:	86 85       	ldd	r24, Z+14	; 0x0e
    1a9a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <backemf_do_sample>

    banks_write_word(INFORMATION_BANK, REG_BACKEMF_HI, REG_BACKEMF_LO, bemf);
    1a9e:	9c 01       	movw	r18, r24
    1aa0:	42 e0       	ldi	r20, 0x02	; 2
    1aa2:	61 e0       	ldi	r22, 0x01	; 1
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <banks_write_word>

00001aaa <backemf_coast_motor>:

void backemf_coast_motor(void)
// Disables the PWM timer to coast the motor
{
    // Disable interrupts.
    cli();
    1aaa:	f8 94       	cli

    // Back up the old TCCR1A register configuration for later restore
    previous_tccr1a = TCCR1A;
    1aac:	e0 e8       	ldi	r30, 0x80	; 128
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	80 93 ed 01 	sts	0x01ED, r24

    // Disable OC1A and OC1B outputs.
    TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0));
    1ab6:	80 81       	ld	r24, Z
    1ab8:	8f 73       	andi	r24, 0x3F	; 63
    1aba:	80 83       	st	Z, r24
    TCCR1A &= ~((1<<COM1B1) | (1<<COM1B0));
    1abc:	80 81       	ld	r24, Z
    1abe:	8f 7c       	andi	r24, 0xCF	; 207
    1ac0:	80 83       	st	Z, r24

    // Restore interrupts.
    sei();
    1ac2:	78 94       	sei
    1ac4:	08 95       	ret

00001ac6 <backemf_restore_motor>:

void backemf_restore_motor(void)
// Enable the PWM timer
{
    // Disable interrupts.
    cli();
    1ac6:	f8 94       	cli

    // ENABLE OC1A and OC1B outputs.
    TCCR1A = previous_tccr1a;
    1ac8:	80 91 ed 01 	lds	r24, 0x01ED
    1acc:	80 93 80 00 	sts	0x0080, r24

    // Restore interrupts.
    sei();
    1ad0:	78 94       	sei
    1ad2:	08 95       	ret

00001ad4 <banks_init>:
// Register values.
uint8_t banks[MAX_BANKS][BANK_REGISTER_COUNT];

void banks_init(void)
// Function to initialize all banks.
{
    1ad4:	ec e5       	ldi	r30, 0x5C	; 92
    1ad6:	f2 e0       	ldi	r31, 0x02	; 2
    uint8_t n;

    // Initialize all banks to zero.
    for( n=0;n<MAX_BANKS;n++)
        memset(&banks[n][0], 0, BANK_REGISTER_COUNT);
    1ad8:	80 e4       	ldi	r24, 0x40	; 64
    1ada:	df 01       	movw	r26, r30
    1adc:	98 2f       	mov	r25, r24
    1ade:	1d 92       	st	X+, r1
    1ae0:	9a 95       	dec	r25
    1ae2:	e9 f7       	brne	.-6      	; 0x1ade <banks_init+0xa>
    1ae4:	e0 5c       	subi	r30, 0xC0	; 192
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
// Function to initialize all banks.
{
    uint8_t n;

    // Initialize all banks to zero.
    for( n=0;n<MAX_BANKS;n++)
    1ae8:	a3 e0       	ldi	r26, 0x03	; 3
    1aea:	ec 31       	cpi	r30, 0x1C	; 28
    1aec:	fa 07       	cpc	r31, r26
    1aee:	a9 f7       	brne	.-22     	; 0x1ada <banks_init+0x6>


// Write a single byte to the registers.
inline static void registers_write_byte(uint8_t address, uint8_t value)
{
    registers[address] = value;
    1af0:	10 92 2b 02 	sts	0x022B, r1
    registers_write_byte(REG_BANK_SELECT,0);

    // Restore the read/write protected registers from EEPROM.  If the
    // EEPROM fails checksum this function will return zero and the
    // read/write protected registers should be initialized to defaults.
    if (!eeprom_restore_registers())
    1af4:	0e 94 76 01 	call	0x2ec	; 0x2ec <eeprom_restore_registers>
    1af8:	81 11       	cpse	r24, r1
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <banks_init+0x2c>
    {
        // Initialize read/write protected registers to defaults.
        registers_defaults();
    1afc:	0c 94 12 01 	jmp	0x224	; 0x224 <registers_defaults>
    1b00:	08 95       	ret

00001b02 <banks_defaults>:
}

// Write a single byte to the banks.
inline static void banks_write_byte(uint8_t bank, uint8_t address, uint8_t value)
{
    banks[bank][address] = value;
    1b02:	80 e1       	ldi	r24, 0x10	; 16
    1b04:	80 93 9c 02 	sts	0x029C, r24
  // put your default bank data here

    // Default TWI address.
    banks_write_byte(POS_PID_BANK, REG_TWI_ADDRESS, REG_DEFAULT_TWI_ADDR);
#if ALERT_ENABLED
    alert_defaults();
    1b08:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <alert_defaults>
#endif
#if BACKEMF_ENABLED
    backemf_defaults();
    1b0c:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <backemf_defaults>

00001b10 <banks_read_word>:
    uint8_t sreg;
    uint16_t value;


    // Clear interrupts.
    asm volatile ("in %0,__SREG__\n\tcli\n\t" : "=&r" (sreg));
    1b10:	9f b7       	in	r25, 0x3f	; 63
    1b12:	f8 94       	cli

    // Read the registers.
    value = (banks[bank][address_hi] << 8) | banks[bank][address_lo];
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0

    // Restore status.
    asm volatile ("out __SREG__,%0\n\t" : : "r" (sreg));
    1b18:	9f bf       	out	0x3f, r25	; 63

    // Clear interrupts.
    asm volatile ("in %0,__SREG__\n\tcli\n\t" : "=&r" (sreg));

    // Read the registers.
    value = (banks[bank][address_hi] << 8) | banks[bank][address_lo];
    1b1a:	86 e0       	ldi	r24, 0x06	; 6
    1b1c:	22 0f       	add	r18, r18
    1b1e:	33 1f       	adc	r19, r19
    1b20:	8a 95       	dec	r24
    1b22:	e1 f7       	brne	.-8      	; 0x1b1c <banks_read_word+0xc>
    1b24:	f9 01       	movw	r30, r18
    1b26:	e6 0f       	add	r30, r22
    1b28:	f1 1d       	adc	r31, r1
    1b2a:	e4 5a       	subi	r30, 0xA4	; 164
    1b2c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b2e:	80 81       	ld	r24, Z
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	98 2f       	mov	r25, r24
    1b34:	88 27       	eor	r24, r24
    1b36:	24 0f       	add	r18, r20
    1b38:	31 1d       	adc	r19, r1
    1b3a:	f9 01       	movw	r30, r18
    1b3c:	e4 5a       	subi	r30, 0xA4	; 164
    1b3e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b40:	20 81       	ld	r18, Z

    // Restore status.
    asm volatile ("out __SREG__,%0\n\t" : : "r" (sreg));

    return value;
}
    1b42:	82 2b       	or	r24, r18
    1b44:	08 95       	ret

00001b46 <banks_write_word>:
// Interrupts are disabled during the write.
{
    uint8_t sreg;

    // Clear interrupts.
    asm volatile ("in %0,__SREG__\n\tcli\n\t" : "=&r" (sreg));
    1b46:	5f b7       	in	r21, 0x3f	; 63
    1b48:	f8 94       	cli

    // Write the registers.
    banks[bank][address_hi] = value >> 8;
    1b4a:	70 e4       	ldi	r23, 0x40	; 64
    1b4c:	87 9f       	mul	r24, r23
    1b4e:	c0 01       	movw	r24, r0
    1b50:	11 24       	eor	r1, r1
    1b52:	fc 01       	movw	r30, r24
    1b54:	e6 0f       	add	r30, r22
    1b56:	f1 1d       	adc	r31, r1
    1b58:	e4 5a       	subi	r30, 0xA4	; 164
    1b5a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b5c:	30 83       	st	Z, r19
    banks[bank][address_lo] = value;
    1b5e:	84 0f       	add	r24, r20
    1b60:	91 1d       	adc	r25, r1
    1b62:	fc 01       	movw	r30, r24
    1b64:	e4 5a       	subi	r30, 0xA4	; 164
    1b66:	fd 4f       	sbci	r31, 0xFD	; 253
    1b68:	20 83       	st	Z, r18

    // Restore status.
    asm volatile ("out __SREG__,%0\n\t" : : "r" (sreg));
    1b6a:	5f bf       	out	0x3f, r21	; 63
    1b6c:	08 95       	ret

00001b6e <banks_update_registers>:


void banks_update_registers(void)
// Update any functions that need running in the bank context
// This runs in the main loop so DO NOT tie it up too long.
{
    1b6e:	08 95       	ret

00001b70 <alert_init>:
    1b70:	10 92 5c 02 	sts	0x025C, r1
// Function to initialize alerts.
{
    // reset the alerts register to 0, or no errors
    banks_write_byte(ALERT_BANK, ALERT_STATUS, 0x00);

    throttle = 0;
    1b74:	10 92 ef 01 	sts	0x01EF, r1
    1b78:	10 92 ee 01 	sts	0x01EE, r1

#if ALERT_INTN_ENABLED
    // Set the interrupt port(s) as an output
    ALERT_INTN_DDR |= ALERT_INTN_DDR_CONF;
    1b7c:	24 9a       	sbi	0x04, 4	; 4

    // Set it (them) low
    ALERT_INTN_PORT &= ~(1<<ALERT_INTN_PIN);
    1b7e:	2c 98       	cbi	0x05, 4	; 5
    1b80:	8f ef       	ldi	r24, 0xFF	; 255
    1b82:	80 93 ba 02 	sts	0x02BA, r24
    1b86:	08 95       	ret

00001b88 <alert_defaults>:

void alert_defaults(void)
// Reset safe read/write registers to defaults.
{
    // put your default bank data here
    banks_write_word(ALERT_CONFIG_BANK, ALERT_VOLT_MAX_LIMIT_HI, ALERT_VOLT_MAX_LIMIT_LO, 0);
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	43 e1       	ldi	r20, 0x13	; 19
    1b8e:	62 e1       	ldi	r22, 0x12	; 18
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <banks_write_word>
    banks_write_word(ALERT_CONFIG_BANK, ALERT_VOLT_MIN_LIMIT_HI, ALERT_VOLT_MIN_LIMIT_LO, 0);
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	45 e1       	ldi	r20, 0x15	; 21
    1b9c:	64 e1       	ldi	r22, 0x14	; 20
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <banks_write_word>

    banks_write_word(ALERT_CONFIG_BANK, ALERT_TEMP_MAX_LIMIT_HI, ALERT_TEMP_MAX_LIMIT_LO, 0);
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	47 e1       	ldi	r20, 0x17	; 23
    1baa:	66 e1       	ldi	r22, 0x16	; 22
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <banks_write_word>

    banks_write_word(ALERT_CONFIG_BANK, ALERT_CURR_MAX_LIMIT_HI, ALERT_CURR_MAX_LIMIT_LO, 0);
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	41 e1       	ldi	r20, 0x11	; 17
    1bb8:	60 e1       	ldi	r22, 0x10	; 16
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <banks_write_word>
    1bc0:	8f ef       	ldi	r24, 0xFF	; 255
    1bc2:	80 93 bb 02 	sts	0x02BB, r24
    1bc6:	80 93 ba 02 	sts	0x02BA, r24
    1bca:	08 95       	ret

00001bcc <alert_pwm_throttle>:
}

uint16_t alert_pwm_throttle(uint16_t pwm)
// Allow an alert to modify the PWM value
// This function runs in the ADC context, so don't tie up for any longer than 2ms
{
    1bcc:	20 91 ee 01 	lds	r18, 0x01EE
    1bd0:	30 91 ef 01 	lds	r19, 0x01EF
    // Do something here if you want to throttle PWM somehow

    if (pwm>0)
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	29 f0       	breq	.+10     	; 0x1be2 <alert_pwm_throttle+0x16>
        pwm -= (throttle*2);
    1bd8:	22 0f       	add	r18, r18
    1bda:	33 1f       	adc	r19, r19
    1bdc:	82 1b       	sub	r24, r18
    1bde:	93 0b       	sbc	r25, r19
    1be0:	08 95       	ret
    else
        pwm += (throttle*2);
    1be2:	c9 01       	movw	r24, r18
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25

    return pwm;
}
    1be8:	08 95       	ret

00001bea <alert_int_high>:

void alert_int_high(uint8_t bit)
{
    // Raise the INTn line on v3
#if ALERT_INTN_ENABLED
    ALERT_INTN_PORT |= (1<<ALERT_INTN_PIN);
    1bea:	2c 9a       	sbi	0x05, 4	; 5
    1bec:	08 95       	ret

00001bee <alert_int_low>:
    status = banks_read_byte(ALERT_BANK, ALERT_STATUS);

    // Check to see if there are any existing interrupts pending
    // TODO discuss if we actually want it to pull low anyway as this will be pulled
    // high again on the next checkup
    if ((status & banks_read_byte(ALERT_CONFIG_BANK, REG_ALERT_CAUSES_INT)) > 0)
    1bee:	90 91 ba 02 	lds	r25, 0x02BA
    1bf2:	80 91 5c 02 	lds	r24, 0x025C
    1bf6:	89 23       	and	r24, r25
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <alert_int_low+0xe>
       return;

    // Lower the interrupt pin
    ALERT_INTN_PORT &= ~(1<<ALERT_INTN_PIN);
    1bfa:	2c 98       	cbi	0x05, 4	; 5
    1bfc:	08 95       	ret

00001bfe <alert_is_enabled>:
#endif
}

uint8_t alert_is_enabled(uint8_t bit)
{
    return ((banks_read_byte(ALERT_CONFIG_BANK, REG_ALERT_ENABLE) & bit) > 0 ? 1 : 0);
    1bfe:	90 91 bb 02 	lds	r25, 0x02BB
    1c02:	98 23       	and	r25, r24
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <alert_is_enabled+0xc>
    1c08:	80 e0       	ldi	r24, 0x00	; 0
}
    1c0a:	08 95       	ret

00001c0c <alert_clearbit>:
    1c0c:	ec e5       	ldi	r30, 0x5C	; 92
    1c0e:	f2 e0       	ldi	r31, 0x02	; 2

void alert_clearbit(uint8_t bit)
{
    uint8_t reg;
    reg = banks_read_byte(ALERT_BANK, ALERT_STATUS);
    reg &= ~(1<<bit);
    1c10:	21 e0       	ldi	r18, 0x01	; 1
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	01 c0       	rjmp	.+2      	; 0x1c18 <alert_clearbit+0xc>
    1c16:	22 0f       	add	r18, r18
    1c18:	8a 95       	dec	r24
    1c1a:	ea f7       	brpl	.-6      	; 0x1c16 <alert_clearbit+0xa>
    1c1c:	20 95       	com	r18
    1c1e:	80 81       	ld	r24, Z
    1c20:	28 23       	and	r18, r24
    1c22:	20 83       	st	Z, r18
    1c24:	08 95       	ret

00001c26 <alert_setbit>:
    1c26:	ec e5       	ldi	r30, 0x5C	; 92
    1c28:	f2 e0       	ldi	r31, 0x02	; 2
void alert_setbit(uint8_t bit)
// set a bit in the register
{
    uint8_t reg;
    reg = banks_read_byte(ALERT_BANK, ALERT_STATUS);
    reg |= (1<<bit);
    1c2a:	21 e0       	ldi	r18, 0x01	; 1
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	01 c0       	rjmp	.+2      	; 0x1c32 <alert_setbit+0xc>
    1c30:	22 0f       	add	r18, r18
    1c32:	8a 95       	dec	r24
    1c34:	ea f7       	brpl	.-6      	; 0x1c30 <alert_setbit+0xa>
    1c36:	80 81       	ld	r24, Z
    1c38:	28 2b       	or	r18, r24
    1c3a:	20 83       	st	Z, r18
    1c3c:	08 95       	ret

00001c3e <alert_check>:
#endif
}

void alert_check(void)
// Check the alert registers for min/max overflows and set the status register accordingly
{
    1c3e:	6f 92       	push	r6
    1c40:	7f 92       	push	r7
    1c42:	8f 92       	push	r8
    1c44:	9f 92       	push	r9
    1c46:	af 92       	push	r10
    1c48:	bf 92       	push	r11
    1c4a:	cf 92       	push	r12
    1c4c:	df 92       	push	r13
    1c4e:	ef 92       	push	r14
    1c50:	ff 92       	push	r15
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    uint16_t max_temperature;
    uint16_t cur_position;
    uint16_t seek_position;

    // Save cycles by returning here if we are disabled.
    if ((banks_read_byte(ALERT_CONFIG_BANK, REG_ALERT_ENABLE) == 0)
    1c5a:	80 91 bb 02 	lds	r24, 0x02BB
    1c5e:	81 11       	cpse	r24, r1
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <alert_check+0x28>
        && (ALERT_INTN_PORT & ALERT_INTN_PIN) == 0)
    1c62:	2a 9b       	sbis	0x05, 2	; 5
    1c64:	72 c0       	rjmp	.+228    	; 0x1d4a <alert_check+0x10c>
        return;

    // Get the current voltage and power
    voltage     = registers_read_word(REG_VOLTAGE_HI,REG_VOLTAGE_LO);
    1c66:	61 e1       	ldi	r22, 0x11	; 17
    1c68:	80 e1       	ldi	r24, 0x10	; 16
    1c6a:	0e 94 16 01 	call	0x22c	; 0x22c <registers_read_word>
    1c6e:	5c 01       	movw	r10, r24
    current     = registers_read_word(REG_POWER_HI,REG_POWER_LO);
    1c70:	6d e0       	ldi	r22, 0x0D	; 13
    1c72:	8c e0       	ldi	r24, 0x0C	; 12
    1c74:	0e 94 16 01 	call	0x22c	; 0x22c <registers_read_word>
    temperature = registers_read_word(REG_TEMPERATURE_HI,REG_TEMPERATURE_LO);
    1c78:	64 e1       	ldi	r22, 0x14	; 20
    1c7a:	83 e1       	ldi	r24, 0x13	; 19
    1c7c:	0e 94 16 01 	call	0x22c	; 0x22c <registers_read_word>
    1c80:	4c 01       	movw	r8, r24

    // Get the set limits for voltage and power
    max_voltage = banks_read_word(ALERT_CONFIG_BANK, ALERT_VOLT_MAX_LIMIT_HI, ALERT_VOLT_MAX_LIMIT_LO);
    1c82:	43 e1       	ldi	r20, 0x13	; 19
    1c84:	62 e1       	ldi	r22, 0x12	; 18
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>
    1c8c:	3c 01       	movw	r6, r24
    min_voltage = banks_read_word(ALERT_CONFIG_BANK, ALERT_VOLT_MIN_LIMIT_HI, ALERT_VOLT_MIN_LIMIT_LO);
    1c8e:	45 e1       	ldi	r20, 0x15	; 21
    1c90:	64 e1       	ldi	r22, 0x14	; 20
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>
    1c98:	6c 01       	movw	r12, r24

    max_temperature = banks_read_word(ALERT_CONFIG_BANK, ALERT_TEMP_MAX_LIMIT_HI, ALERT_TEMP_MAX_LIMIT_LO);
    1c9a:	47 e1       	ldi	r20, 0x17	; 23
    1c9c:	66 e1       	ldi	r22, 0x16	; 22
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>
    1ca4:	7c 01       	movw	r14, r24

    max_current = banks_read_word(ALERT_CONFIG_BANK, ALERT_CURR_MAX_LIMIT_HI, ALERT_CURR_MAX_LIMIT_LO);
    1ca6:	41 e1       	ldi	r20, 0x11	; 17
    1ca8:	60 e1       	ldi	r22, 0x10	; 16
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <banks_read_word>

    cur_position = registers_read_word(REG_POSITION_HI, REG_POSITION_LO);
    1cb0:	69 e0       	ldi	r22, 0x09	; 9
    1cb2:	88 e0       	ldi	r24, 0x08	; 8
    1cb4:	0e 94 16 01 	call	0x22c	; 0x22c <registers_read_word>
    1cb8:	8c 01       	movw	r16, r24
    seek_position = registers_read_word(REG_SEEK_POSITION_HI, REG_SEEK_POSITION_LO);
    1cba:	61 e2       	ldi	r22, 0x21	; 33
    1cbc:	80 e2       	ldi	r24, 0x20	; 32
    1cbe:	0e 94 16 01 	call	0x22c	; 0x22c <registers_read_word>
    1cc2:	ec 01       	movw	r28, r24
#endif
}

uint8_t alert_is_enabled(uint8_t bit)
{
    return ((banks_read_byte(ALERT_CONFIG_BANK, REG_ALERT_ENABLE) & bit) > 0 ? 1 : 0);
    1cc4:	80 91 bb 02 	lds	r24, 0x02BB
    cur_position = registers_read_word(REG_POSITION_HI, REG_POSITION_LO);
    seek_position = registers_read_word(REG_SEEK_POSITION_HI, REG_SEEK_POSITION_LO);

    // Check the voltage is not below or above the set voltage. Ignore if 0
    // NOTE: This would be a good place to alter the pwm of the motor to output the same voltage
    if (alert_is_enabled(ALERT_OVERVOLT))
    1cc8:	80 ff       	sbrs	r24, 0
    1cca:	0f c0       	rjmp	.+30     	; 0x1cea <alert_check+0xac>
    {
        if (voltage > max_voltage && max_voltage >0)
    1ccc:	6a 14       	cp	r6, r10
    1cce:	7b 04       	cpc	r7, r11
    1cd0:	20 f4       	brcc	.+8      	; 0x1cda <alert_check+0x9c>
    1cd2:	67 28       	or	r6, r7
    1cd4:	11 f0       	breq	.+4      	; 0x1cda <alert_check+0x9c>
        {
            alert_setbit(ALERT_OVERVOLT);
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	06 c0       	rjmp	.+12     	; 0x1ce6 <alert_check+0xa8>
        }
        else if (voltage < min_voltage && min_voltage >0)
    1cda:	ac 14       	cp	r10, r12
    1cdc:	bd 04       	cpc	r11, r13
    1cde:	28 f4       	brcc	.+10     	; 0x1cea <alert_check+0xac>
    1ce0:	cd 28       	or	r12, r13
    1ce2:	19 f0       	breq	.+6      	; 0x1cea <alert_check+0xac>
        {
            alert_setbit(ALERT_UNDERVOLT);
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <alert_setbit>
        throttle = current - max_current ;
    }

    // Check the curent is not over the maximum set current. Ignore if 0
    // NOTE: This would be a good place to throttle the current if we want to
    if (temperature > max_temperature
    1cea:	e8 14       	cp	r14, r8
    1cec:	f9 04       	cpc	r15, r9
    1cee:	48 f4       	brcc	.+18     	; 0x1d02 <alert_check+0xc4>
        && max_temperature >0
    1cf0:	ef 28       	or	r14, r15
    1cf2:	39 f0       	breq	.+14     	; 0x1d02 <alert_check+0xc4>
#endif
}

uint8_t alert_is_enabled(uint8_t bit)
{
    return ((banks_read_byte(ALERT_CONFIG_BANK, REG_ALERT_ENABLE) & bit) > 0 ? 1 : 0);
    1cf4:	90 91 bb 02 	lds	r25, 0x02BB
    1cf8:	93 70       	andi	r25, 0x03	; 3

    // Check the curent is not over the maximum set current. Ignore if 0
    // NOTE: This would be a good place to throttle the current if we want to
    if (temperature > max_temperature
        && max_temperature >0
        && alert_is_enabled(ALERT_OVERTEMP))
    1cfa:	19 f0       	breq	.+6      	; 0x1d02 <alert_check+0xc4>
    {
        alert_setbit(ALERT_OVERTEMP);
    1cfc:	83 e0       	ldi	r24, 0x03	; 3
    1cfe:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <alert_setbit>
        step_disable();
#endif
    }

    // Check to see if the position has reached the destination
    if (((cur_position > seek_position + 2) ||
    1d02:	ce 01       	movw	r24, r28
    1d04:	02 96       	adiw	r24, 0x02	; 2
    1d06:	80 17       	cp	r24, r16
    1d08:	91 07       	cpc	r25, r17
    1d0a:	20 f0       	brcs	.+8      	; 0x1d14 <alert_check+0xd6>
       (cur_position < seek_position - 2)) &&
    1d0c:	22 97       	sbiw	r28, 0x02	; 2
        step_disable();
#endif
    }

    // Check to see if the position has reached the destination
    if (((cur_position > seek_position + 2) ||
    1d0e:	0c 17       	cp	r16, r28
    1d10:	1d 07       	cpc	r17, r29
    1d12:	58 f4       	brcc	.+22     	; 0x1d2a <alert_check+0xec>
#endif
}

uint8_t alert_is_enabled(uint8_t bit)
{
    return ((banks_read_byte(ALERT_CONFIG_BANK, REG_ALERT_ENABLE) & bit) > 0 ? 1 : 0);
    1d14:	80 91 bb 02 	lds	r24, 0x02BB
#endif
    }

    // Check to see if the position has reached the destination
    if (((cur_position > seek_position + 2) ||
       (cur_position < seek_position - 2)) &&
    1d18:	82 ff       	sbrs	r24, 2
    1d1a:	07 c0       	rjmp	.+14     	; 0x1d2a <alert_check+0xec>
       (alert_is_enabled(ALERT_POSITION_REACHED)))
    {
        alert_setbit(ALERT_POSITION_REACHED);
    1d1c:	84 e0       	ldi	r24, 0x04	; 4
    1d1e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <alert_setbit>
        alert_int_high(ALERT_POSITION_REACHED);
    1d22:	84 e0       	ldi	r24, 0x04	; 4
    1d24:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <alert_int_high>
    1d28:	03 c0       	rjmp	.+6      	; 0x1d30 <alert_check+0xf2>
    }
    else
        alert_clearbit(ALERT_POSITION_REACHED);
    1d2a:	84 e0       	ldi	r24, 0x04	; 4
    1d2c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <alert_clearbit>

    // check if we can lower the interrupt pins
    alert_int_low();
    1d30:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <alert_int_low>
    
    // If we are throttling on an alert, then decrement the counter.
    // This is so that the throttle is not permanent, and will gradually
    // fade away until the throttle is off.
    if(throttle >0) throttle--;
    1d34:	80 91 ee 01 	lds	r24, 0x01EE
    1d38:	90 91 ef 01 	lds	r25, 0x01EF
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	29 f0       	breq	.+10     	; 0x1d4a <alert_check+0x10c>
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	90 93 ef 01 	sts	0x01EF, r25
    1d46:	80 93 ee 01 	sts	0x01EE, r24
}
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	1f 91       	pop	r17
    1d50:	0f 91       	pop	r16
    1d52:	ff 90       	pop	r15
    1d54:	ef 90       	pop	r14
    1d56:	df 90       	pop	r13
    1d58:	cf 90       	pop	r12
    1d5a:	bf 90       	pop	r11
    1d5c:	af 90       	pop	r10
    1d5e:	9f 90       	pop	r9
    1d60:	8f 90       	pop	r8
    1d62:	7f 90       	pop	r7
    1d64:	6f 90       	pop	r6
    1d66:	08 95       	ret

00001d68 <filter_update>:
// 6    0.0026                          140
// 7    0.0012                          280
// 8    0.0007                          561
// 
int16_t filter_update(int16_t input, int32_t *filter_source)
{
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	fb 01       	movw	r30, r22
    // Update the filter with the current input.
    *filter_source = *filter_source - (*filter_source >> FILTER_SHIFT) + input;
    1d6e:	40 81       	ld	r20, Z
    1d70:	51 81       	ldd	r21, Z+1	; 0x01
    1d72:	62 81       	ldd	r22, Z+2	; 0x02
    1d74:	73 81       	ldd	r23, Z+3	; 0x03
    1d76:	8a 01       	movw	r16, r20
    1d78:	9b 01       	movw	r18, r22
    1d7a:	a2 e0       	ldi	r26, 0x02	; 2
    1d7c:	35 95       	asr	r19
    1d7e:	27 95       	ror	r18
    1d80:	17 95       	ror	r17
    1d82:	07 95       	ror	r16
    1d84:	aa 95       	dec	r26
    1d86:	d1 f7       	brne	.-12     	; 0x1d7c <filter_update+0x14>
    1d88:	40 1b       	sub	r20, r16
    1d8a:	51 0b       	sbc	r21, r17
    1d8c:	62 0b       	sbc	r22, r18
    1d8e:	73 0b       	sbc	r23, r19
    1d90:	09 2e       	mov	r0, r25
    1d92:	00 0c       	add	r0, r0
    1d94:	aa 0b       	sbc	r26, r26
    1d96:	bb 0b       	sbc	r27, r27
    1d98:	84 0f       	add	r24, r20
    1d9a:	95 1f       	adc	r25, r21
    1d9c:	a6 1f       	adc	r26, r22
    1d9e:	b7 1f       	adc	r27, r23
    1da0:	80 83       	st	Z, r24
    1da2:	91 83       	std	Z+1, r25	; 0x01
    1da4:	a2 83       	std	Z+2, r26	; 0x02
    1da6:	b3 83       	std	Z+3, r27	; 0x03

    // Scale output for unity gain.
    return (int16_t) (*filter_source >> FILTER_SHIFT);
    1da8:	12 e0       	ldi	r17, 0x02	; 2
    1daa:	b5 95       	asr	r27
    1dac:	a7 95       	ror	r26
    1dae:	97 95       	ror	r25
    1db0:	87 95       	ror	r24
    1db2:	1a 95       	dec	r17
    1db4:	d1 f7       	brne	.-12     	; 0x1daa <filter_update+0x42>
}
    1db6:	1f 91       	pop	r17
    1db8:	0f 91       	pop	r16
    1dba:	08 95       	ret

00001dbc <heartbeat_init>:
volatile uint8_t heartbeat_ready;

void heartbeat_init(void)
{
    // Initialize flags and values.
    heartbeat_ready = 0;
    1dbc:	10 92 1c 03 	sts	0x031C, r1

    // Clear any pending interrupts.
    TIFR0 = (1<OCF0B) | (1<<OCF0A) | (1<TOV0);
    1dc0:	83 e0       	ldi	r24, 0x03	; 3
    1dc2:	85 bb       	out	0x15, r24	; 21

    // Set the timer/counter0 interrupt masks.
    TIMSK0 = (1<<OCIE0A) |                                  // Interrupt on compare match A.
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	80 93 6e 00 	sts	0x006E, r24
             (0<<OCIE0B) |                                  // No interrupt on compare match B.
             (0<<TOIE0);                                    // No interrupt on overflow.

    // Initialize the count and compare values.
    TCNT0 = 0;
    1dca:	16 bc       	out	0x26, r1	; 38
    OCR0A = CRVALUE;
    1dcc:	93 ec       	ldi	r25, 0xC3	; 195
    1dce:	97 bd       	out	0x27, r25	; 39
    OCR0B = 0;
    1dd0:	18 bc       	out	0x28, r1	; 40

    // Set timer/counter0 control register A.
    TCCR0A = (0<<COM0A1) | (0<<COM0A0) |                    // Disconnect OCOA.
    1dd2:	84 bd       	out	0x24, r24	; 36
             (0<<COM0B1) | (0<<COM0B0) |                    // Disconnect OCOB.
             (1<<WGM01) | (0<<WGM00);                       // Mode 2 - clear timer on compare match.

    // Set timer/counter0 control register B.
    TCCR0B = (0<<FOC0A) | (0<<FOC0B) |                      // No force output compare A or B.
    1dd4:	85 e0       	ldi	r24, 0x05	; 5
    1dd6:	85 bd       	out	0x25, r24	; 37
    1dd8:	08 95       	ret

00001dda <__vector_14>:

}

SIGNAL(TIMER0_COMPA_vect)
// Handles timer/counter0 compare match A.
{
    1dda:	1f 92       	push	r1
    1ddc:	0f 92       	push	r0
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	0f 92       	push	r0
    1de2:	11 24       	eor	r1, r1
    1de4:	2f 93       	push	r18
    1de6:	3f 93       	push	r19
    1de8:	4f 93       	push	r20
    1dea:	5f 93       	push	r21
    1dec:	6f 93       	push	r22
    1dee:	7f 93       	push	r23
    1df0:	8f 93       	push	r24
    1df2:	9f 93       	push	r25
    1df4:	af 93       	push	r26
    1df6:	bf 93       	push	r27
    1df8:	ef 93       	push	r30
    1dfa:	ff 93       	push	r31
static inline void timer_increment(void)
{
    uint16_t value;

    // Read the timer value.
    value = registers_read_word(REG_TIMER_HI, REG_TIMER_LO);
    1dfc:	67 e0       	ldi	r22, 0x07	; 7
    1dfe:	86 e0       	ldi	r24, 0x06	; 6
    1e00:	0e 94 16 01 	call	0x22c	; 0x22c <registers_read_word>

    // Increment the timer value.
    ++value;
    1e04:	ac 01       	movw	r20, r24
    1e06:	4f 5f       	subi	r20, 0xFF	; 255
    1e08:	5f 4f       	sbci	r21, 0xFF	; 255

    // Write the increment timer value.
    registers_write_word(REG_TIMER_HI, REG_TIMER_LO, value);
    1e0a:	67 e0       	ldi	r22, 0x07	; 7
    1e0c:	86 e0       	ldi	r24, 0x06	; 6
    1e0e:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>
    // Increment the timer.
    timer_increment();
    TCNT0 = 0;
    1e12:	16 bc       	out	0x26, r1	; 38
    heartbeat_ready = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	80 93 1c 03 	sts	0x031C, r24
}
    1e1a:	ff 91       	pop	r31
    1e1c:	ef 91       	pop	r30
    1e1e:	bf 91       	pop	r27
    1e20:	af 91       	pop	r26
    1e22:	9f 91       	pop	r25
    1e24:	8f 91       	pop	r24
    1e26:	7f 91       	pop	r23
    1e28:	6f 91       	pop	r22
    1e2a:	5f 91       	pop	r21
    1e2c:	4f 91       	pop	r20
    1e2e:	3f 91       	pop	r19
    1e30:	2f 91       	pop	r18
    1e32:	0f 90       	pop	r0
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	0f 90       	pop	r0
    1e38:	1f 90       	pop	r1
    1e3a:	18 95       	reti

00001e3c <main>:
    }
}


int main (void)
{
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <main+0x6>
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
// Configure pins to their default states to conform to recommendation that all
// AVR MCU pins have a defined level.  We do this by configuring unused pins
// as inputs and enabling the internal pull-ups.
{
    // Configure unused port B pins as inputs and enable internal pull-up resistor.
    DDRB = (0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) |
    1e46:	86 e0       	ldi	r24, 0x06	; 6
    1e48:	84 b9       	out	0x04, r24	; 4
           (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (0<<DDB0);
    PORTB = (1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) |
    1e4a:	89 ef       	ldi	r24, 0xF9	; 249
    1e4c:	85 b9       	out	0x05, r24	; 5
            (1<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (1<<PORTB0);

    // Configure unused port C pins as inputs and enable internal pull-up resistor.
    DDRC = (0<<DDC6) | (0<<DDC5) | (0<<DDC4) |
    1e4e:	17 b8       	out	0x07, r1	; 7
           (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
    PORTC = (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) |
    1e50:	8f e7       	ldi	r24, 0x7F	; 127
    1e52:	88 b9       	out	0x08, r24	; 8
            (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);

    // Configure port D pins as inputs and enable internal pull-up resistor.
    DDRD = (1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) |
    1e54:	8c e9       	ldi	r24, 0x9C	; 156
    1e56:	8a b9       	out	0x0a, r24	; 10
           (1<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
    PORTD = (1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) |
    1e58:	80 ef       	ldi	r24, 0xF0	; 240
    1e5a:	8b b9       	out	0x0b, r24	; 11
{
    // Configure pins to the default states.
    config_pin_defaults();

    // Initialize the watchdog module.
    watchdog_init();
    1e5c:	0e 94 33 02 	call	0x466	; 0x466 <watchdog_init>

    // First, initialize registers that control servo operation.
    registers_init();
    1e60:	0e 94 01 01 	call	0x202	; 0x202 <registers_init>

#if PWM_STD_ENABLED || PWM_ENH_ENABLED
    // Initialize the PWM module.
    pwm_init();
    1e64:	0e 94 a6 08 	call	0x114c	; 0x114c <pwm_init>
    // Initialise the stepper motor
    step_init();
#endif
    
    // Initialize the ADC module.
    adc_init();
    1e68:	0e 94 6c 00 	call	0xd8	; 0xd8 <adc_init>

    // Initialise the Heartbeart
    heartbeat_init();
    1e6c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <heartbeat_init>

    // Initialize the PID algorithm module.
    pid_init();
    1e70:	0e 94 05 05 	call	0xa0a	; 0xa0a <pid_init>

#if CURVE_MOTION_ENABLED
    // Initialize curve motion module.
    motion_init();
    1e74:	0e 94 73 02 	call	0x4e6	; 0x4e6 <motion_init>
#endif

    // Initialize the power module.
    power_init();
    1e78:	0e 94 9d 06 	call	0xd3a	; 0xd3a <power_init>
    pulse_control_init();
#endif

#if BACKEMF_ENABLED
    // Initialise the back emf module
    backemf_init();
    1e7c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <backemf_init>
#endif

#if ALERT_ENABLED
    //initialise the alert registers
    alert_init();
    1e80:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <alert_init>
#endif

    // Initialize the TWI slave module.
    twi_slave_init(banks_read_byte(POS_PID_BANK, REG_TWI_ADDRESS));
    1e84:	80 91 9c 02 	lds	r24, 0x029C
    1e88:	0e 94 44 07 	call	0xe88	; 0xe88 <twi_slave_init>
#include "registers.h"

static inline void timer_set(uint16_t value)
{
    // Set the timer to the specified value.
    registers_write_word(REG_TIMER_HI, REG_TIMER_LO, value);
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	67 e0       	ldi	r22, 0x07	; 7
    1e92:	86 e0       	ldi	r24, 0x06	; 6
    1e94:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>

    // Finally initialize the timer.
    timer_set(0);

    // Enable interrupts.
    sei();
    1e98:	78 94       	sei

    // Trigger the adc sampling hardware
    adc_start(ADC_CHANNEL_POSITION);
    1e9a:	82 e0       	ldi	r24, 0x02	; 2
    1e9c:	0e 94 96 00 	call	0x12c	; 0x12c <adc_start>

inline static uint8_t adc_position_value_is_ready(void)
// Return the ADC position value ready flag.
{
    // Return the value ready flag.
    return adc_position_ready;
    1ea0:	80 91 f0 01 	lds	r24, 0x01F0

    // Wait until initial position value is ready.
    while (!adc_position_value_is_ready());
    1ea4:	88 23       	and	r24, r24
    1ea6:	e1 f3       	breq	.-8      	; 0x1ea0 <main+0x64>
#if ADC_POSITION_ENABLED
inline static uint16_t adc_get_position_value(void)
// Return the 16-bit ADC position value.
{
    // Clear the ready ADC value ready flag.
    adc_position_ready = 0;
    1ea8:	10 92 f0 01 	sts	0x01F0, r1

    // Return the value.
    return adc_position_value;
    1eac:	80 91 f8 01 	lds	r24, 0x01F8
    1eb0:	90 91 f9 01 	lds	r25, 0x01F9

#if CURVE_MOTION_ENABLED
    // Reset the curve motion with the current position of the servo.
    motion_reset(adc_get_position_value());
    1eb4:	0e 94 c2 02 	call	0x584	; 0x584 <motion_reset>
#if ADC_POSITION_ENABLED
inline static uint16_t adc_get_position_value(void)
// Return the 16-bit ADC position value.
{
    // Clear the ready ADC value ready flag.
    adc_position_ready = 0;
    1eb8:	10 92 f0 01 	sts	0x01F0, r1

    // Return the value.
    return adc_position_value;
    1ebc:	40 91 f8 01 	lds	r20, 0x01F8
    1ec0:	50 91 f9 01 	lds	r21, 0x01F9
#endif

    // Set the initial seek position and velocity.
    registers_write_word(REG_SEEK_POSITION_HI, REG_SEEK_POSITION_LO, adc_get_position_value());
    1ec4:	61 e2       	ldi	r22, 0x21	; 33
    1ec6:	80 e2       	ldi	r24, 0x20	; 32
    1ec8:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>
    registers_write_word(REG_SEEK_VELOCITY_HI, REG_SEEK_VELOCITY_LO, 0);
    1ecc:	40 e0       	ldi	r20, 0x00	; 0
    1ece:	50 e0       	ldi	r21, 0x00	; 0
    1ed0:	63 e2       	ldi	r22, 0x23	; 35
    1ed2:	82 e2       	ldi	r24, 0x22	; 34
    1ed4:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>
inline static void registers_write_enable(void)
{
    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    // Enable PWM to the servo motor.
    registers_write_byte(REG_FLAGS_LO, flags_lo | (1<<FLAGS_LO_WRITE_ENABLED));
    1ed8:	80 91 01 02 	lds	r24, 0x0201
    1edc:	83 60       	ori	r24, 0x03	; 3


// Write a single byte to the registers.
inline static void registers_write_byte(uint8_t address, uint8_t value)
{
    registers[address] = value;
    1ede:	80 93 01 02 	sts	0x0201, r24
            uint8_t pwm_b = registers_read_byte(REG_PWM_DIRB);
            if (pwm_a || pwm_b)
            {
                // Disable PWM
                backemf_coast_motor();
                emf_motor_is_coasting = 1;
    1ee2:	ff 24       	eor	r15, r15
    1ee4:	f3 94       	inc	r15

inline static uint8_t heartbeat_is_ready(void)
// Return the value ready flag.
{
    // Return the value ready flag.
    return heartbeat_ready;
    1ee6:	80 91 1c 03 	lds	r24, 0x031C
    for (;;)
    {
        static uint8_t emf_motor_is_coasting = 0;

        // Is the system heartbeat ready?
        if (heartbeat_is_ready())
    1eea:	88 23       	and	r24, r24
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <main+0xb4>
    1eee:	5a c0       	rjmp	.+180    	; 0x1fa4 <main+0x168>
}

inline static void heartbeat_value_clear_ready(void)
// Clear the ready flag on the heartbeat.
{
    heartbeat_ready = 0;
    1ef0:	10 92 1c 03 	sts	0x031C, r1
            pulse_control_update();
#endif

#if CURVE_MOTION_ENABLED
            // Give the motion curve a chance to update the seek position and velocity.
            motion_next(10);
    1ef4:	8a e0       	ldi	r24, 0x0A	; 10
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	0e 94 c9 03 	call	0x792	; 0x792 <motion_next>
// Register in-line functions.

// Read a single byte from the registers.
inline static uint8_t registers_read_byte(uint8_t address)
{
    return registers[address];
    1efc:	80 91 01 02 	lds	r24, 0x0201
#endif

            // General call support
            // Check to see if we have the wait flag enabled. If so save the new position, and write in the
            // old position until we get the move command
            if (general_call_enabled()) 
    1f00:	83 ff       	sbrs	r24, 3
    1f02:	37 c0       	rjmp	.+110    	; 0x1f72 <main+0x136>
            {
                //we need to wait for the go command before moving
                if (general_call_wait())
    1f04:	84 ff       	sbrs	r24, 4
    1f06:	17 c0       	rjmp	.+46     	; 0x1f36 <main+0xfa>
                {
                    // store the new position, but let the servo lock to the last seek position
                    wait_seek_position = (int16_t) registers_read_word(REG_SEEK_POSITION_HI, REG_SEEK_POSITION_LO);
    1f08:	61 e2       	ldi	r22, 0x21	; 33
    1f0a:	80 e2       	ldi	r24, 0x20	; 32
    1f0c:	0e 94 16 01 	call	0x22c	; 0x22c <registers_read_word>
    1f10:	90 93 10 01 	sts	0x0110, r25
    1f14:	80 93 0f 01 	sts	0x010F, r24
                    if (wait_seek_position != last_seek_position) // do we have a new position?
    1f18:	40 91 0d 01 	lds	r20, 0x010D
    1f1c:	50 91 0e 01 	lds	r21, 0x010E
    1f20:	84 17       	cp	r24, r20
    1f22:	95 07       	cpc	r25, r21
    1f24:	41 f0       	breq	.+16     	; 0x1f36 <main+0xfa>
                    {
                        new_seek_position = wait_seek_position;
    1f26:	90 93 0c 01 	sts	0x010C, r25
    1f2a:	80 93 0b 01 	sts	0x010B, r24
                        registers_write_word(REG_SEEK_POSITION_HI, REG_SEEK_POSITION_LO, last_seek_position);
    1f2e:	61 e2       	ldi	r22, 0x21	; 33
    1f30:	80 e2       	ldi	r24, 0x20	; 32
    1f32:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>
                    }
                }
                last_seek_position = registers_read_word(REG_SEEK_POSITION_HI, REG_SEEK_POSITION_LO);
    1f36:	61 e2       	ldi	r22, 0x21	; 33
    1f38:	80 e2       	ldi	r24, 0x20	; 32
    1f3a:	0e 94 16 01 	call	0x22c	; 0x22c <registers_read_word>
    1f3e:	90 93 0e 01 	sts	0x010E, r25
    1f42:	80 93 0d 01 	sts	0x010D, r24
    return (registers_read_byte(REG_FLAGS_LO) & (1<<FLAGS_LO_GENERALCALL_ENABLED)) ? 1 : 0;
}

inline static uint8_t general_call_start(void)
{
    return (registers_read_byte(REG_FLAGS_LO) & (1<<FLAGS_LO_GENERALCALL_START)) ? 1 : 0;
    1f46:	80 91 01 02 	lds	r24, 0x0201

                //check to make sure that we can start the move.
                if (general_call_start() || 
    1f4a:	85 fd       	sbrc	r24, 5
    1f4c:	06 c0       	rjmp	.+12     	; 0x1f5a <main+0x11e>
    1f4e:	90 91 29 02 	lds	r25, 0x0229
    1f52:	80 91 bc 02 	lds	r24, 0x02BC
    1f56:	98 13       	cpse	r25, r24
    1f58:	0c c0       	rjmp	.+24     	; 0x1f72 <main+0x136>
                    ( registers_read_byte(REG_GENERAL_CALL_GROUP_START) == banks_read_byte(CONFIG_BANK, REG_GENERAL_CALL_GROUP)))
                {
                    // write the new position with the previously saved position
                    registers_write_word(REG_SEEK_POSITION_HI, REG_SEEK_POSITION_LO, new_seek_position);  
    1f5a:	40 91 0b 01 	lds	r20, 0x010B
    1f5e:	50 91 0c 01 	lds	r21, 0x010C
    1f62:	61 e2       	ldi	r22, 0x21	; 33
    1f64:	80 e2       	ldi	r24, 0x20	; 32
    1f66:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>
                    general_call_start_wait_reset();  // reset the wait flag
    1f6a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <general_call_start_wait_reset>
                    general_call_start_reset();  // reset the start flag
    1f6e:	0e 94 2b 07 	call	0xe56	; 0xe56 <general_call_start_reset>
    1f72:	80 91 0b 02 	lds	r24, 0x020B
#if BACKEMF_ENABLED
            // Quick and dirty check to see if pwm is active. This is done to make sure the motor doesn't
            // whine in the audible range while idling.
            uint8_t pwm_a = registers_read_byte(REG_PWM_DIRA);
            uint8_t pwm_b = registers_read_byte(REG_PWM_DIRB);
            if (pwm_a || pwm_b)
    1f76:	90 91 0a 02 	lds	r25, 0x020A
    1f7a:	91 11       	cpse	r25, r1
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <main+0x146>
    1f7e:	88 23       	and	r24, r24
    1f80:	29 f0       	breq	.+10     	; 0x1f8c <main+0x150>
            {
                // Disable PWM
                backemf_coast_motor();
    1f82:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <backemf_coast_motor>
                emf_motor_is_coasting = 1;
    1f86:	f0 92 0a 01 	sts	0x010A, r15
    1f8a:	09 c0       	rjmp	.+18     	; 0x1f9e <main+0x162>
            }
            else
            {
                // reset the back EMF value to 0
                banks_write_word(INFORMATION_BANK, REG_BACKEMF_HI, REG_BACKEMF_LO, 0);
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	42 e0       	ldi	r20, 0x02	; 2
    1f92:	61 e0       	ldi	r22, 0x01	; 1
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <banks_write_word>
                emf_motor_is_coasting = 0;
    1f9a:	10 92 0a 01 	sts	0x010A, r1
            }
#endif

#if ADC_ENABLED
            // Trigger the adc sampling hardware. This triggers the position and temperature sample
            adc_start(ADC_FIRST_CHANNEL);
    1f9e:	82 e0       	ldi	r24, 0x02	; 2
    1fa0:	0e 94 96 00 	call	0x12c	; 0x12c <adc_start>

inline static uint8_t adc_temperature_value_is_ready(void)
// Return the ADC temperature value ready flag.
{
    // Return the value ready flag.
    return adc_temperature_ready;
    1fa4:	80 91 f4 01 	lds	r24, 0x01F4
        }
    
    
        // Wait for the samples to complete
#if TEMPERATURE_ENABLED
        if (adc_temperature_value_is_ready())
    1fa8:	88 23       	and	r24, r24
    1faa:	51 f0       	breq	.+20     	; 0x1fc0 <main+0x184>
#if TEMPERATURE_ENABLED
inline static uint16_t adc_get_temperature_value(void)
// Return the 16-bit ADC temperature value.
{
    // Clear the ready ADC value ready flag.
    adc_temperature_ready = 0;
    1fac:	10 92 f4 01 	sts	0x01F4, r1

    // Return the value.
    return adc_temperature_value;
    1fb0:	40 91 f1 01 	lds	r20, 0x01F1
    1fb4:	50 91 f2 01 	lds	r21, 0x01F2
        {
            // Save temperature value to registers
            registers_write_word(REG_TEMPERATURE_HI, REG_TEMPERATURE_LO, (uint16_t)adc_get_temperature_value());
    1fb8:	64 e1       	ldi	r22, 0x14	; 20
    1fba:	83 e1       	ldi	r24, 0x13	; 19
    1fbc:	0e 94 28 01 	call	0x250	; 0x250 <registers_write_word>

inline static uint8_t adc_power_value_is_ready(void)
// Return the ADC power value ready flag.
{
    // Return the value ready flag.
    return adc_power_ready;
    1fc0:	80 91 f3 01 	lds	r24, 0x01F3
        }
#endif
#if CURRENT_ENABLED
        if (adc_power_value_is_ready())
    1fc4:	88 23       	and	r24, r24
    1fc6:	41 f0       	breq	.+16     	; 0x1fd8 <main+0x19c>
#if CURRENT_ENABLED
inline static uint16_t adc_get_power_value(void)
// Return the signed 16-bit ADC power value.
{
    // Clear the ready ADC value ready flag.
    adc_power_ready = 0;
    1fc8:	10 92 f3 01 	sts	0x01F3, r1

    // Return the value.
    return adc_power_value;
    1fcc:	80 91 fa 01 	lds	r24, 0x01FA
    1fd0:	90 91 fb 01 	lds	r25, 0x01FB

            // Get the new power value.
            uint16_t power = adc_get_power_value();

            // Update the power value for reporting.
            power_update(power);
    1fd4:	0e 94 ad 06 	call	0xd5a	; 0xd5a <power_update>

inline static uint8_t adc_position_value_is_ready(void)
// Return the ADC position value ready flag.
{
    // Return the value ready flag.
    return adc_position_ready;
    1fd8:	80 91 f0 01 	lds	r24, 0x01F0
        }
#endif
#if ADC_POSITION_ENABLED
        if (adc_position_value_is_ready())
    1fdc:	88 23       	and	r24, r24
    1fde:	39 f1       	breq	.+78     	; 0x202e <main+0x1f2>
#if ADC_POSITION_ENABLED
inline static uint16_t adc_get_position_value(void)
// Return the 16-bit ADC position value.
{
    // Clear the ready ADC value ready flag.
    adc_position_ready = 0;
    1fe0:	10 92 f0 01 	sts	0x01F0, r1

    // Return the value.
    return adc_position_value;
    1fe4:	00 91 f8 01 	lds	r16, 0x01F8
    1fe8:	10 91 f9 01 	lds	r17, 0x01F9
            // Get the position value from an external module.
            position = (int16_t) get_position_value();
#endif
            int16_t pwm;
#if BACKEMF_ENABLED
            if (emf_motor_is_coasting == 1)
    1fec:	80 91 0a 01 	lds	r24, 0x010A
    1ff0:	81 30       	cpi	r24, 0x01	; 1
    1ff2:	71 f4       	brne	.+28     	; 0x2010 <main+0x1d4>
    1ff4:	80 91 0b 02 	lds	r24, 0x020B
            {
                uint8_t pwm_a = registers_read_byte(REG_PWM_DIRA);
                uint8_t pwm_b = registers_read_byte(REG_PWM_DIRB);

                // Quick and dirty check to see if pwm is active
                if (pwm_a || pwm_b)
    1ff8:	90 91 0a 02 	lds	r25, 0x020A
    1ffc:	91 11       	cpse	r25, r1
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <main+0x1c8>
    2000:	88 23       	and	r24, r24
    2002:	31 f0       	breq	.+12     	; 0x2010 <main+0x1d4>
                {
                    // Get the backemf sample.
                    backemf_get_sample();
    2004:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <backemf_get_sample>

                    // Turn the motor back on
                    backemf_restore_motor();
    2008:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <backemf_restore_motor>
		    emf_motor_is_coasting = 0;
    200c:	10 92 0a 01 	sts	0x010A, r1
                }
            }
#endif

            // Call the PID algorithm module to get a new PWM value.
            pwm = pid_position_to_pwm(position);
    2010:	c8 01       	movw	r24, r16
    2012:	0e 94 37 05 	call	0xa6e	; 0xa6e <pid_position_to_pwm>

#if ALERT_ENABLED
            // Update the alert status registers and do any throttling
            alert_check();
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	9a 83       	std	Y+2, r25	; 0x02
    201a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <alert_check>
#endif

            // Allow any alerts to modify the PWM value.
            pwm = alert_pwm_throttle(pwm);
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	9a 81       	ldd	r25, Y+2	; 0x02
    2022:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <alert_pwm_throttle>

#if PWM_STD_ENABLED || PWM_ENH_ENABLED
            // Update the servo movement as indicated by the PWM value.
            // Sanity checks are performed against the position value.
            pwm_update(position, pwm);
    2026:	bc 01       	movw	r22, r24
    2028:	c8 01       	movw	r24, r16
    202a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <pwm_update>
            step_update(position, pwm);
#endif
        }
    
        // Was a command recieved?
        if (twi_data_in_receive_buffer())
    202e:	0e 94 6b 07 	call	0xed6	; 0xed6 <twi_data_in_receive_buffer>
    2032:	88 23       	and	r24, r24
    2034:	09 f4       	brne	.+2      	; 0x2038 <main+0x1fc>
    2036:	5a c0       	rjmp	.+180    	; 0x20ec <main+0x2b0>
static void handle_twi_command(void)
{
    uint8_t command;

    // Get the command from the receive buffer.
    command = twi_receive_byte();
    2038:	0e 94 58 07 	call	0xeb0	; 0xeb0 <twi_receive_byte>

    switch (command)
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	fc 01       	movw	r30, r24
    2040:	e0 58       	subi	r30, 0x80	; 128
    2042:	f1 09       	sbc	r31, r1
    2044:	e9 31       	cpi	r30, 0x19	; 25
    2046:	f1 05       	cpc	r31, r1
    2048:	08 f0       	brcs	.+2      	; 0x204c <main+0x210>
    204a:	50 c0       	rjmp	.+160    	; 0x20ec <main+0x2b0>
    204c:	ec 5c       	subi	r30, 0xCC	; 204
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__tablejump2__>
    {
        case TWI_CMD_RESET:

            // Reset the servo.
            watchdog_hard_reset();
    2054:	0e 94 3f 02 	call	0x47e	; 0x47e <watchdog_hard_reset>
    2058:	49 c0       	rjmp	.+146    	; 0x20ec <main+0x2b0>
inline static void pwm_enable(void)
{
    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    // Enable PWM to the servo motor.
    registers_write_byte(REG_FLAGS_LO, flags_lo | (1<<FLAGS_LO_PWM_ENABLED));
    205a:	80 91 01 02 	lds	r24, 0x0201
    205e:	81 60       	ori	r24, 0x01	; 1
    2060:	43 c0       	rjmp	.+134    	; 0x20e8 <main+0x2ac>
inline static void pwm_disable(void)
{
    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    // Disable PWM to the servo motor.
    registers_write_byte(REG_FLAGS_LO, flags_lo & ~(1<<FLAGS_LO_PWM_ENABLED));
    2062:	80 91 01 02 	lds	r24, 0x0201
    2066:	8e 7f       	andi	r24, 0xFE	; 254


// Write a single byte to the registers.
inline static void registers_write_byte(uint8_t address, uint8_t value)
{
    registers[address] = value;
    2068:	80 93 01 02 	sts	0x0201, r24

    // Stop now!
    pwm_stop();
    206c:	0e 94 28 09 	call	0x1250	; 0x1250 <pwm_stop>
    2070:	3d c0       	rjmp	.+122    	; 0x20ec <main+0x2b0>
inline static void registers_write_enable(void)
{
    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    // Enable PWM to the servo motor.
    registers_write_byte(REG_FLAGS_LO, flags_lo | (1<<FLAGS_LO_WRITE_ENABLED));
    2072:	80 91 01 02 	lds	r24, 0x0201
    2076:	82 60       	ori	r24, 0x02	; 2
    2078:	37 c0       	rjmp	.+110    	; 0x20e8 <main+0x2ac>
inline static void registers_write_disable(void)
{
    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    // Disable PWM to the servo motor.
    registers_write_byte(REG_FLAGS_LO, flags_lo & ~(1<<FLAGS_LO_WRITE_ENABLED));
    207a:	80 91 01 02 	lds	r24, 0x0201
    207e:	8d 7f       	andi	r24, 0xFD	; 253
    2080:	33 c0       	rjmp	.+102    	; 0x20e8 <main+0x2ac>
            break;

        case TWI_CMD_REGISTERS_SAVE:

            // Save register values into EEPROM.
            eeprom_save_registers();
    2082:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <eeprom_save_registers>
    2086:	32 c0       	rjmp	.+100    	; 0x20ec <main+0x2b0>
            break;

        case TWI_CMD_REGISTERS_RESTORE:

            // Restore register values into EEPROM.
            eeprom_restore_registers();
    2088:	0e 94 76 01 	call	0x2ec	; 0x2ec <eeprom_restore_registers>
    208c:	2f c0       	rjmp	.+94     	; 0x20ec <main+0x2b0>
            break;

        case TWI_CMD_REGISTERS_DEFAULT:

            // Restore register values to factory defaults.
            registers_defaults();
    208e:	0e 94 12 01 	call	0x224	; 0x224 <registers_defaults>
    2092:	2c c0       	rjmp	.+88     	; 0x20ec <main+0x2b0>
            break;

        case TWI_CMD_EEPROM_ERASE:

            // Erase the EEPROM.
            eeprom_erase();
    2094:	0e 94 47 01 	call	0x28e	; 0x28e <eeprom_erase>
    2098:	29 c0       	rjmp	.+82     	; 0x20ec <main+0x2b0>
inline static void motion_enable(void)
{
    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    // Enable PWM to the servo motor.
    registers_write_byte(REG_FLAGS_LO, flags_lo | (1<<FLAGS_LO_MOTION_ENABLED));
    209a:	80 91 01 02 	lds	r24, 0x0201
    209e:	84 60       	ori	r24, 0x04	; 4
    20a0:	23 c0       	rjmp	.+70     	; 0x20e8 <main+0x2ac>
inline static void motion_disable(void)
{
    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    // Disable PWM to the servo motor.
    registers_write_byte(REG_FLAGS_LO, flags_lo & ~(1<<FLAGS_LO_MOTION_ENABLED));
    20a2:	80 91 01 02 	lds	r24, 0x0201
    20a6:	8b 7f       	andi	r24, 0xFB	; 251
    20a8:	1f c0       	rjmp	.+62     	; 0x20e8 <main+0x2ac>
#if ADC_POSITION_ENABLED
inline static uint16_t adc_get_position_value(void)
// Return the 16-bit ADC position value.
{
    // Clear the ready ADC value ready flag.
    adc_position_ready = 0;
    20aa:	10 92 f0 01 	sts	0x01F0, r1

    // Return the value.
    return adc_position_value;
    20ae:	80 91 f8 01 	lds	r24, 0x01F8
    20b2:	90 91 f9 01 	lds	r25, 0x01F9
            break;

        case TWI_CMD_CURVE_MOTION_RESET:

            // Reset the motion to the current position.
            motion_reset(adc_get_position_value());
    20b6:	0e 94 c2 02 	call	0x584	; 0x584 <motion_reset>
    20ba:	18 c0       	rjmp	.+48     	; 0x20ec <main+0x2b0>
            break;

        case TWI_CMD_CURVE_MOTION_APPEND:

            // Append motion curve data stored in the registers.
            motion_append();
    20bc:	0e 94 17 03 	call	0x62e	; 0x62e <motion_append>
    20c0:	15 c0       	rjmp	.+42     	; 0x20ec <main+0x2b0>
            break;
#endif
        case TWI_CMD_GCALL_ENABLE:

            // Enable the general call functionality
            general_call_enable();
    20c2:	0e 94 15 07 	call	0xe2a	; 0xe2a <general_call_enable>
    20c6:	12 c0       	rjmp	.+36     	; 0x20ec <main+0x2b0>
            break;

        case TWI_CMD_GCALL_DISABLE:

            // Disable General call functionaility
            general_call_disable();
    20c8:	0e 94 20 07 	call	0xe40	; 0xe40 <general_call_disable>
    20cc:	0f c0       	rjmp	.+30     	; 0x20ec <main+0x2b0>
            break;

        case TWI_CMD_GCALL_START_MOVE:

            // start the general call movement
            general_call_start_move();
    20ce:	0e 94 32 07 	call	0xe64	; 0xe64 <general_call_start_move>
    20d2:	0c c0       	rjmp	.+24     	; 0x20ec <main+0x2b0>
            break;

        case TWI_CMD_GCALL_START_WAIT:

            // dont move unless we get the start command or the group command
            general_call_start_wait();
    20d4:	0e 94 38 07 	call	0xe70	; 0xe70 <general_call_start_wait>
    20d8:	09 c0       	rjmp	.+18     	; 0x20ec <main+0x2b0>
inline static void pwm_brake_enable(void)
{
    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    // Enable Hardware brake
    registers_write_byte(REG_FLAGS_LO, flags_lo | (1<<FLAGS_LO_GENERALCALL_ENABLED));
    20da:	80 91 01 02 	lds	r24, 0x0201
    20de:	88 60       	ori	r24, 0x08	; 8
    20e0:	03 c0       	rjmp	.+6      	; 0x20e8 <main+0x2ac>
inline static void pwm_brake_disable(void)
{
    uint8_t flags_lo = registers_read_byte(REG_FLAGS_LO);

    // Disable hardware brake.
    registers_write_byte(REG_FLAGS_LO, flags_lo & ~(1<<FLAGS_LO_GENERALCALL_ENABLED));
    20e2:	80 91 01 02 	lds	r24, 0x0201
    20e6:	87 7f       	andi	r24, 0xF7	; 247


// Write a single byte to the registers.
inline static void registers_write_byte(uint8_t address, uint8_t value)
{
    registers[address] = value;
    20e8:	80 93 01 02 	sts	0x0201, r24
            // Handle any TWI command.
            handle_twi_command();
        }

        // Update the bank register operations
        banks_update_registers();
    20ec:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <banks_update_registers>
                registers_write_word(REG_SEEK_POSITION_HI, REG_SEEK_POSITION_LO, 0x0300);
            }
        }
#endif
#endif
    }
    20f0:	fa ce       	rjmp	.-524    	; 0x1ee6 <main+0xaa>

000020f2 <__udivmodsi4>:
    20f2:	a1 e2       	ldi	r26, 0x21	; 33
    20f4:	1a 2e       	mov	r1, r26
    20f6:	aa 1b       	sub	r26, r26
    20f8:	bb 1b       	sub	r27, r27
    20fa:	fd 01       	movw	r30, r26
    20fc:	0d c0       	rjmp	.+26     	; 0x2118 <__udivmodsi4_ep>

000020fe <__udivmodsi4_loop>:
    20fe:	aa 1f       	adc	r26, r26
    2100:	bb 1f       	adc	r27, r27
    2102:	ee 1f       	adc	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	a2 17       	cp	r26, r18
    2108:	b3 07       	cpc	r27, r19
    210a:	e4 07       	cpc	r30, r20
    210c:	f5 07       	cpc	r31, r21
    210e:	20 f0       	brcs	.+8      	; 0x2118 <__udivmodsi4_ep>
    2110:	a2 1b       	sub	r26, r18
    2112:	b3 0b       	sbc	r27, r19
    2114:	e4 0b       	sbc	r30, r20
    2116:	f5 0b       	sbc	r31, r21

00002118 <__udivmodsi4_ep>:
    2118:	66 1f       	adc	r22, r22
    211a:	77 1f       	adc	r23, r23
    211c:	88 1f       	adc	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	1a 94       	dec	r1
    2122:	69 f7       	brne	.-38     	; 0x20fe <__udivmodsi4_loop>
    2124:	60 95       	com	r22
    2126:	70 95       	com	r23
    2128:	80 95       	com	r24
    212a:	90 95       	com	r25
    212c:	9b 01       	movw	r18, r22
    212e:	ac 01       	movw	r20, r24
    2130:	bd 01       	movw	r22, r26
    2132:	cf 01       	movw	r24, r30
    2134:	08 95       	ret

00002136 <__tablejump2__>:
    2136:	ee 0f       	add	r30, r30
    2138:	ff 1f       	adc	r31, r31
    213a:	05 90       	lpm	r0, Z+
    213c:	f4 91       	lpm	r31, Z
    213e:	e0 2d       	mov	r30, r0
    2140:	09 94       	ijmp

00002142 <__usmulhisi3>:
    2142:	0e 94 b3 10 	call	0x2166	; 0x2166 <__umulhisi3>

00002146 <__usmulhisi3_tail>:
    2146:	b7 ff       	sbrs	r27, 7
    2148:	08 95       	ret
    214a:	82 1b       	sub	r24, r18
    214c:	93 0b       	sbc	r25, r19
    214e:	08 95       	ret

00002150 <__muluhisi3>:
    2150:	0e 94 b3 10 	call	0x2166	; 0x2166 <__umulhisi3>
    2154:	a5 9f       	mul	r26, r21
    2156:	90 0d       	add	r25, r0
    2158:	b4 9f       	mul	r27, r20
    215a:	90 0d       	add	r25, r0
    215c:	a4 9f       	mul	r26, r20
    215e:	80 0d       	add	r24, r0
    2160:	91 1d       	adc	r25, r1
    2162:	11 24       	eor	r1, r1
    2164:	08 95       	ret

00002166 <__umulhisi3>:
    2166:	a2 9f       	mul	r26, r18
    2168:	b0 01       	movw	r22, r0
    216a:	b3 9f       	mul	r27, r19
    216c:	c0 01       	movw	r24, r0
    216e:	a3 9f       	mul	r26, r19
    2170:	70 0d       	add	r23, r0
    2172:	81 1d       	adc	r24, r1
    2174:	11 24       	eor	r1, r1
    2176:	91 1d       	adc	r25, r1
    2178:	b2 9f       	mul	r27, r18
    217a:	70 0d       	add	r23, r0
    217c:	81 1d       	adc	r24, r1
    217e:	11 24       	eor	r1, r1
    2180:	91 1d       	adc	r25, r1
    2182:	08 95       	ret

00002184 <__subsf3>:
    2184:	50 58       	subi	r21, 0x80	; 128

00002186 <__addsf3>:
    2186:	bb 27       	eor	r27, r27
    2188:	aa 27       	eor	r26, r26
    218a:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__addsf3x>
    218e:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__fp_round>
    2192:	0e 94 1d 12 	call	0x243a	; 0x243a <__fp_pscA>
    2196:	38 f0       	brcs	.+14     	; 0x21a6 <__addsf3+0x20>
    2198:	0e 94 24 12 	call	0x2448	; 0x2448 <__fp_pscB>
    219c:	20 f0       	brcs	.+8      	; 0x21a6 <__addsf3+0x20>
    219e:	39 f4       	brne	.+14     	; 0x21ae <__addsf3+0x28>
    21a0:	9f 3f       	cpi	r25, 0xFF	; 255
    21a2:	19 f4       	brne	.+6      	; 0x21aa <__addsf3+0x24>
    21a4:	26 f4       	brtc	.+8      	; 0x21ae <__addsf3+0x28>
    21a6:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__fp_nan>
    21aa:	0e f4       	brtc	.+2      	; 0x21ae <__addsf3+0x28>
    21ac:	e0 95       	com	r30
    21ae:	e7 fb       	bst	r30, 7
    21b0:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__fp_inf>

000021b4 <__addsf3x>:
    21b4:	e9 2f       	mov	r30, r25
    21b6:	0e 94 3c 12 	call	0x2478	; 0x2478 <__fp_split3>
    21ba:	58 f3       	brcs	.-42     	; 0x2192 <__addsf3+0xc>
    21bc:	ba 17       	cp	r27, r26
    21be:	62 07       	cpc	r22, r18
    21c0:	73 07       	cpc	r23, r19
    21c2:	84 07       	cpc	r24, r20
    21c4:	95 07       	cpc	r25, r21
    21c6:	20 f0       	brcs	.+8      	; 0x21d0 <__addsf3x+0x1c>
    21c8:	79 f4       	brne	.+30     	; 0x21e8 <__addsf3x+0x34>
    21ca:	a6 f5       	brtc	.+104    	; 0x2234 <__addsf3x+0x80>
    21cc:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__fp_zero>
    21d0:	0e f4       	brtc	.+2      	; 0x21d4 <__addsf3x+0x20>
    21d2:	e0 95       	com	r30
    21d4:	0b 2e       	mov	r0, r27
    21d6:	ba 2f       	mov	r27, r26
    21d8:	a0 2d       	mov	r26, r0
    21da:	0b 01       	movw	r0, r22
    21dc:	b9 01       	movw	r22, r18
    21de:	90 01       	movw	r18, r0
    21e0:	0c 01       	movw	r0, r24
    21e2:	ca 01       	movw	r24, r20
    21e4:	a0 01       	movw	r20, r0
    21e6:	11 24       	eor	r1, r1
    21e8:	ff 27       	eor	r31, r31
    21ea:	59 1b       	sub	r21, r25
    21ec:	99 f0       	breq	.+38     	; 0x2214 <__addsf3x+0x60>
    21ee:	59 3f       	cpi	r21, 0xF9	; 249
    21f0:	50 f4       	brcc	.+20     	; 0x2206 <__addsf3x+0x52>
    21f2:	50 3e       	cpi	r21, 0xE0	; 224
    21f4:	68 f1       	brcs	.+90     	; 0x2250 <__addsf3x+0x9c>
    21f6:	1a 16       	cp	r1, r26
    21f8:	f0 40       	sbci	r31, 0x00	; 0
    21fa:	a2 2f       	mov	r26, r18
    21fc:	23 2f       	mov	r18, r19
    21fe:	34 2f       	mov	r19, r20
    2200:	44 27       	eor	r20, r20
    2202:	58 5f       	subi	r21, 0xF8	; 248
    2204:	f3 cf       	rjmp	.-26     	; 0x21ec <__addsf3x+0x38>
    2206:	46 95       	lsr	r20
    2208:	37 95       	ror	r19
    220a:	27 95       	ror	r18
    220c:	a7 95       	ror	r26
    220e:	f0 40       	sbci	r31, 0x00	; 0
    2210:	53 95       	inc	r21
    2212:	c9 f7       	brne	.-14     	; 0x2206 <__addsf3x+0x52>
    2214:	7e f4       	brtc	.+30     	; 0x2234 <__addsf3x+0x80>
    2216:	1f 16       	cp	r1, r31
    2218:	ba 0b       	sbc	r27, r26
    221a:	62 0b       	sbc	r22, r18
    221c:	73 0b       	sbc	r23, r19
    221e:	84 0b       	sbc	r24, r20
    2220:	ba f0       	brmi	.+46     	; 0x2250 <__addsf3x+0x9c>
    2222:	91 50       	subi	r25, 0x01	; 1
    2224:	a1 f0       	breq	.+40     	; 0x224e <__addsf3x+0x9a>
    2226:	ff 0f       	add	r31, r31
    2228:	bb 1f       	adc	r27, r27
    222a:	66 1f       	adc	r22, r22
    222c:	77 1f       	adc	r23, r23
    222e:	88 1f       	adc	r24, r24
    2230:	c2 f7       	brpl	.-16     	; 0x2222 <__addsf3x+0x6e>
    2232:	0e c0       	rjmp	.+28     	; 0x2250 <__addsf3x+0x9c>
    2234:	ba 0f       	add	r27, r26
    2236:	62 1f       	adc	r22, r18
    2238:	73 1f       	adc	r23, r19
    223a:	84 1f       	adc	r24, r20
    223c:	48 f4       	brcc	.+18     	; 0x2250 <__addsf3x+0x9c>
    223e:	87 95       	ror	r24
    2240:	77 95       	ror	r23
    2242:	67 95       	ror	r22
    2244:	b7 95       	ror	r27
    2246:	f7 95       	ror	r31
    2248:	9e 3f       	cpi	r25, 0xFE	; 254
    224a:	08 f0       	brcs	.+2      	; 0x224e <__addsf3x+0x9a>
    224c:	b0 cf       	rjmp	.-160    	; 0x21ae <__addsf3+0x28>
    224e:	93 95       	inc	r25
    2250:	88 0f       	add	r24, r24
    2252:	08 f0       	brcs	.+2      	; 0x2256 <__addsf3x+0xa2>
    2254:	99 27       	eor	r25, r25
    2256:	ee 0f       	add	r30, r30
    2258:	97 95       	ror	r25
    225a:	87 95       	ror	r24
    225c:	08 95       	ret

0000225e <__divsf3>:
    225e:	0e 94 43 11 	call	0x2286	; 0x2286 <__divsf3x>
    2262:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__fp_round>
    2266:	0e 94 24 12 	call	0x2448	; 0x2448 <__fp_pscB>
    226a:	58 f0       	brcs	.+22     	; 0x2282 <__divsf3+0x24>
    226c:	0e 94 1d 12 	call	0x243a	; 0x243a <__fp_pscA>
    2270:	40 f0       	brcs	.+16     	; 0x2282 <__divsf3+0x24>
    2272:	29 f4       	brne	.+10     	; 0x227e <__divsf3+0x20>
    2274:	5f 3f       	cpi	r21, 0xFF	; 255
    2276:	29 f0       	breq	.+10     	; 0x2282 <__divsf3+0x24>
    2278:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__fp_inf>
    227c:	51 11       	cpse	r21, r1
    227e:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__fp_szero>
    2282:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__fp_nan>

00002286 <__divsf3x>:
    2286:	0e 94 3c 12 	call	0x2478	; 0x2478 <__fp_split3>
    228a:	68 f3       	brcs	.-38     	; 0x2266 <__divsf3+0x8>

0000228c <__divsf3_pse>:
    228c:	99 23       	and	r25, r25
    228e:	b1 f3       	breq	.-20     	; 0x227c <__divsf3+0x1e>
    2290:	55 23       	and	r21, r21
    2292:	91 f3       	breq	.-28     	; 0x2278 <__divsf3+0x1a>
    2294:	95 1b       	sub	r25, r21
    2296:	55 0b       	sbc	r21, r21
    2298:	bb 27       	eor	r27, r27
    229a:	aa 27       	eor	r26, r26
    229c:	62 17       	cp	r22, r18
    229e:	73 07       	cpc	r23, r19
    22a0:	84 07       	cpc	r24, r20
    22a2:	38 f0       	brcs	.+14     	; 0x22b2 <__divsf3_pse+0x26>
    22a4:	9f 5f       	subi	r25, 0xFF	; 255
    22a6:	5f 4f       	sbci	r21, 0xFF	; 255
    22a8:	22 0f       	add	r18, r18
    22aa:	33 1f       	adc	r19, r19
    22ac:	44 1f       	adc	r20, r20
    22ae:	aa 1f       	adc	r26, r26
    22b0:	a9 f3       	breq	.-22     	; 0x229c <__divsf3_pse+0x10>
    22b2:	35 d0       	rcall	.+106    	; 0x231e <__divsf3_pse+0x92>
    22b4:	0e 2e       	mov	r0, r30
    22b6:	3a f0       	brmi	.+14     	; 0x22c6 <__divsf3_pse+0x3a>
    22b8:	e0 e8       	ldi	r30, 0x80	; 128
    22ba:	32 d0       	rcall	.+100    	; 0x2320 <__divsf3_pse+0x94>
    22bc:	91 50       	subi	r25, 0x01	; 1
    22be:	50 40       	sbci	r21, 0x00	; 0
    22c0:	e6 95       	lsr	r30
    22c2:	00 1c       	adc	r0, r0
    22c4:	ca f7       	brpl	.-14     	; 0x22b8 <__divsf3_pse+0x2c>
    22c6:	2b d0       	rcall	.+86     	; 0x231e <__divsf3_pse+0x92>
    22c8:	fe 2f       	mov	r31, r30
    22ca:	29 d0       	rcall	.+82     	; 0x231e <__divsf3_pse+0x92>
    22cc:	66 0f       	add	r22, r22
    22ce:	77 1f       	adc	r23, r23
    22d0:	88 1f       	adc	r24, r24
    22d2:	bb 1f       	adc	r27, r27
    22d4:	26 17       	cp	r18, r22
    22d6:	37 07       	cpc	r19, r23
    22d8:	48 07       	cpc	r20, r24
    22da:	ab 07       	cpc	r26, r27
    22dc:	b0 e8       	ldi	r27, 0x80	; 128
    22de:	09 f0       	breq	.+2      	; 0x22e2 <__divsf3_pse+0x56>
    22e0:	bb 0b       	sbc	r27, r27
    22e2:	80 2d       	mov	r24, r0
    22e4:	bf 01       	movw	r22, r30
    22e6:	ff 27       	eor	r31, r31
    22e8:	93 58       	subi	r25, 0x83	; 131
    22ea:	5f 4f       	sbci	r21, 0xFF	; 255
    22ec:	3a f0       	brmi	.+14     	; 0x22fc <__divsf3_pse+0x70>
    22ee:	9e 3f       	cpi	r25, 0xFE	; 254
    22f0:	51 05       	cpc	r21, r1
    22f2:	78 f0       	brcs	.+30     	; 0x2312 <__divsf3_pse+0x86>
    22f4:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__fp_inf>
    22f8:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__fp_szero>
    22fc:	5f 3f       	cpi	r21, 0xFF	; 255
    22fe:	e4 f3       	brlt	.-8      	; 0x22f8 <__divsf3_pse+0x6c>
    2300:	98 3e       	cpi	r25, 0xE8	; 232
    2302:	d4 f3       	brlt	.-12     	; 0x22f8 <__divsf3_pse+0x6c>
    2304:	86 95       	lsr	r24
    2306:	77 95       	ror	r23
    2308:	67 95       	ror	r22
    230a:	b7 95       	ror	r27
    230c:	f7 95       	ror	r31
    230e:	9f 5f       	subi	r25, 0xFF	; 255
    2310:	c9 f7       	brne	.-14     	; 0x2304 <__divsf3_pse+0x78>
    2312:	88 0f       	add	r24, r24
    2314:	91 1d       	adc	r25, r1
    2316:	96 95       	lsr	r25
    2318:	87 95       	ror	r24
    231a:	97 f9       	bld	r25, 7
    231c:	08 95       	ret
    231e:	e1 e0       	ldi	r30, 0x01	; 1
    2320:	66 0f       	add	r22, r22
    2322:	77 1f       	adc	r23, r23
    2324:	88 1f       	adc	r24, r24
    2326:	bb 1f       	adc	r27, r27
    2328:	62 17       	cp	r22, r18
    232a:	73 07       	cpc	r23, r19
    232c:	84 07       	cpc	r24, r20
    232e:	ba 07       	cpc	r27, r26
    2330:	20 f0       	brcs	.+8      	; 0x233a <__divsf3_pse+0xae>
    2332:	62 1b       	sub	r22, r18
    2334:	73 0b       	sbc	r23, r19
    2336:	84 0b       	sbc	r24, r20
    2338:	ba 0b       	sbc	r27, r26
    233a:	ee 1f       	adc	r30, r30
    233c:	88 f7       	brcc	.-30     	; 0x2320 <__divsf3_pse+0x94>
    233e:	e0 95       	com	r30
    2340:	08 95       	ret

00002342 <__fixsfsi>:
    2342:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
    2346:	68 94       	set
    2348:	b1 11       	cpse	r27, r1
    234a:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__fp_szero>
    234e:	08 95       	ret

00002350 <__fixunssfsi>:
    2350:	0e 94 44 12 	call	0x2488	; 0x2488 <__fp_splitA>
    2354:	88 f0       	brcs	.+34     	; 0x2378 <__fixunssfsi+0x28>
    2356:	9f 57       	subi	r25, 0x7F	; 127
    2358:	98 f0       	brcs	.+38     	; 0x2380 <__fixunssfsi+0x30>
    235a:	b9 2f       	mov	r27, r25
    235c:	99 27       	eor	r25, r25
    235e:	b7 51       	subi	r27, 0x17	; 23
    2360:	b0 f0       	brcs	.+44     	; 0x238e <__fixunssfsi+0x3e>
    2362:	e1 f0       	breq	.+56     	; 0x239c <__fixunssfsi+0x4c>
    2364:	66 0f       	add	r22, r22
    2366:	77 1f       	adc	r23, r23
    2368:	88 1f       	adc	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	1a f0       	brmi	.+6      	; 0x2374 <__fixunssfsi+0x24>
    236e:	ba 95       	dec	r27
    2370:	c9 f7       	brne	.-14     	; 0x2364 <__fixunssfsi+0x14>
    2372:	14 c0       	rjmp	.+40     	; 0x239c <__fixunssfsi+0x4c>
    2374:	b1 30       	cpi	r27, 0x01	; 1
    2376:	91 f0       	breq	.+36     	; 0x239c <__fixunssfsi+0x4c>
    2378:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__fp_zero>
    237c:	b1 e0       	ldi	r27, 0x01	; 1
    237e:	08 95       	ret
    2380:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__fp_zero>
    2384:	67 2f       	mov	r22, r23
    2386:	78 2f       	mov	r23, r24
    2388:	88 27       	eor	r24, r24
    238a:	b8 5f       	subi	r27, 0xF8	; 248
    238c:	39 f0       	breq	.+14     	; 0x239c <__fixunssfsi+0x4c>
    238e:	b9 3f       	cpi	r27, 0xF9	; 249
    2390:	cc f3       	brlt	.-14     	; 0x2384 <__fixunssfsi+0x34>
    2392:	86 95       	lsr	r24
    2394:	77 95       	ror	r23
    2396:	67 95       	ror	r22
    2398:	b3 95       	inc	r27
    239a:	d9 f7       	brne	.-10     	; 0x2392 <__fixunssfsi+0x42>
    239c:	3e f4       	brtc	.+14     	; 0x23ac <__fixunssfsi+0x5c>
    239e:	90 95       	com	r25
    23a0:	80 95       	com	r24
    23a2:	70 95       	com	r23
    23a4:	61 95       	neg	r22
    23a6:	7f 4f       	sbci	r23, 0xFF	; 255
    23a8:	8f 4f       	sbci	r24, 0xFF	; 255
    23aa:	9f 4f       	sbci	r25, 0xFF	; 255
    23ac:	08 95       	ret

000023ae <__floatunsisf>:
    23ae:	e8 94       	clt
    23b0:	09 c0       	rjmp	.+18     	; 0x23c4 <__floatsisf+0x12>

000023b2 <__floatsisf>:
    23b2:	97 fb       	bst	r25, 7
    23b4:	3e f4       	brtc	.+14     	; 0x23c4 <__floatsisf+0x12>
    23b6:	90 95       	com	r25
    23b8:	80 95       	com	r24
    23ba:	70 95       	com	r23
    23bc:	61 95       	neg	r22
    23be:	7f 4f       	sbci	r23, 0xFF	; 255
    23c0:	8f 4f       	sbci	r24, 0xFF	; 255
    23c2:	9f 4f       	sbci	r25, 0xFF	; 255
    23c4:	99 23       	and	r25, r25
    23c6:	a9 f0       	breq	.+42     	; 0x23f2 <__floatsisf+0x40>
    23c8:	f9 2f       	mov	r31, r25
    23ca:	96 e9       	ldi	r25, 0x96	; 150
    23cc:	bb 27       	eor	r27, r27
    23ce:	93 95       	inc	r25
    23d0:	f6 95       	lsr	r31
    23d2:	87 95       	ror	r24
    23d4:	77 95       	ror	r23
    23d6:	67 95       	ror	r22
    23d8:	b7 95       	ror	r27
    23da:	f1 11       	cpse	r31, r1
    23dc:	f8 cf       	rjmp	.-16     	; 0x23ce <__floatsisf+0x1c>
    23de:	fa f4       	brpl	.+62     	; 0x241e <__floatsisf+0x6c>
    23e0:	bb 0f       	add	r27, r27
    23e2:	11 f4       	brne	.+4      	; 0x23e8 <__floatsisf+0x36>
    23e4:	60 ff       	sbrs	r22, 0
    23e6:	1b c0       	rjmp	.+54     	; 0x241e <__floatsisf+0x6c>
    23e8:	6f 5f       	subi	r22, 0xFF	; 255
    23ea:	7f 4f       	sbci	r23, 0xFF	; 255
    23ec:	8f 4f       	sbci	r24, 0xFF	; 255
    23ee:	9f 4f       	sbci	r25, 0xFF	; 255
    23f0:	16 c0       	rjmp	.+44     	; 0x241e <__floatsisf+0x6c>
    23f2:	88 23       	and	r24, r24
    23f4:	11 f0       	breq	.+4      	; 0x23fa <__floatsisf+0x48>
    23f6:	96 e9       	ldi	r25, 0x96	; 150
    23f8:	11 c0       	rjmp	.+34     	; 0x241c <__floatsisf+0x6a>
    23fa:	77 23       	and	r23, r23
    23fc:	21 f0       	breq	.+8      	; 0x2406 <__floatsisf+0x54>
    23fe:	9e e8       	ldi	r25, 0x8E	; 142
    2400:	87 2f       	mov	r24, r23
    2402:	76 2f       	mov	r23, r22
    2404:	05 c0       	rjmp	.+10     	; 0x2410 <__floatsisf+0x5e>
    2406:	66 23       	and	r22, r22
    2408:	71 f0       	breq	.+28     	; 0x2426 <__floatsisf+0x74>
    240a:	96 e8       	ldi	r25, 0x86	; 134
    240c:	86 2f       	mov	r24, r22
    240e:	70 e0       	ldi	r23, 0x00	; 0
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	2a f0       	brmi	.+10     	; 0x241e <__floatsisf+0x6c>
    2414:	9a 95       	dec	r25
    2416:	66 0f       	add	r22, r22
    2418:	77 1f       	adc	r23, r23
    241a:	88 1f       	adc	r24, r24
    241c:	da f7       	brpl	.-10     	; 0x2414 <__floatsisf+0x62>
    241e:	88 0f       	add	r24, r24
    2420:	96 95       	lsr	r25
    2422:	87 95       	ror	r24
    2424:	97 f9       	bld	r25, 7
    2426:	08 95       	ret

00002428 <__fp_inf>:
    2428:	97 f9       	bld	r25, 7
    242a:	9f 67       	ori	r25, 0x7F	; 127
    242c:	80 e8       	ldi	r24, 0x80	; 128
    242e:	70 e0       	ldi	r23, 0x00	; 0
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	08 95       	ret

00002434 <__fp_nan>:
    2434:	9f ef       	ldi	r25, 0xFF	; 255
    2436:	80 ec       	ldi	r24, 0xC0	; 192
    2438:	08 95       	ret

0000243a <__fp_pscA>:
    243a:	00 24       	eor	r0, r0
    243c:	0a 94       	dec	r0
    243e:	16 16       	cp	r1, r22
    2440:	17 06       	cpc	r1, r23
    2442:	18 06       	cpc	r1, r24
    2444:	09 06       	cpc	r0, r25
    2446:	08 95       	ret

00002448 <__fp_pscB>:
    2448:	00 24       	eor	r0, r0
    244a:	0a 94       	dec	r0
    244c:	12 16       	cp	r1, r18
    244e:	13 06       	cpc	r1, r19
    2450:	14 06       	cpc	r1, r20
    2452:	05 06       	cpc	r0, r21
    2454:	08 95       	ret

00002456 <__fp_round>:
    2456:	09 2e       	mov	r0, r25
    2458:	03 94       	inc	r0
    245a:	00 0c       	add	r0, r0
    245c:	11 f4       	brne	.+4      	; 0x2462 <__fp_round+0xc>
    245e:	88 23       	and	r24, r24
    2460:	52 f0       	brmi	.+20     	; 0x2476 <__fp_round+0x20>
    2462:	bb 0f       	add	r27, r27
    2464:	40 f4       	brcc	.+16     	; 0x2476 <__fp_round+0x20>
    2466:	bf 2b       	or	r27, r31
    2468:	11 f4       	brne	.+4      	; 0x246e <__fp_round+0x18>
    246a:	60 ff       	sbrs	r22, 0
    246c:	04 c0       	rjmp	.+8      	; 0x2476 <__fp_round+0x20>
    246e:	6f 5f       	subi	r22, 0xFF	; 255
    2470:	7f 4f       	sbci	r23, 0xFF	; 255
    2472:	8f 4f       	sbci	r24, 0xFF	; 255
    2474:	9f 4f       	sbci	r25, 0xFF	; 255
    2476:	08 95       	ret

00002478 <__fp_split3>:
    2478:	57 fd       	sbrc	r21, 7
    247a:	90 58       	subi	r25, 0x80	; 128
    247c:	44 0f       	add	r20, r20
    247e:	55 1f       	adc	r21, r21
    2480:	59 f0       	breq	.+22     	; 0x2498 <__fp_splitA+0x10>
    2482:	5f 3f       	cpi	r21, 0xFF	; 255
    2484:	71 f0       	breq	.+28     	; 0x24a2 <__fp_splitA+0x1a>
    2486:	47 95       	ror	r20

00002488 <__fp_splitA>:
    2488:	88 0f       	add	r24, r24
    248a:	97 fb       	bst	r25, 7
    248c:	99 1f       	adc	r25, r25
    248e:	61 f0       	breq	.+24     	; 0x24a8 <__fp_splitA+0x20>
    2490:	9f 3f       	cpi	r25, 0xFF	; 255
    2492:	79 f0       	breq	.+30     	; 0x24b2 <__fp_splitA+0x2a>
    2494:	87 95       	ror	r24
    2496:	08 95       	ret
    2498:	12 16       	cp	r1, r18
    249a:	13 06       	cpc	r1, r19
    249c:	14 06       	cpc	r1, r20
    249e:	55 1f       	adc	r21, r21
    24a0:	f2 cf       	rjmp	.-28     	; 0x2486 <__fp_split3+0xe>
    24a2:	46 95       	lsr	r20
    24a4:	f1 df       	rcall	.-30     	; 0x2488 <__fp_splitA>
    24a6:	08 c0       	rjmp	.+16     	; 0x24b8 <__fp_splitA+0x30>
    24a8:	16 16       	cp	r1, r22
    24aa:	17 06       	cpc	r1, r23
    24ac:	18 06       	cpc	r1, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	f1 cf       	rjmp	.-30     	; 0x2494 <__fp_splitA+0xc>
    24b2:	86 95       	lsr	r24
    24b4:	71 05       	cpc	r23, r1
    24b6:	61 05       	cpc	r22, r1
    24b8:	08 94       	sec
    24ba:	08 95       	ret

000024bc <__fp_zero>:
    24bc:	e8 94       	clt

000024be <__fp_szero>:
    24be:	bb 27       	eor	r27, r27
    24c0:	66 27       	eor	r22, r22
    24c2:	77 27       	eor	r23, r23
    24c4:	cb 01       	movw	r24, r22
    24c6:	97 f9       	bld	r25, 7
    24c8:	08 95       	ret

000024ca <__mulsf3>:
    24ca:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__mulsf3x>
    24ce:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__fp_round>
    24d2:	0e 94 1d 12 	call	0x243a	; 0x243a <__fp_pscA>
    24d6:	38 f0       	brcs	.+14     	; 0x24e6 <__mulsf3+0x1c>
    24d8:	0e 94 24 12 	call	0x2448	; 0x2448 <__fp_pscB>
    24dc:	20 f0       	brcs	.+8      	; 0x24e6 <__mulsf3+0x1c>
    24de:	95 23       	and	r25, r21
    24e0:	11 f0       	breq	.+4      	; 0x24e6 <__mulsf3+0x1c>
    24e2:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__fp_inf>
    24e6:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__fp_nan>
    24ea:	11 24       	eor	r1, r1
    24ec:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__fp_szero>

000024f0 <__mulsf3x>:
    24f0:	0e 94 3c 12 	call	0x2478	; 0x2478 <__fp_split3>
    24f4:	70 f3       	brcs	.-36     	; 0x24d2 <__mulsf3+0x8>

000024f6 <__mulsf3_pse>:
    24f6:	95 9f       	mul	r25, r21
    24f8:	c1 f3       	breq	.-16     	; 0x24ea <__mulsf3+0x20>
    24fa:	95 0f       	add	r25, r21
    24fc:	50 e0       	ldi	r21, 0x00	; 0
    24fe:	55 1f       	adc	r21, r21
    2500:	62 9f       	mul	r22, r18
    2502:	f0 01       	movw	r30, r0
    2504:	72 9f       	mul	r23, r18
    2506:	bb 27       	eor	r27, r27
    2508:	f0 0d       	add	r31, r0
    250a:	b1 1d       	adc	r27, r1
    250c:	63 9f       	mul	r22, r19
    250e:	aa 27       	eor	r26, r26
    2510:	f0 0d       	add	r31, r0
    2512:	b1 1d       	adc	r27, r1
    2514:	aa 1f       	adc	r26, r26
    2516:	64 9f       	mul	r22, r20
    2518:	66 27       	eor	r22, r22
    251a:	b0 0d       	add	r27, r0
    251c:	a1 1d       	adc	r26, r1
    251e:	66 1f       	adc	r22, r22
    2520:	82 9f       	mul	r24, r18
    2522:	22 27       	eor	r18, r18
    2524:	b0 0d       	add	r27, r0
    2526:	a1 1d       	adc	r26, r1
    2528:	62 1f       	adc	r22, r18
    252a:	73 9f       	mul	r23, r19
    252c:	b0 0d       	add	r27, r0
    252e:	a1 1d       	adc	r26, r1
    2530:	62 1f       	adc	r22, r18
    2532:	83 9f       	mul	r24, r19
    2534:	a0 0d       	add	r26, r0
    2536:	61 1d       	adc	r22, r1
    2538:	22 1f       	adc	r18, r18
    253a:	74 9f       	mul	r23, r20
    253c:	33 27       	eor	r19, r19
    253e:	a0 0d       	add	r26, r0
    2540:	61 1d       	adc	r22, r1
    2542:	23 1f       	adc	r18, r19
    2544:	84 9f       	mul	r24, r20
    2546:	60 0d       	add	r22, r0
    2548:	21 1d       	adc	r18, r1
    254a:	82 2f       	mov	r24, r18
    254c:	76 2f       	mov	r23, r22
    254e:	6a 2f       	mov	r22, r26
    2550:	11 24       	eor	r1, r1
    2552:	9f 57       	subi	r25, 0x7F	; 127
    2554:	50 40       	sbci	r21, 0x00	; 0
    2556:	9a f0       	brmi	.+38     	; 0x257e <__mulsf3_pse+0x88>
    2558:	f1 f0       	breq	.+60     	; 0x2596 <__mulsf3_pse+0xa0>
    255a:	88 23       	and	r24, r24
    255c:	4a f0       	brmi	.+18     	; 0x2570 <__mulsf3_pse+0x7a>
    255e:	ee 0f       	add	r30, r30
    2560:	ff 1f       	adc	r31, r31
    2562:	bb 1f       	adc	r27, r27
    2564:	66 1f       	adc	r22, r22
    2566:	77 1f       	adc	r23, r23
    2568:	88 1f       	adc	r24, r24
    256a:	91 50       	subi	r25, 0x01	; 1
    256c:	50 40       	sbci	r21, 0x00	; 0
    256e:	a9 f7       	brne	.-22     	; 0x255a <__mulsf3_pse+0x64>
    2570:	9e 3f       	cpi	r25, 0xFE	; 254
    2572:	51 05       	cpc	r21, r1
    2574:	80 f0       	brcs	.+32     	; 0x2596 <__mulsf3_pse+0xa0>
    2576:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__fp_inf>
    257a:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__fp_szero>
    257e:	5f 3f       	cpi	r21, 0xFF	; 255
    2580:	e4 f3       	brlt	.-8      	; 0x257a <__mulsf3_pse+0x84>
    2582:	98 3e       	cpi	r25, 0xE8	; 232
    2584:	d4 f3       	brlt	.-12     	; 0x257a <__mulsf3_pse+0x84>
    2586:	86 95       	lsr	r24
    2588:	77 95       	ror	r23
    258a:	67 95       	ror	r22
    258c:	b7 95       	ror	r27
    258e:	f7 95       	ror	r31
    2590:	e7 95       	ror	r30
    2592:	9f 5f       	subi	r25, 0xFF	; 255
    2594:	c1 f7       	brne	.-16     	; 0x2586 <__mulsf3_pse+0x90>
    2596:	fe 2b       	or	r31, r30
    2598:	88 0f       	add	r24, r24
    259a:	91 1d       	adc	r25, r1
    259c:	96 95       	lsr	r25
    259e:	87 95       	ror	r24
    25a0:	97 f9       	bld	r25, 7
    25a2:	08 95       	ret

000025a4 <memset>:
    25a4:	dc 01       	movw	r26, r24
    25a6:	01 c0       	rjmp	.+2      	; 0x25aa <memset+0x6>
    25a8:	6d 93       	st	X+, r22
    25aa:	41 50       	subi	r20, 0x01	; 1
    25ac:	50 40       	sbci	r21, 0x00	; 0
    25ae:	e0 f7       	brcc	.-8      	; 0x25a8 <memset+0x4>
    25b0:	08 95       	ret

000025b2 <eeprom_read_block>:
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22

000025b6 <eeprom_read_blraw>:
    25b6:	fc 01       	movw	r30, r24
    25b8:	f9 99       	sbic	0x1f, 1	; 31
    25ba:	fe cf       	rjmp	.-4      	; 0x25b8 <eeprom_read_blraw+0x2>
    25bc:	06 c0       	rjmp	.+12     	; 0x25ca <eeprom_read_blraw+0x14>
    25be:	f2 bd       	out	0x22, r31	; 34
    25c0:	e1 bd       	out	0x21, r30	; 33
    25c2:	f8 9a       	sbi	0x1f, 0	; 31
    25c4:	31 96       	adiw	r30, 0x01	; 1
    25c6:	00 b4       	in	r0, 0x20	; 32
    25c8:	0d 92       	st	X+, r0
    25ca:	41 50       	subi	r20, 0x01	; 1
    25cc:	50 40       	sbci	r21, 0x00	; 0
    25ce:	b8 f7       	brcc	.-18     	; 0x25be <eeprom_read_blraw+0x8>
    25d0:	08 95       	ret

000025d2 <eeprom_write_block>:
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	03 c0       	rjmp	.+6      	; 0x25de <eeprom_write_block+0xc>
    25d8:	2d 91       	ld	r18, X+
    25da:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <eeprom_write_r18>
    25de:	41 50       	subi	r20, 0x01	; 1
    25e0:	50 40       	sbci	r21, 0x00	; 0
    25e2:	d0 f7       	brcc	.-12     	; 0x25d8 <eeprom_write_block+0x6>
    25e4:	08 95       	ret

000025e6 <eeprom_write_byte>:
    25e6:	26 2f       	mov	r18, r22

000025e8 <eeprom_write_r18>:
    25e8:	f9 99       	sbic	0x1f, 1	; 31
    25ea:	fe cf       	rjmp	.-4      	; 0x25e8 <eeprom_write_r18>
    25ec:	1f ba       	out	0x1f, r1	; 31
    25ee:	92 bd       	out	0x22, r25	; 34
    25f0:	81 bd       	out	0x21, r24	; 33
    25f2:	20 bd       	out	0x20, r18	; 32
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	fa 9a       	sbi	0x1f, 2	; 31
    25fa:	f9 9a       	sbi	0x1f, 1	; 31
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	08 95       	ret

00002602 <_exit>:
    2602:	f8 94       	cli

00002604 <__stop_program>:
    2604:	ff cf       	rjmp	.-2      	; 0x2604 <__stop_program>
